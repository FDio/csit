# Copyright (c) 2019 Cisco and/or its affiliates.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

*** Settings ***
| Resource | resources/libraries/robot/shared/default.robot
|
| Force Tags | 2_NODE_SINGLE_LINK_TOPO | DEVICETEST | HW_ENV | DCR_ENV | SCAPY
| ... | NIC_Virtual | SRv6 | IP6FWD | FEATURE | SRv6_PROXY
| ... | SRv6_PROXY_DYN | MEMIF | DOCKER | DRV_VFIO_PCI
|
| Suite Setup | Setup suite single link | scapy
| Test Setup | Setup test
| Test Teardown | Tear down test | packet_trace | srv6
|
| Test Template | Local Template
|
| Documentation | Segment routing over IPv6 dataplane with\
| ... | Dynamic SRv6 proxy test cases*
|
| ... | *[Top] Network Topologies:* TG-DUT1-TG 2-node circular topology\
| ... | with single links between nodes.
| ... | *[Enc] Packet Encapsulations:* Eth-IPv6-SRH-IPv6 on DUT1-TG,
| ... | Eth-IPv6 on TG->DUT1 and DUT1-CNT for IPv6 routing over SRv6.
| ... | *[Cfg] DUT configuration:* DUT1 is configured with IPv6\
| ... | routing and static route, SR policy and steering policy for one\
| ... | direction and one SR behaviour (function) - End.AD - for other\
| ... | direction. DUT1 is tested with ${nic_name}.\
| ... | *[Ver] Test packet are generated by TG on\
| ... | links to DUTs. Packet containing Ethernet header,IPv6 header with \
| ... | static payload. MAC addresses are matching MAC addresses
| ... | of the TG node interfaces. \
| ... | *[Ref] Applicable standard specifications:* SRv6 Network Programming -\
| ... | draft 3 and Segment Routing for Service Chaining - internet draft 01.

*** Variables ***
| @{plugins_to_enable}= | dpdk_plugin.so | memif_plugin.so | srv6ad_plugin.so
| ${crypto_type}= | ${None}
| ${nic_name}= | virtual
| ${nic_driver}= | vfio-pci
| ${osi_layer}= | L3
| ${overhead}= | ${96}
# SIDs
| ${dut1_sid1}= | 2002:1::
| ${dut1_sid2}= | 2003:2::
| ${dut1_bsid}= | 2002:1::1
| ${dut1_sid2_1}= | 2002:2::
| ${dut1_sid2_2}= | 2003:1::
| ${dut1_bsid2}= | 2003:1::1
| ${out_sid1_1}= | 2002:3::
| ${out_sid1_2}= | 2002:4::
| ${out_sid2_1}= | 2003:3::
| ${out_sid2_2}= | 2003:4::
| ${sid_prefix}= | ${64}
# IP settings
| ${tg_if1_ip6_subnet}= | 2001:1::
| ${tg_if2_ip6_subnet}= | 2001:2::
| ${dst_addr_nr}= | ${1}
| ${dut1_if1_ip6}= | 2001:1::1
| ${dut1_if2_ip6}= | 2001:2::1
| ${dut1-memif-1-if1_ip6}= | 3001:1::1
| ${dut1-memif-1-if2_ip6}= | 3001:1::2
| ${dut1_nh}= | 4002::
| ${dut1_nh2}= | 4001::
| ${prefix}= | ${64}
| ${mem_prefix}= | ${128}
# Container
| ${container_engine}= | Docker
| ${container_chain_topology}= | chain_functional

*** Keywords ***
| Local Template
| | [Documentation]
| | ... | [Cfg] DUT1 is configured with IPv6\
| | ... | routing and static route, SR policy and steering policy for one\
| | ... | direction and one SR behaviour (function) - End.AD - for other\
| | ... | direction. Each DUT uses ${phy_cores} physical core(s) for\
| | ... | worker threads.
| | ... | [Ver] Test packet is sent from TG on both the links to DUT1. \
| | ... | Packet is received on TG on the both links from DUT1.
|
| | ... | *Arguments:*
| | ... | - frame_size - Framesize in Bytes in integer or string (IMIX_v4_1).
| | ... | Type: integer, string
| | ... | - phy_cores - Number of physical cores. Type: integer
| | ... | - rxq - Number of RX queues, default value: ${None}. Type: integer
| |
| | [Arguments] | ${frame_size} | ${phy_cores} | ${rxq}=${None}
| |
| | Set Test Variable | \${frame_size}
| |
| | Given Set Max Rate And Jumbo
| | And Add worker threads to all DUTs | ${phy_cores} | ${rxq}
| | And Pre-initialize layer driver | ${nic_driver}
| | And Apply startup configuration on all VPP DUTs
| | When Initialize layer driver | ${nic_driver}
| | And Initialize layer interface
| | And Start containers for test | auto_scale=${False} | pinning=${False} 
| | And Initialize IPv6 forwarding over SRv6 with endpoint to SR-unaware Service Function via 'dynamic_proxy' behaviour in 2-node circular topology
| | Then Send packet and verify headers | ${tg}
| | ... | 2001:1::2 | 2001:2::2 
| | ... | ${tg_if1} | ${tg_if1_mac} | ${dut1_if1_mac}
| | ... | ${tg_if2} | ${dut1_if2_mac} | ${tg_if2_mac}
| | Then Send packet and verify headers | ${tg}
| | ... | 2001:2::2 | 2001:1::2
| | ... | ${tg_if2} | ${tg_if2_mac} | ${dut1_if2_mac}
| | ... | ${tg_if1} | ${dut1_if1_mac} | ${tg_if1_mac}

*** Test Cases ***
| tc01-78B-1c-ethip6srhip6-ip6base-srv6proxy-stat-dev
| | [Tags] | 78B | 1C
| | frame_size=${78} | phy_cores=${1}