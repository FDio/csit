{
  "comments": [
    {
      "key": {
        "uuid": "518ba3f0_68908fe9",
        "filename": "resources/libraries/python/NodePath.py",
        "patchSetId": 59
      },
      "lineNbr": 223,
      "author": {
        "id": 207
      },
      "writtenOn": "2020-04-01T16:27:18Z",
      "side": 1,
      "message": "[key for key in nodes.keys() if u\"DUT\" in key]",
      "range": {
        "startLine": 223,
        "startChar": 15,
        "endLine": 223,
        "endChar": 11
      },
      "revId": "76a242a5e17eda22fb8490416daf73cbf9328b75",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e677e6a_6c5b7c8d",
        "filename": "resources/libraries/robot/l2/l2_bridge_domain.robot",
        "patchSetId": 59
      },
      "lineNbr": 474,
      "author": {
        "id": 1263
      },
      "writtenOn": "2020-04-01T14:04:00Z",
      "side": 1,
      "message": "It is not clear to me how do you know PFs 2 and 4 are the ones (the DUT-DUT links) we want to enslave. We can document is somewhere near topology files, but I would prefer a proper NodePath computation. But I see double link tests have troubles (in daily jobs) since switching to AVF as the primary driver, so perhaps this can be used until a specific fix comes.",
      "range": {
        "startLine": 474,
        "startChar": 18,
        "endLine": 474,
        "endChar": 34
      },
      "revId": "76a242a5e17eda22fb8490416daf73cbf9328b75",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5dfa6b22_fb15233d",
        "filename": "resources/libraries/robot/l2/l2_bridge_domain.robot",
        "patchSetId": 59
      },
      "lineNbr": 474,
      "author": {
        "id": 76
      },
      "writtenOn": "2020-04-01T14:15:48Z",
      "side": 1,
      "message": "NodePath is properly computed. And yes double link is working now",
      "parentUuid": "7e677e6a_6c5b7c8d",
      "range": {
        "startLine": 474,
        "startChar": 18,
        "endLine": 474,
        "endChar": 34
      },
      "revId": "76a242a5e17eda22fb8490416daf73cbf9328b75",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5034db9a_bce7da2b",
        "filename": "resources/libraries/robot/l2/l2_bridge_domain.robot",
        "patchSetId": 59
      },
      "lineNbr": 474,
      "author": {
        "id": 1263
      },
      "writtenOn": "2020-04-01T14:23:30Z",
      "side": 1,
      "message": "Comparing MRR results, old daily has 5.81 Mpps for 1link [0] and 5.46 Mpps [1] for 2link; this patch has 5.89 Mpps for 1link [2] and 5.28 Mpps for 2link...\n\n[0] https://logs.fd.io/production/vex-yul-rot-jenkins-1/csit-vpp-perf-mrr-daily-master-3n-skx/827/archives/log.html.gz#s1-s1-s1-s8-s3-t1\n[1] https://logs.fd.io/production/vex-yul-rot-jenkins-1/csit-vpp-perf-mrr-daily-master-3n-skx/827/archives/log.html.gz#s1-s1-s1-s8-s7-t1\n[2] https://logs.fd.io/production/vex-yul-rot-jenkins-1/csit-vpp-perf-verify-master-3n-skx/360/archives/log.html.gz#s1-s1-s1-s1-s3-t1\n[3] https://logs.fd.io/production/vex-yul-rot-jenkins-1/csit-vpp-perf-verify-master-3n-skx/360/archives/log.html.gz#s1-s1-s1-s1-s7-t1",
      "parentUuid": "7e677e6a_6c5b7c8d",
      "range": {
        "startLine": 474,
        "startChar": 18,
        "endLine": 474,
        "endChar": 34
      },
      "revId": "76a242a5e17eda22fb8490416daf73cbf9328b75",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fc750cb_3c86087d",
        "filename": "resources/libraries/robot/l2/l2_bridge_domain.robot",
        "patchSetId": 59
      },
      "lineNbr": 474,
      "author": {
        "id": 1263
      },
      "writtenOn": "2020-04-01T16:18:49Z",
      "side": 1,
      "message": "\u003e NodePath is properly computed. And yes double link is working now\n\nOk, I think I understand now. Previously we were setting up only the interfaces we know we will use (no secondary TG-DUT links). Now the code is simplified, it sets all interfaces up, but relies on TRex (and VPP config) keeping the secondary TG-DUT links idle.\nOdd numbers here work with even numbers for DUT2 to select both DUT-DUT links, as NodePath orders it that way (interfaces along primary path first).\n\nAlright, hopefully a VPP worker reading (also) from one more idle interface is not much of a deal.",
      "parentUuid": "5034db9a_bce7da2b",
      "range": {
        "startLine": 474,
        "startChar": 18,
        "endLine": 474,
        "endChar": 34
      },
      "revId": "76a242a5e17eda22fb8490416daf73cbf9328b75",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e7ca436_ebfb797b",
        "filename": "resources/libraries/robot/shared/interfaces.robot",
        "patchSetId": 59
      },
      "lineNbr": 73,
      "author": {
        "id": 1263
      },
      "writtenOn": "2020-04-01T12:37:18Z",
      "side": 1,
      "message": "at current ${int} layer",
      "range": {
        "startLine": 73,
        "startChar": 41,
        "endLine": 73,
        "endChar": 42
      },
      "revId": "76a242a5e17eda22fb8490416daf73cbf9328b75",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75a301c4_2e006019",
        "filename": "resources/libraries/robot/shared/test_setup.robot",
        "patchSetId": 59
      },
      "lineNbr": 32,
      "author": {
        "id": 1263
      },
      "writtenOn": "2020-04-01T13:21:01Z",
      "side": 1,
      "message": "It took me a while to realize this does absolutely nothing, as you are setting only a local variable, while the suite variable is already handled correctly by calling (or not) Additional Suite Setup Action For performance vf.",
      "range": {
        "startLine": 32,
        "startChar": 15,
        "endLine": 32,
        "endChar": 27
      },
      "revId": "76a242a5e17eda22fb8490416daf73cbf9328b75",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88e84bf6_0076cf23",
        "filename": "resources/libraries/robot/shared/test_setup.robot",
        "patchSetId": 59
      },
      "lineNbr": 32,
      "author": {
        "id": 76
      },
      "writtenOn": "2020-04-01T13:33:58Z",
      "side": 1,
      "message": "Without this line it would fail and fall as house of cards.\n\nThe biggest challenge was to connect suite setup with tests isolation. Every test should recover the original variables done on suite level. Sure it can be \"test variable\" although not sure if Robot does sees difference or not once the ${int} was declared as suite var in suite setup",
      "parentUuid": "75a301c4_2e006019",
      "range": {
        "startLine": 32,
        "startChar": 15,
        "endLine": 32,
        "endChar": 27
      },
      "revId": "76a242a5e17eda22fb8490416daf73cbf9328b75",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a52532f_bd331602",
        "filename": "resources/libraries/robot/shared/test_setup.robot",
        "patchSetId": 59
      },
      "lineNbr": 32,
      "author": {
        "id": 1263
      },
      "writtenOn": "2020-04-01T16:04:04Z",
      "side": 1,
      "message": "\u003e once the ${int} was declared as suite var in suite setup\n\nAh, you are right. Suite variables are writeable and it is enough to declare them suite-scope once. It shows how rarely I use mutable suite variables.\nExcept that there are caveats. I cannot find the description in Robot User Guide, but I remember there was some limitation in what variables survive from setup keywords. In __init__.robot files I used global variables instead.\n\nMy secondary point is that I think you have the values in wrong order, \"prevf\" suggests it is for the ${nic_vfs} \u003e 0 case. The fact that it works probably means we do not need prevf as (a part of) a separate variable name. Or perhaps some tests are currently doing wrong things in a subtle way not resulting in test failure.\n\nHere is a toy example example, using Set Test Variable in the last line is enough to make it work as intended:\n\n*** Settings ***\n| Suite Setup | setups\n| Test Setup | setupt\n\n***Test Cases***\n| Foo\n| | Log To Console | ${foo}\n\n*** Keywords ***\n| setups\n| | Set Suite Variable | ${foo} | foo\n\n| setupt\n| | Set Variable | ${foo} | bar",
      "parentUuid": "88e84bf6_0076cf23",
      "range": {
        "startLine": 32,
        "startChar": 15,
        "endLine": 32,
        "endChar": 27
      },
      "revId": "76a242a5e17eda22fb8490416daf73cbf9328b75",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62c63e7f_7b233745",
        "filename": "resources/libraries/robot/shared/test_setup.robot",
        "patchSetId": 59
      },
      "lineNbr": 32,
      "author": {
        "id": 76
      },
      "writtenOn": "2020-04-01T16:23:29Z",
      "side": 1,
      "message": "\u003e The fact that it works probably means we do not need prevf as (a part of) a separate variable name. Or perhaps some tests are currently doing wrong things in a subtle way not resulting in test failure.\n\nI was puzzling but, we have to create new physical (although it is called SRIOV VF) interface in topology file (this is prevf prepare-vf) then we are creating new interfaces in VPP (AVFs or RDMAs). they are different sets (but sharing same info almost). But due to how other KW are designed we have in teardown the routing that VPP interfaces and any other that was created are destroyed between tests in suite (which is good and expected as they no longer exists), but then if i would only use only one set of RF variables i found they become lost (as suite setup is expensive operation taking up to 15s we cannot do it every TC) so i created prevf as a way of \"backup\" that are restored quickly for TC (cheaper then full SRIOV init). I admit it is sort of speed-workaround but (time is time), back to your comment #1 RF seems to not handling it properly in terms of scope when we are overwriting variables so i made this bullet proof solution",
      "parentUuid": "3a52532f_bd331602",
      "range": {
        "startLine": 32,
        "startChar": 15,
        "endLine": 32,
        "endChar": 27
      },
      "revId": "76a242a5e17eda22fb8490416daf73cbf9328b75",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    }
  ]
}