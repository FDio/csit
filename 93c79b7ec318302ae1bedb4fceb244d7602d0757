{
  "comments": [
    {
      "key": {
        "uuid": "560fd6ab_23a3a827",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 29,
      "author": {
        "id": 76
      },
      "writtenOn": "2018-04-24T10:57:31Z",
      "side": 1,
      "message": "We have DropRateSearch library for any search related functions. This library is TG controller.",
      "range": {
        "startLine": 29,
        "startChar": 56,
        "endLine": 29,
        "endChar": 75
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c528df04_02b3f03f",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 29,
      "author": {
        "id": 1263
      },
      "writtenOn": "2018-04-24T17:07:01Z",
      "side": 1,
      "message": "See below.",
      "parentUuid": "560fd6ab_23a3a827",
      "range": {
        "startLine": 29,
        "startChar": 56,
        "endLine": 29,
        "endChar": 75
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d78395f_b3da6f04",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 541,
      "author": {
        "id": 76
      },
      "writtenOn": "2018-04-24T10:57:31Z",
      "side": 1,
      "message": "I still cannot fully understand why we do not have TGRateProvider. As explained, how to connect IXIA there? What is Trex specific, that cannot be written as low-level driver wrapper for IXIA?\nThe original idea of CSIT to have TG independent is broken then.",
      "range": {
        "startLine": 541,
        "startChar": 6,
        "endLine": 541,
        "endChar": 22
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d9f8246_cc85a1c6",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 541,
      "author": {
        "id": 1263
      },
      "writtenOn": "2018-04-24T17:07:01Z",
      "side": 1,
      "message": "UPDATE: I think I have a compromise, will submit in next patch. The comments below are just to ilustrate my initial views.\n\n\u003e how to connect IXIA there?\n\nNo idea. How do you connect IXIA to class TrafficGenerator? It is full of Trex specifics and I do not see any abstract class defining common API.\n\nI would probably create IxiaRateProvider (subclass of AbstractRateProvider) to hide IXIA specifics, and then class OptimizedIxiaSearch with line 631 replaced by the appropriate constructor.\n\n\u003e why we do not have TGRateProvider\n\nBecause I have no idea which specifics will be common for Trex and Ixia but not for other AbstractRateProviders (e.g. the simulator ones).\n\n\u003e What is Trex specific\n\nI would guess lines 579 and 585, not to mention 580-581.\n\n\u003e that cannot be written as low-level driver wrapper for IXIA?\n\nIxiaRateProvider would be such a wrapper.\n\nThe disconnect is perhaps in the fact that I refuse to think about adding \"elif tg_node[\u0027subtype\u0027] \u003d\u003d NodeSubTypeTG.IXIA:\" to the already bloated TrafficGenerator class.\n\n\u003e CSIT to have TG independent\n\nRight now, I can rename OptimizedTrexSearch to OptimizedSearch (and perform_optimized_trex_ndrpdr_search to perform_optimized_ndrpdr_search), add argument tg_type\u003dtrex (to the keyword, or better yet to the class constructor) and put line 631 under an if.\n\nOnce IXIA rate providex exists (so we know which arguments its constructor needs), the missing arguments could be added where needed.",
      "parentUuid": "4d78395f_b3da6f04",
      "range": {
        "startLine": 541,
        "startChar": 6,
        "endLine": 541,
        "endChar": 22
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb272f5c_dc2b6ee8",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 541,
      "author": {
        "id": 76
      },
      "writtenOn": "2018-04-25T08:41:49Z",
      "side": 1,
      "message": "| No idea. How do you connect IXIA to class TrafficGenerator?\n\nInitially in CSIT this class was designed for doing the wrapper and common API. So in test there cannot be reference to particular TG. You can safely assume now that IXIA in terms of reporting back the measured data will be same. If not lets desing it properly. I am generally not against mods into this code it just that in some point we need unified API to wrap all TGs so TESTS must be independent. And I am not big fan of having 10+ layers of wrapping :)\n\n| Because I have no idea which specifics will be common for Trex and Ixia\n\nSee the TRex low level driver. I expect that to be the same. Low lever TG driver just report back measured data in unified way?\n\n| I would guess lines 579 and 585, not to mention 580-581.\n\nSame as above. This is responsibility of low level driver to have this aligned?\n\n| Right now, I can rename OptimizedTrexSearch to OptimizedSearch ...\u003c/snip\u003e\n\nI think it is good start to have at least TESTs independend on TG to avoid refacotr in future. The target is to avoid duplicating TESTs becaus of TG. It is topology file that defining TG here.\n\n| IxiaRateProvider would be such a wrapper.\n\nLooks ok to me (with few comments maybe) but as per above. Avoid any hard deps in tests\n\n| Once IXIA rate providex exists\n\nIt does, it is just that right now it is not public. Let me ask the status of making it public.",
      "parentUuid": "6d9f8246_cc85a1c6",
      "range": {
        "startLine": 541,
        "startChar": 6,
        "endLine": 541,
        "endChar": 22
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cdeba336_d633aecd",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 541,
      "author": {
        "id": 1263
      },
      "writtenOn": "2018-04-25T13:10:39Z",
      "side": 1,
      "message": "For now, I have merged the two methods into TrafficGenerator without any further changes (except two comments). See patch set 101.\n\nTrafficGenerator refactor can be done later if needed.",
      "parentUuid": "bb272f5c_dc2b6ee8",
      "range": {
        "startLine": 541,
        "startChar": 6,
        "endLine": 541,
        "endChar": 22
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "059e7cc3_447564dd",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 541,
      "author": {
        "id": 1263
      },
      "writtenOn": "2018-04-25T13:54:36Z",
      "side": 1,
      "message": "\u003e Let me ask the status of making it public.\n\nIn the meantime we can discuss using a toy model:\nhttps://gerrit.fd.io/r/12125\n\nCurrent TrafficGenerator resembles the state solution, I prefer the factory solution.",
      "parentUuid": "bb272f5c_dc2b6ee8",
      "range": {
        "startLine": 541,
        "startChar": 6,
        "endLine": 541,
        "endChar": 22
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a8a3109_bec5b10b",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 541,
      "author": {
        "id": 76
      },
      "writtenOn": "2018-04-25T14:03:58Z",
      "side": 1,
      "message": "Will check, agree",
      "parentUuid": "cdeba336_d633aecd",
      "range": {
        "startLine": 541,
        "startChar": 6,
        "endLine": 541,
        "endChar": 22
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44cf7354_fb6f9c44",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 558,
      "author": {
        "id": 76
      },
      "writtenOn": "2018-04-24T10:57:31Z",
      "side": 1,
      "message": "wouldn\u0027t it be better to merge this with previous class and replace args as **kwargs for variability?",
      "range": {
        "startLine": 558,
        "startChar": 8,
        "endLine": 558,
        "endChar": 47
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43e3aa81_eef577dd",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 558,
      "author": {
        "id": 1263
      },
      "writtenOn": "2018-04-24T17:07:01Z",
      "side": 1,
      "message": "The abstract optimized search is calling measure() without specifying frame_size, traffic_type, warmup_time.\n\nAlso, TGDropRateSearchImpl.measure_loss() is not merged to TrafficGenerator, so I assumed there is a reason for that (aside of it already being quite fat already).",
      "parentUuid": "44cf7354_fb6f9c44",
      "range": {
        "startLine": 558,
        "startChar": 8,
        "endLine": 558,
        "endChar": 47
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a42b79c_2b65d315",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 558,
      "author": {
        "id": 76
      },
      "writtenOn": "2018-04-25T08:41:49Z",
      "side": 1,
      "message": "Let\u0027s assume that this is way forward. Would be possible to somehow make it compatible for binary search? Eg. having this new abstract provider to be prepared for new or old search algo? Can we migrate binary search to this?\nI am aiming for code simplicity and avoiding maintenance of older code path?",
      "parentUuid": "43e3aa81_eef577dd",
      "range": {
        "startLine": 558,
        "startChar": 8,
        "endLine": 558,
        "endChar": 47
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86106f9a_089f43e7",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 558,
      "author": {
        "id": 1263
      },
      "writtenOn": "2018-04-25T13:10:39Z",
      "side": 1,
      "message": "\u003e Can we migrate binary search to this?\n\nDropRateSearch.measure_loss() has more arguments and less information in the return value. We would need a wrapper, similar to TGDropRateSearchImpl.\n\n\u003e I am aiming for code simplicity\n\nMy idea of getting simple code is replacing the old tests and deleting DropRateSearch.py :)",
      "parentUuid": "2a42b79c_2b65d315",
      "range": {
        "startLine": 558,
        "startChar": 8,
        "endLine": 558,
        "endChar": 47
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ba2cd40_6eeba60c",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 558,
      "author": {
        "id": 76
      },
      "writtenOn": "2018-04-25T14:03:58Z",
      "side": 1,
      "message": "As long as we will have fully covered linear and binary search then yes. Potentially Combined search (low prio) and then best_n worst_n.",
      "parentUuid": "86106f9a_089f43e7",
      "range": {
        "startLine": 558,
        "startChar": 8,
        "endLine": 558,
        "endChar": 47
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6cef2a3f_014c786d",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 589,
      "author": {
        "id": 76
      },
      "writtenOn": "2018-04-24T10:57:31Z",
      "side": 1,
      "message": "We have DropRateSearch library for any search related functions. This library is TG controller.",
      "range": {
        "startLine": 589,
        "startChar": 6,
        "endLine": 589,
        "endChar": 25
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d00125ac_15acdc87",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 589,
      "author": {
        "id": 1263
      },
      "writtenOn": "2018-04-24T17:07:01Z",
      "side": 1,
      "message": "Ideally, we would have one file (e.g. DropRateSearch.py) for search algorithms abstracted from rate providers, another file (e.g. this TrafficGenerator.py) for rate providers (such as classes TrafficGenerator and TrexRateProvider) not related to any search logic, and a third file for integration classes such as TGDropRateSearchImpl and OptimizedTrexSearch.\n\nI figured that when this file already imports from DropRateSearch (and not the other way around), and TGDropRateSearchImpl is here (even if it is a search algorithm, not a mere TG controller), OptimizedTrexSearch can also be here.",
      "parentUuid": "6cef2a3f_014c786d",
      "range": {
        "startLine": 589,
        "startChar": 6,
        "endLine": 589,
        "endChar": 25
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "977fa326_eeb40d69",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 589,
      "author": {
        "id": 76
      },
      "writtenOn": "2018-04-25T08:41:49Z",
      "side": 1,
      "message": "| Ideally, ...\u003c/snip\u003e\n\nI like this idea\n\n| TGDropRateSearchImpl is here ...\n\nAgree that some refactor is needed.",
      "parentUuid": "d00125ac_15acdc87",
      "range": {
        "startLine": 589,
        "startChar": 6,
        "endLine": 589,
        "endChar": 25
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24a85605_0854a8b4",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 592,
      "author": {
        "id": 76
      },
      "writtenOn": "2018-04-24T10:57:31Z",
      "side": 1,
      "message": "Wouldn\u0027t it be better to have this as **kwargs?",
      "range": {
        "startLine": 592,
        "startChar": 8,
        "endLine": 592,
        "endChar": 44
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e473db2_f45d4723",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 592,
      "author": {
        "id": 1263
      },
      "writtenOn": "2018-04-24T17:07:01Z",
      "side": 1,
      "message": "Considering the space the arguments take, maybe yes. But on the other hand, the arguments are split into three subsets for lines 631-635, and I imagine the splitting code will be harder to maintain than the current boilerplate.\nAnd no, I am not willing to make the 3 called methods accept **kwargs.\n\nThe proper way to deal with long argument lists is to structure them (see ProgressState), but in this case that would not save space overall.",
      "parentUuid": "24a85605_0854a8b4",
      "range": {
        "startLine": 592,
        "startChar": 8,
        "endLine": 592,
        "endChar": 44
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8bb5073_12049dab",
        "filename": "resources/libraries/python/TrafficGenerator.py",
        "patchSetId": 99
      },
      "lineNbr": 592,
      "author": {
        "id": 76
      },
      "writtenOn": "2018-04-25T08:41:49Z",
      "side": 1,
      "message": "Ideally we talked with Tibor to adopt some code model to be aliged on one side with \"Pythonic\" and other side to have some sort of schema.\n\nFar future we would like to see something like special class for kwargs parsing and having defined in clear way which are allowe, not poluting the code to much and bumping pylints to astronomical values and supresses. But i agree that this is not right place to start with this patch.\n\nIgnoring for now.",
      "parentUuid": "0e473db2_f45d4723",
      "range": {
        "startLine": 592,
        "startChar": 8,
        "endLine": 592,
        "endChar": 44
      },
      "revId": "93c79b7ec318302ae1bedb4fceb244d7602d0757",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}