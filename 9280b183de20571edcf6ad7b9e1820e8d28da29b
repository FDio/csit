{
  "comments": [
    {
      "key": {
        "uuid": "c6310e56_73d916eb",
        "filename": "resources/libraries/bash/function/common.sh",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-12-13T12:47:21Z",
      "side": 1,
      "message": "is it me or you are not in latest master which means any testing is ...\nbut anyway under virtualenv -p python3 you have both PIP and PIP3 sharing same binary (a.k.a symlinked), so no point of comparing.\nThe whole root cause is i think virtualenv that is causing the behavior, not the pip or apt itself.\n\nVirtualenv must take \"/usr/lib/python3/dist-packages\". It is easily reproducible:\n\n\n\n(csit_env3) ➜  csit git:(master) ✗ sudo apt-get install python3-ply                            \nThe following NEW packages will be installed:                                                  \n  python3-ply                                                                                  \n...\n\n(csit_env3) ➜  csit git:(master) ✗ ../vpp/src/tools/vppapigen/vppapigen.py                     \nTraceback (most recent call last):                                                             \n  File \"../vpp/src/tools/vppapigen/vppapigen.py\", line 3, in \u003cmodule\u003e                          \n    import ply.lex as lex                                                                      \nModuleNotFoundError: No module named \u0027ply\u0027                                                     \n\n(csit_env3) ➜  csit git:(master) ✗ ll /usr/lib/python3/dist-packages | grep ply                \ndrwxr-xr-x  3 root root 4.0K Dec 13 12:40 ply                                                  \ndrwxr-xr-x  2 root root 4.0K Dec 13 12:40 ply-3.11.egg-info                                                                                                                                \n\n...testing outside virtualenv:\n\ncsit git:(master) ✗ ../vpp/src/tools/vppapigen/vppapigen.py\n^CKeyboardInterrupt:\n\nThis means that adding  --system-site-packages should do the trick:\n\n➜  csit git:(master) ✗ virtualenv  --system-site-packages -p /usr/bin/python3 ../csit_env3; source ../csit_env3/bin/activate; export PYTHONPATH\u003d.\nAlready using interpreter /usr/bin/python3\nUsing base prefix \u0027/usr\u0027\nNew python executable in /home/pmikus/fd.io/csit_env3/bin/python3\nAlso creating executable in /home/pmikus/fd.io/csit_env3/bin/python\nInstalling setuptools, pkg_resources, pip, wheel...done.\n(csit_env3) ➜  csit git:(master) ✗ ../vpp/src/tools/vppapigen/vppapigen.py\n^CKeyboardInterrupt:\n(csit_env3) ➜  csit git:(master) ✗",
      "range": {
        "startLine": 129,
        "startChar": 4,
        "endLine": 129,
        "endChar": 8
      },
      "revId": "9280b183de20571edcf6ad7b9e1820e8d28da29b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "689e3f7e_dc465460",
        "filename": "resources/libraries/bash/function/common.sh",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-12-13T13:12:00Z",
      "side": 1,
      "message": "\u003e you are not in latest master\n\nYes, this patch\u0027s parent is just before the first Python3 change. Later patch will have parent at that first Python3 change, so I can compare console outputs.\n\n\u003e virtualenv that is causing the behavior\n\nCurrently I think the Python2 code was using virtualenv from system (15.1.0), not from pip (16.7.8). That is why I want to see output of the which command in line 119. The freezes are there only to confirm whether --system-site-packages has been applied (indirectly, by seeing the pre-installed ply), as that is NOT enabled by default in recent virtualenv versions. Although now I checked and 15.1.0 also should not enable --system-site-packages by default, so I am probably wrong. Another difference may be pip version, but I do not see how that would work.\n\n\u003e adding --system-site-packages should do the trick\n\nI agree, if that is what we want. In OpenDaylight we have seen failures caused by image upgrades removing dependencies we did not know we had, so currently I prefer having ply in CSIT requirements.",
      "parentUuid": "c6310e56_73d916eb",
      "range": {
        "startLine": 129,
        "startChar": 4,
        "endLine": 129,
        "endChar": 8
      },
      "revId": "9280b183de20571edcf6ad7b9e1820e8d28da29b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75e9b634_1401b83f",
        "filename": "resources/libraries/bash/function/common.sh",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-12-13T13:17:39Z",
      "side": 1,
      "message": "my preference would be to keep all in PIP and remove apt-get entirely (expect PIP, except virtualenv?) but this is harder way as removing them means VPP scripts should be ready to start using virtualenv and pip, which ....",
      "parentUuid": "689e3f7e_dc465460",
      "range": {
        "startLine": 129,
        "startChar": 4,
        "endLine": 129,
        "endChar": 8
      },
      "revId": "9280b183de20571edcf6ad7b9e1820e8d28da29b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "829a3bdb_6437364a",
        "filename": "resources/tools/scripts/perpatch_requirements.txt",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-12-13T12:47:21Z",
      "side": 1,
      "message": "this makes this file useless. Similarly per_patch script has a bug that runs vppapigen before this requirement.txt so even adding ply here was useless. \nGoing forward we need to migrate all our bootstrap to this function (including report/trending/tox/perpatch...) and to use our global pip list. The tax for installing global requirements.txt is lower then maintaining multiple requirements files in repo in multiple places.",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 17,
        "endChar": 10
      },
      "revId": "9280b183de20571edcf6ad7b9e1820e8d28da29b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f97c1a2_2facd5bb",
        "filename": "resources/tools/scripts/perpatch_requirements.txt",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-12-13T13:15:48Z",
      "side": 1,
      "message": "\u003e this makes this file useless\n\njumpavg is still needed with the current parent. I will uncomment ply in later patch to see the difference.\n\n\u003e use our global pip list\n\nI agree, assuming the global requirements are well documented (e.g. ply # just for make json-api-files).",
      "parentUuid": "829a3bdb_6437364a",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 17,
        "endChar": 10
      },
      "revId": "9280b183de20571edcf6ad7b9e1820e8d28da29b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b49253d4_7c39574a",
        "filename": "resources/tools/scripts/perpatch_requirements.txt",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-12-13T13:26:19Z",
      "side": 1,
      "message": "Which parent? older commits? report was rewritten, shall per patch use similar approach?",
      "parentUuid": "8f97c1a2_2facd5bb",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 17,
        "endChar": 10
      },
      "revId": "9280b183de20571edcf6ad7b9e1820e8d28da29b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    }
  ]
}