{
  "comments": [
    {
      "key": {
        "uuid": "494a48b6_472da9e2",
        "filename": "resources/libraries/python/VppConfigGenerator.py",
        "patchSetId": 23
      },
      "lineNbr": 564,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-02T08:46:54Z",
      "side": 1,
      "message": "Or filename if given.\n\nBut looking at lines 580-581, filename\u003dNone simply understood as filename\u003d\"None\". And lines 576-577 copy from self._vpp_startup_conf regardless of filename value.\n\nSo it is a mess, but can be fixed outside this Change.",
      "range": {
        "startLine": 564,
        "startChar": 16,
        "endLine": 564,
        "endChar": 37
      },
      "revId": "dbaaeba53b7dbeed1799dad8dc43013a5781ff17",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bff8542_212c22bb",
        "filename": "resources/libraries/python/VppConfigGenerator.py",
        "patchSetId": 23
      },
      "lineNbr": 564,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-05-02T11:38:46Z",
      "side": 1,
      "message": "so removing 571-572? and moving into 581?\nIt is defaulting. If none then default /etc/vpp/startup.conf is used. Which indeed can be written\n\ncmd \u003d (\u0027echo \"{config}\" | sudo tee {filename}\u0027.format(config\u003dself._vpp_config, filename\u003dfilename if filename else self._vpp_startup_conf))\n\nor much simpler\n\ndef write_config(self, filename\u003dself._vpp_startup_conf):\n\ncmd \u003d (\u0027echo \"{config}\" | sudo tee {filename}\u0027.format(config\u003dself._vpp_config, filename\u003dfilename))",
      "parentUuid": "494a48b6_472da9e2",
      "range": {
        "startLine": 564,
        "startChar": 16,
        "endLine": 564,
        "endChar": 37
      },
      "revId": "dbaaeba53b7dbeed1799dad8dc43013a5781ff17",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1a79f1f_6d35baf5",
        "filename": "resources/libraries/python/VppConfigGenerator.py",
        "patchSetId": 23
      },
      "lineNbr": 564,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-02T12:03:33Z",
      "side": 1,
      "message": "Oh, for some reason I did not see 571-572. So None value works fine.\n\nThe question is whether filename (if not None) should overwrite self._vpp_startup_conf or not. I think it should.\n\nThat way the backup (and restore) will target the correct file.\n\nSo I would change lines 571-572 to:\n  if filename is not None:\n      self._vpp_startup_conf \u003d str(filename)\n\nand then only use self._vpp_startup_conf in the rest of the code.",
      "parentUuid": "5bff8542_212c22bb",
      "range": {
        "startLine": 564,
        "startChar": 16,
        "endLine": 564,
        "endChar": 37
      },
      "revId": "dbaaeba53b7dbeed1799dad8dc43013a5781ff17",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c415932d_84edced8",
        "filename": "resources/libraries/python/VppConfigGenerator.py",
        "patchSetId": 23
      },
      "lineNbr": 564,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-05-02T12:17:59Z",
      "side": 1,
      "message": "The problem is that from some reason (bug!) RF keeps instances on suite level. So unfortunately statefull classes are problem. This results into state where this object will not be reinitialized per test.\n\ni vote for this:\ndef write_config(self, filename\u003dself._vpp_startup_conf):",
      "parentUuid": "e1a79f1f_6d35baf5",
      "range": {
        "startLine": 564,
        "startChar": 16,
        "endLine": 564,
        "endChar": 37
      },
      "revId": "dbaaeba53b7dbeed1799dad8dc43013a5781ff17",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75b39dc1_7d268277",
        "filename": "resources/libraries/python/VppConfigGenerator.py",
        "patchSetId": 23
      },
      "lineNbr": 564,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-02T12:32:32Z",
      "side": 1,
      "message": "\u003e RF keeps instances on suite level\n\nIt should be configurable [1].\n\n\u003e def write_config(self, filename\u003dself._vpp_startup_conf):\n\nDoes not [2] work.\n\n[1] http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-library-scope\n[2] https://stackoverflow.com/questions/1802971/nameerror-name-self-is-not-defined",
      "parentUuid": "c415932d_84edced8",
      "range": {
        "startLine": 564,
        "startChar": 16,
        "endLine": 564,
        "endChar": 37
      },
      "revId": "dbaaeba53b7dbeed1799dad8dc43013a5781ff17",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7ca2255_89ad4a93",
        "filename": "resources/libraries/python/VppConfigGenerator.py",
        "patchSetId": 23
      },
      "lineNbr": 564,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-05-02T13:32:00Z",
      "side": 1,
      "message": "Unfortunately it is configurable but it is not working. I already tested with QemuManager or QemuUtils. That is why i have to name the object instance as test-name so it is unique across suite. Bug in RF",
      "parentUuid": "75b39dc1_7d268277",
      "range": {
        "startLine": 564,
        "startChar": 16,
        "endLine": 564,
        "endChar": 37
      },
      "revId": "dbaaeba53b7dbeed1799dad8dc43013a5781ff17",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bad21a56_49880c42",
        "filename": "resources/libraries/python/VppConfigGenerator.py",
        "patchSetId": 23
      },
      "lineNbr": 564,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-02T13:48:21Z",
      "side": 1,
      "message": "\u003e\u003e   if filename is not None:\n\u003e\u003e     self._vpp_startup_conf \u003d str(filename)\n\u003e\u003e and then only use self._vpp_startup_conf in the rest of the code.\n\n\u003e Bug in RF\n\nSo would it be better to have filename\u003d\u0027/etc/vpp/startup.conf\u0027 in line 560? And still put the filename value to self._vpp_startup_conf around line 570?",
      "parentUuid": "f7ca2255_89ad4a93",
      "range": {
        "startLine": 564,
        "startChar": 16,
        "endLine": 564,
        "endChar": 37
      },
      "revId": "dbaaeba53b7dbeed1799dad8dc43013a5781ff17",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82312eaa_523aaef7",
        "filename": "tests/vpp/perf/__init__.robot",
        "patchSetId": 23
      },
      "lineNbr": 25,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-02T08:46:54Z",
      "side": 1,
      "message": "I think we need to restart first.",
      "range": {
        "startLine": 25,
        "startChar": 14,
        "endLine": 25,
        "endChar": 20
      },
      "revId": "dbaaeba53b7dbeed1799dad8dc43013a5781ff17",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6bcd0149_2a1394ba",
        "filename": "tests/vpp/perf/__init__.robot",
        "patchSetId": 23
      },
      "lineNbr": 25,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-05-02T11:38:46Z",
      "side": 1,
      "message": "The thing is following:\n- In Ubuntu nothing needs to be restarted as systemd will autostart the service. Having restart is waste of time.\n\n- In vpp_device it is running in container where there is no systemd so we need to do restart (code will do the needful) as there is no automation. (Permament fix will be https://gerrit.fd.io/r/#/c/17650/ but untill this will be finished, ...)\n\n- In VIRL Ubuntu we do not need to restart same as perf.\n\n- In VIRL Centos it seems autostart is not working. So for now FUNC tests have restart after install.\n\nOne of the solution is to move restart_after_install logic to function install_vpp() and remove it from __init__.robot entirely. To make it more unified?\n\nThoughts?",
      "parentUuid": "82312eaa_523aaef7",
      "range": {
        "startLine": 25,
        "startChar": 14,
        "endLine": 25,
        "endChar": 20
      },
      "revId": "dbaaeba53b7dbeed1799dad8dc43013a5781ff17",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2fd02def_316e3fef",
        "filename": "tests/vpp/perf/__init__.robot",
        "patchSetId": 23
      },
      "lineNbr": 25,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-02T12:03:33Z",
      "side": 1,
      "message": "Put these points into code comments before Verify line in each __init__.robot file. That way people will understand why we sometimes can, but sometimes cannot skip the restart.\n\n\u003e move restart_after_install logic to function install_vpp()\n\nThat depends on how would the code look like.\nIf readable, move.\nIf heavy detection logic, comments in __init__.robot are better.",
      "parentUuid": "6bcd0149_2a1394ba",
      "range": {
        "startLine": 25,
        "startChar": 14,
        "endLine": 25,
        "endChar": 20
      },
      "revId": "dbaaeba53b7dbeed1799dad8dc43013a5781ff17",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "392aaddb_a68b92d7",
        "filename": "tests/vpp/perf/__init__.robot",
        "patchSetId": 23
      },
      "lineNbr": 25,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-05-02T12:17:59Z",
      "side": 1,
      "message": "Is it heavy?\n\ndiff --git a/resources/libraries/python/DUTSetup.py b/resources/libraries/python/DUTSetup.py\nindex 67edefb9..b4b3baed 100644\n--- a/resources/libraries/python/DUTSetup.py\n+++ b/resources/libraries/python/DUTSetup.py\n@@ -634,6 +634,8 @@ class DUTSetup(object):\n                                       format(dir\u003dvpp_pkg_dir), timeout\u003d120,\n                                       sudo\u003dTrue, message\u003dmessage)\n                     exec_cmd_no_error(node, \u0027dpkg -l | grep vpp\u0027, sudo\u003dTrue)\n+                    if running_in_container(node):\n+                        DUTSetup.start_service(node, Constants.VPP_UNIT)\n                 else:\n                     exec_cmd_no_error(node, \u0027yum -y remove \"*vpp*\" || true\u0027,\n                                       timeout\u003d120, sudo\u003dTrue)\n@@ -641,6 +643,7 @@ class DUTSetup(object):\n                                       format(dir\u003dvpp_pkg_dir), timeout\u003d120,\n                                       sudo\u003dTrue, message\u003dmessage)\n                     exec_cmd_no_error(node, \u0027rpm -qai *vpp*\u0027, sudo\u003dTrue)\n+                    DUTSetup.start_service(node, Constants.VPP_UNIT)\n\n     @staticmethod\n     def running_in_container(node):",
      "parentUuid": "2fd02def_316e3fef",
      "range": {
        "startLine": 25,
        "startChar": 14,
        "endLine": 25,
        "endChar": 20
      },
      "revId": "dbaaeba53b7dbeed1799dad8dc43013a5781ff17",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72b96cdd_385170be",
        "filename": "tests/vpp/perf/__init__.robot",
        "patchSetId": 23
      },
      "lineNbr": 25,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-02T12:36:14Z",
      "side": 1,
      "message": "Nice and light. Just do not forget to update docstrings.\n\nAlso, DUTSetup.start_service should be renamed to DUTSetup.restart_service.",
      "parentUuid": "392aaddb_a68b92d7",
      "range": {
        "startLine": 25,
        "startChar": 14,
        "endLine": 25,
        "endChar": 20
      },
      "revId": "dbaaeba53b7dbeed1799dad8dc43013a5781ff17",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}