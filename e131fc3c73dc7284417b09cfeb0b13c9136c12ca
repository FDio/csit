{
  "comments": [
    {
      "key": {
        "uuid": "5fbe4450_e64cd6fd",
        "filename": "resources/libraries/bash/function/common.sh",
        "patchSetId": 19
      },
      "lineNbr": 210,
      "author": {
        "id": 10
      },
      "writtenOn": "2019-05-09T22:53:32Z",
      "side": 1,
      "message": "What is the purpose of sorting the json objects?\n\nLeaving them in the same order as the original \u003cfeature\u003e.api file is much more human friendly when referring back to the source.\n\nIMHO, changing the order makes the diff output harder to understand for the author of the API.",
      "range": {
        "startLine": 210,
        "startChar": 0,
        "endLine": 210,
        "endChar": 70
      },
      "revId": "e131fc3c73dc7284417b09cfeb0b13c9136c12ca",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70a66b42_1cb6aa65",
        "filename": "resources/libraries/bash/function/common.sh",
        "patchSetId": 19
      },
      "lineNbr": 210,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-10T11:24:30Z",
      "side": 1,
      "message": "\u003e What is the purpose of sorting the json objects?\n\nWhen .api.json files are generated, they are produced from Python dicts, which do not remember order of keys, resulting in (deterministic but) unpredictable ordering.\nThat means adding one more call usually also changes order of existing calls, so the diff-like output will have many lines with no real change.\n\nAlso, PAPI does not care about order of arguments, but binary API does care about the order. That means when json file contents are sorted on CSIT side, API changes which only change order of fields are almost invisible (probably with the exception of crc, if yes the CSIT logic could filter out crc when comparing).",
      "parentUuid": "5fbe4450_e64cd6fd",
      "range": {
        "startLine": 210,
        "startChar": 0,
        "endLine": 210,
        "endChar": 70
      },
      "revId": "e131fc3c73dc7284417b09cfeb0b13c9136c12ca",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0df60ce4_f453fa7e",
        "filename": "resources/libraries/bash/function/common.sh",
        "patchSetId": 19
      },
      "lineNbr": 210,
      "author": {
        "id": 10
      },
      "writtenOn": "2019-05-10T18:19:51Z",
      "side": 1,
      "message": "Reading the Python3 docs, the list(d) function returns keys in insertion order which should produce the results in the same order as the source \u003cfeature\u003e.api file.\n\nvppapigen.py is now using Python3 and inspection of the original \u003cfeature\u003e.api.json files confirms that the results are as expected -- in the same order as the source file.\n\nThus while I agree that Python2.7 may have required this, I don\u0027t see any value in normalizing the current JSON files.",
      "parentUuid": "70a66b42_1cb6aa65",
      "range": {
        "startLine": 210,
        "startChar": 0,
        "endLine": 210,
        "endChar": 70
      },
      "revId": "e131fc3c73dc7284417b09cfeb0b13c9136c12ca",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aa1366a_8009a5c7",
        "filename": "resources/libraries/bash/function/common.sh",
        "patchSetId": 19
      },
      "lineNbr": 210,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-14T10:37:21Z",
      "side": 1,
      "message": "\u003e the same order as the source file\n\nAre you talking about the order of fields within a message, or the order of messages defined in .api file (or both)?\n\nI needed to apply sorting to avoid seeing block movement. I can probably replicate that if needed.\n\nLooking at vppapigen, I believe this [0] line (dict instead of OrderedDict, being iterated over at line 676) has caused the behavior.\n\n\u003e I don\u0027t see any value in normalizing the current JSON files.\n\nThe source .api files are changed when the order of definitions, or order of fields within a definition changes. But PAPI behavior does not change, so sorting makes sure the generated diff stays empty.\nSome clients are sensitive to the ordering of fields within a definition, so this sorting cannot be done entirely on vppapigen side.\n\n[0] https://github.com/vpp-dev/vpp/blob/f4647ed885c47a72d94dd63e0903b6c1ae649813/src/tools/vppapigen/vppapigen.py#L650",
      "parentUuid": "0df60ce4_f453fa7e",
      "range": {
        "startLine": 210,
        "startChar": 0,
        "endLine": 210,
        "endChar": 70
      },
      "revId": "e131fc3c73dc7284417b09cfeb0b13c9136c12ca",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3c430e7_d06f95be",
        "filename": "resources/libraries/bash/function/common.sh",
        "patchSetId": 19
      },
      "lineNbr": 210,
      "author": {
        "id": 10
      },
      "writtenOn": "2019-05-16T12:42:09Z",
      "side": 1,
      "message": "Primarily talking about the order of the fields within a message.  And I agree that this cannot be done on the vppapigen side due to other VPP API language bindings.",
      "parentUuid": "3aa1366a_8009a5c7",
      "range": {
        "startLine": 210,
        "startChar": 0,
        "endLine": 210,
        "endChar": 70
      },
      "revId": "e131fc3c73dc7284417b09cfeb0b13c9136c12ca",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}