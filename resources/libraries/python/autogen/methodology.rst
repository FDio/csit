
..
    TODO: Turn into a real document and place in docs
    along other methodology pages.

Autogen
~~~~~~~

CSIT uses robot suite files to define tests.
but not all suite files available for Jenkins jobs
(or manually started bootstrap scripts) are present in CSIT git repository.

There is a code generation layer (called autogen), which creates
more suites.

Sources
~~~~~~~

The generated suites (and their contents) are affected by multiple information
sources, listed below.

Git Suites
----------

The suites present in git repository act as a template for additional suites.
One of autogen design principles is that the template should also act
as a full suite (no placeholdes).

In practice, autogen always re-creates the template suite with exactly
the same content, (it is one of checks that autogen works correctly).

Regenerate Script
-----------------

Not all suites present in CSIT git repository act as template for autogen.
The distinction is on per-directory level. Directories with
regenerate_testcases.py script usually consider all suites as templates
(unless possibly excluded by the glob patten in the script).

The script also specifies minimal frame size, indirectly by specifying protocol
(protocol "ip4" is the default, leading to 64B frame size).

Constants
---------

Values in Constants.py are taken into consideration when generating suites.
The values are mostly related to different NIC models and NIC drivers.

Python Code
-----------

Python code in resources/libraries/python/autogen contains several other
information sources.

Testcase Templates
__________________

The test case part of template suite is ignored, test case lines
are created according to text templates in Testcase.py file.

Testcase Argument Lists
_______________________

Each testcase template has different number of "arguments", e.g. values
to put into various placeholders. Different test types need sifferent
lists of the argument values, the lists are in regenerate_glob method
in Regenerator.py file.

Iteration Over Values
_____________________

Python code detects the test type (usually by substrings of suite file name),
then iterates over different quantities based on type.
For example, only ndrpdr suite templates generate other types (mrr and soak).

Hardcoded Exclusions
____________________

Some combinations of values are known not to work, so they are excluded.
Examples: Density tests for too much CPUs; IMIX for ASTF.

Non-Sources
~~~~~~~~~~~

Some information sources are available in CSIT repository,
but do not affect the suites generated by autogen.

Testbeds
--------

Overall, no information visible in topology yaml files is taken into account
by autogen.

Testbed Architecture
____________________

Historically, suite files are agnostic to testbed architecture (e.g. ICX or ALT).

Testbed Size
____________

Historically, 2node and 3node suites have diferent names
and not enough common code. Autogen treat them as different templates.

TRex suites are treated differently, but that is just because
they need different testcase arguments (no CPU count).
Autogen does nothing specifically related to the fact they should run
only in 1node setup.

Other Topology Info
___________________

Some bonding tests need two (parallel) links between DUTs.
Autogen does not care, as suites are agnostic.

Job specs
---------

Information in job spec files depend on generated suites, (not the other way).
Autogen should generate more suites, as job spec is limited by time budget.
More suites should be available for manually triggered verify jobs,
so autogen covers that.

Bootstrap Scripts
-----------------

Historically, bootstrap scripts perform some logic,
perhaps adding exclusion options to Robot invocation.
Once again, the logic here relies on what autogen generates,
autogen does not look into bootstrap scripts.
