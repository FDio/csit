---
logging:
  version: 1
  formatters:
    console:
      format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    prom:
      format: '%(message)s'
    json:
      format: '%(message)s'
  handlers:
    console:
      class: logging.StreamHandler
      level: INFO
      formatter: console
      stream: ext://sys.stdout
    prom:
      class: logging.handlers.RotatingFileHandler
      level: INFO
      formatter: prom
      filename: /tmp/metric.prom
      mode: w
    json:
      class: logging.handlers.RotatingFileHandler
      level: INFO
      formatter: json
      filename: /tmp/metric.json
      mode: w
  loggers:
    prom:
      handlers: [prom]
      level: INFO
      propagate: False
    json:
      handlers: [json]
      level: INFO
      propagate: False
  root:
    level: INFO
    handlers: [console]
scheduler:
  duration: 1
programs:
  - name: bundle_bpf
    metrics:
      counter:
        - name: cpu_cycles
          help: Cycles processed by CPUs
          labels:
            - cpu
        - name: cpu_instructions
          help: Instructions retired by CPUs
          labels:
            - cpu
        - name: llc_references
          help: Last level cache operations by type
          labels:
            - cpu
        - name: llc_misses
          help: Last level cache operations by type
          labels:
            - cpu
    events:
      - type: 0x0 # HARDWARE
        name: 0x0 # PERF_COUNT_HW_CPU_CYCLES
        target: on_cpu_cycle
      - type: 0x0 # HARDWARE
        name: 0x1 # PERF_COUNT_HW_INSTRUCTIONS
        target: on_cpu_instruction
      - type: 0x0 # HARDWARE
        name: 0x2 # PERF_COUNT_HW_CACHE_REFERENCES
        target: on_cache_reference
      - type: 0x0 # HARDWARE
        name: 0x3 # PERF_COUNT_HW_CACHE_MISSES
        target: on_cache_miss
    code: |
      #include <linux/ptrace.h>
      #include <uapi/linux/bpf_perf_event.h>

      const int max_cpus = 256;

      BPF_ARRAY(misses, u64, max_cpus);
      BPF_ARRAY(references, u64, max_cpus);
      BPF_ARRAY(instructions, u64, max_cpus);
      BPF_ARRAY(cycles, u64, max_cpus);

      int on_cpu_cycle(struct bpf_perf_event_data *ctx) {
          cycles.increment(bpf_get_smp_processor_id(), ctx->sample_period);
          return 0;
      }
      int on_cpu_instruction(struct bpf_perf_event_data *ctx) {
          instructions.increment(bpf_get_smp_processor_id(), ctx->sample_period);
          return 0;
      }
      int on_cache_reference(struct bpf_perf_event_data *ctx) {
          references.increment(bpf_get_smp_processor_id(), ctx->sample_period);
          return 0;
      }
      int on_cache_miss(struct bpf_perf_event_data *ctx) {
          misses.increment(bpf_get_smp_processor_id(), ctx->sample_period);
          return 0;
      }
