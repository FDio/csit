input {
  file {
    path => ['/var/log/nova/nova-api-metadata.log']
    tags => ['nova', 'oslofmt', 'novametaapi']
    type => "nova"
  }

  file {
    path => ['/var/log/neutron/neutron-dhcp-agent.log']
    tags => ['neutron', 'oslofmt']
    type => "neutron"
  }
  file {
    path => ['/var/log/glance/api.log']
    tags => ['glance', 'oslofmt', 'glanceapi']
    type => "glance"
  }
  file {
    path => ['/var/log/glance/registry.log']
    tags => ['glance', 'oslofmt']
    type => "glance"
  }
  file {
    path => ['/var/log/glance/scrubber.log']
    tags => ['glance', 'oslofmt']
    type => "glance"
  }
  file {
    path => ['/var/log/nova/nova-api.log']
    tags => ['nova', 'oslofmt', 'novaapi']
    type => "nova"
  }
  file {
    path => ['/var/log/nova/nova-conductor.log']
    tags => ['nova', 'oslofmt']
    type => "nova"
  }
  file {
    path => ['/var/log/nova/nova-manage.log']
    tags => ['nova', 'oslofmt']
    type => "nova"
  }
  file {
    path => ['/var/log/nova/nova-scheduler.log']
    tags => ['nova', 'oslofmt']
    type => "nova"
  }
  file {
    path => ['/var/log/nova/nova-spicehtml5proxy.log']
    tags => ['nova', 'oslofmt']
    type => "nova"
  }
  file {
    path => ['/var/log/keystone/keystone-all.log']
    tags => ['keystone', 'oslofmt', 'keystoneapi']
    type => "keystone"
  }
  file {
    path => ['/var/log/keystone/keystone-manage.log']
    tags => ['keystone', 'oslofmt']
    type => "keystone"
  }
  file {
    path => ['/var/log/ceilometer/ceilometer-agent-central.log']
    tags => ['ceilometer', 'oslofmt']
    type => "ceilometer"
  }
  file {
    path => ['/var/log/ceilometer/ceilometer-alarm-notifier.log']
    tags => ['ceilometer', 'oslofmt']
    type => "ceilometer"
  }
  file {
    path => ['/var/log/ceilometer/ceilometer-api.log']
    tags => ['ceilometer', 'oslofmt', 'ceilometerapi']
    type => "ceilometer"
  }
  file {
    path => ['/var/log/ceilometer/ceilometer-alarm-evaluator.log']
    tags => ['ceilometer', 'oslofmt']
    type => "ceilometer"
  }
  file {
    path => ['/var/log/ceilometer/ceilometer-collector.log']
    tags => ['ceilometer', 'oslofmt']
    type => "ceilometer"
  }
  file {
    path => ['/var/log/heat/heat.log']
    tags => ['heat', 'oslofmt', 'heatapi']
    type => "heat"
  }
  file {
    path => ['/var/log/neutron/neutron-server.log']
    tags => ['neutron', 'oslofmt', 'neutronapi' ]
    type => "neutron"
  }
# Not collecting RabbitMQ logs for the moment
#  file {
#    path => ['/var/log/rabbitmq/rabbit@<%= @hostname %>.log']
#    tags => ['rabbitmq', 'oslofmt']
#    type => "rabbitmq"
#  }
  file {
    path => ['/var/log/httpd/access_log']
    tags => ['horizon']
    type => "horizon"
  }
  file {
    path => ['/var/log/httpd/error_log']
    tags => ['horizon']
    type => "horizon"
  }
  file {
    path => ['/var/log/httpd/horizon_access_log']
    tags => ['horizon']
    type => "horizon"
  }
  file {
    path => ['/var/log/httpd/horizon_error_log']
    tags => ['horizon']
    type => "horizon"
  }
  file {
    path => ['/var/log/nova/nova-compute.log']
    tags => ['nova', 'oslofmt']
    type => "nova"
  }
  file {
    path => ['/var/log/libvirt/libvirtd.log']
    tags => ['libvirt']
    type => "libvirt"
  }
  file {
    path => ['/var/log/ceilometer/ceilometer-agent-compute.log']
    tags => ['ceilometer', 'oslofmt']
    type => "ceilometer"
  }
  file {
    path => ['/var/log/neutron/neutron-dhcp-agent.log']
    tags => ['neutron', 'oslofmt']
    type => "neutron"
  }

  file {
    path => ['/var/log/neutron/neutron-openvswitch-agent.log']
    tags => ['neutron', 'oslofmt']
    type => "neutron"
  }

  file {
    path => ['/var/log/openvswitch/ovs-ctl.log']
    tags => ['openvswitch']
    type => "openvswitch"
  }

  file {
    path => ['/var/log/openvswitch/ovsdb-server.log']
    tags => ['openvswitch']
    type => "openvswitch"
  }

  file {
    path => ['/var/log/openvswitch/ovs-vswitchd.log']
    tags => ['openvswitch']
    type => "openvswitch"
  }

  file {
    path => ['/var/log/audit/audit.log']
    tags => ['audit']
    type => "audit"
  }

  file {
    path => ['/var/log/dmesg']
    tags => ['dmesg', 'kernel']
    type => "dmesg"
  }

  file {
    path => ['/var/log/messages']
    tags => ['syslog']
    type => "syslog"
  }

  file {
    path => ['/var/log/secure']
    tags => ['secure']
    type => "secure"
  }

  file {
    path => ['/var/log/yum.log']
    tags => ['yum']
    type => "yum"
  }
}

filter {
  if "keystoneapi" in [tags] {
    mutate {
      gsub => ['logmessage',"\"",""]
    }
    grok {
      match => { "logmessage" => "\[\-\] %{NOTSPACE:requesterip} \- \- \[%{NOTSPACE:req_date} %{NOTSPACE:req_time}\] %{NOTSPACE:method} %{NOTSPACE:url_path} %{NOTSPACE:http_ver} %{NUMBER:response} %{NUMBER:bytes} %{NUMBER:seconds}" }
      add_field => ["api", "keystone"]
      add_tag => ["apimetrics"]
    }
  } else if "novaapi" in [tags] {
    if [module] == "nova.osapi_compute.wsgi.server" {
      mutate {
        gsub => ['logmessage',"\"",""]
      }
      grok {
        match => { "logmessage" => "\[req\-%{NOTSPACE:requestid} %{NOTSPACE:user_id} %{NOTSPACE:tenant}\] %{NOTSPACE:requesterip} %{NOTSPACE:method} %{NOTSPACE:url_path} %{NOTSPACE:http_ver} status\: %{NUMBER:response} len\: %{NUMBER:bytes} time\: %{NUMBER:seconds}" }
        add_field => ["api", "nova"]
        add_tag => ["apimetrics"]
      }
    }
  } else if "neutronapi" in [tags] {
    if [module] == "neutron.wsgi" {
      if "accepted" not in [logmessage] {
        mutate {
          gsub => ['logmessage',"\"",""]
        }
        grok {
          match => { "logmessage" => "\[req\-%{NOTSPACE:requestid} None\] %{NOTSPACE:requesterip} \- \- \[%{NOTSPACE:req_date} %{NOTSPACE:req_time}\] %{NOTSPACE:method} %{NOTSPACE:url_path} %{NOTSPACE:http_ver} %{NUMBER:response} %{NUMBER:bytes} %{NUMBER:seconds}" }
          add_field => ["api", "neutron"]
          add_tag => ["apimetrics"]
        }
      }
    }
  } else if "glanceapi" in [tags] {
    if [module] == "glance.wsgi.server" {
      mutate {
        gsub => ['logmessage',"\"",""]
      }
      grok {
        match => { "logmessage" => "\[%{NOTSPACE:requestid} %{NOTSPACE:user_id} %{NOTSPACE:tenant} \- \- \-\] %{NOTSPACE:requesterip} \- \- \[%{NOTSPACE:req_date} %{NOTSPACE:req_time}\] %{NOTSPACE:method} %{NOTSPACE:url_path} %{NOTSPACE:http_ver} %{NUMBER:response} %{NUMBER:bytes} %{NUMBER:seconds}" }
        add_field => ["api", "glance"]
        add_tag => ["apimetrics"]
      }
    }
  } else if "novametaapi" in [tags] {
    mutate {
      gsub => ['logmessage',"\"",""]
    }
    if [module] == "nova.api.ec2" {
      grok {
        match => { "logmessage" => "\[%{GREEDYDATA:requestid}\] %{NUMBER:seconds}s %{NOTSPACE:requesterip} %{NOTSPACE:method} %{NOTSPACE:url_path} None\:None %{NUMBER:response} %{GREEDYDATA:user_agent}" }
        add_field => ["api", "metadata-ec2"]
        add_tag => ["apimetrics"]
      }
    } else if [module] == "nova.metadata.wsgi.server" {
      grok {
        match => { "logmessage" => "\[%{GREEDYDATA:requestid}\] %{NOTSPACE:requesterip} %{NOTSPACE:method} %{NOTSPACE:url_path} %{NOTSPACE:http_ver} status\: %{NUMBER:response} len\: %{NUMBER:bytes} time\: %{NUMBER:seconds}" }
        add_field => ["api", "metadata"]
        add_tag => ["apimetrics"]
      }
    }
  } else if "libvirt" in [tags] {
    grok {
      match => { "message" => "(?m)^%{TIMESTAMP_ISO8601:logdate}:%{SPACE}%{NUMBER:code}:?%{SPACE}\[?\b%{NOTSPACE:loglevel}\b\]?%{SPACE}?:?%{SPACE}\[?\b%{NOTSPACE:module}\b\]?%{SPACE}?%{GREEDYDATA:logmessage}?" }
      add_field => { "received_at" => "%{@timestamp}"}
    }
    mutate {
      uppercase => [ "loglevel" ]
    }
  } else if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:logmessage}" }
      add_field => [ "received_at", "%{@timestamp}" ]
    }
    syslog_pri {
      severity_labels => ["ERROR", "ERROR", "ERROR", "ERROR", "WARNING", "INFO", "INFO", "DEBUG" ]
    }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
    if !("_grokparsefailure" in [tags]) {
      mutate {
        replace => [ "@source_host", "%{syslog_hostname}" ]
      }
    }
    mutate {
      remove_field => [ "syslog_hostname", "syslog_timestamp" ]
      add_field => [ "loglevel", "%{syslog_severity}" ]
      add_field => [ "module", "%{syslog_program}" ]
    }
  }
}

output {
  elasticsearch { hosts => ["{{ elasticsearch_ip }}:9200"] }
    stdout { codec => rubydebug }
}
