# Copyright (c) 2018 Cisco and/or its affiliates.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import math
import logging
import sys

from resources.libraries.python.MLRsearch.ReceiveRateMeasurement import ReceiveRateMeasurement
from SoakMeasurer import SoakMeasurer as measurer
from PLRsearch import PLRsearch as search
from stat_trackers import VectorStatTracker

logging.basicConfig(level=getattr(logging, "DEBUG"))

tuple_list = [
    (7445476.0, 75943783, 0, 5.1000000000000005, 4097),
    (14880952.0, 154761754, 57633776, 5.2, 6014),
    (9339229.58777, 98995742, 124642, 5.300000000000001, 7465),
    (9327463.1969, 100736512, 1672669, 5.4, 7928),
    (4000000.0, 43999963, 0, 5.5, 8551),
    (7307763.4967, 81846880, 0, 5.6000000000000005, 8948),
    (4000000.0, 45599962, 0, 5.7, 7854),
    (7398135.42316, 85818298, 0, 5.800000000000001, 9055),
    (4000000.0, 47199962, 0, 5.9, 8952),
    (7461513.54387, 89538088, 0, 6.0, 7567),
    (4000000.0, 48799962, 0, 6.1000000000000005, 9510),
    (7596437.63056, 94195750, 0, 6.2, 8378),
    (4000000.0, 50399963, 0, 6.300000000000001, 9118),
    (7875694.0484, 100808810, 0, 6.4, 8368),
    (4000000.0, 51999963, 0, 6.5, 9571),
    (9302970.15124, 122799118, 993720, 6.6000000000000005, 9978),
    (4000000.0, 53599963, 0, 6.7, 8736),
    (7342704.30307, 99860706, 0, 6.800000000000001, 9788),
    (4000000.0, 55199963, 0, 6.9, 8687),
    (7350999.47104, 102913922, 0, 7.0, 10021),
    (4000000.0, 56799963, 0, 7.1000000000000005, 9976),
    (7360988.74313, 105998165, 0, 7.2, 10108),
    (4000000.0, 58399963, 0, 7.300000000000001, 10157),
    (7384460.65833, 109289941, 0, 7.4, 10091),
    (4000000.0, 59999961, 0, 7.5, 9874),
    (7438010.5568, 113057691, 0, 7.6000000000000005, 9946),
    (4000000.0, 61599961, 0, 7.7, 9609),
    (7563463.61911, 117989965, 0, 7.800000000000001, 9227),
    (4000000.0, 63199960, 0, 7.9, 9431),
    (7853977.36255, 125663555, 0, 8.0, 8635),
    (4000000.0, 64799960, 0, 8.1, 10706),
    (11897715.4152, 195122402, 44138007, 8.200000000000001, 8765),
    (4000000.0, 66399960, 0, 8.3, 10819),
    (8203460.93564, 137818055, 0, 8.4, 11028),
    (4000000.0, 67999960, 0, 8.5, 11217),
    (8192491.58741, 140910783, 0, 8.6, 11093),
    (4000000.0, 69599959, 0, 8.700000000000001, 10727),
    (8197705.93825, 144279551, 0, 8.8, 10474),
    (4000000.0, 71199959, 0, 8.9, 9418),
    (8209856.38733, 147777331, 0, 9.0, 11340),
    (4000000.0, 72799959, 0, 9.1, 11142),
    (8241689.30469, 151646997, 0, 9.200000000000001, 11211),
    (4000000.0, 74399959, 0, 9.3, 10327),
    (8320682.43394, 156428765, 0, 9.4, 9546),
    (4000000.0, 75999958, 0, 9.5, 11101),
    (8513331.71063, 163455877, 0, 9.600000000000001, 9530),
    (4000000.0, 77599958, 0, 9.700000000000001, 11188),
    (14483374.6051, 283873967, 102579014, 9.8, 10668),
    (4000000.0, 79199958, 0, 9.9, 10694),
    (8277989.30718, 165559715, 0, 10.0, 11891),
    (4000000.0, 80799958, 0, 10.100000000000001, 11816),
    (8276435.70033, 168839201, 0, 10.200000000000001, 11230),
    (4000000.0, 82399958, 0, 10.3, 11791),
    (8281197.24434, 172248840, 0, 10.4, 12267),
    (4000000.0, 83999958, 0, 10.5, 10173),
    (8292433.80555, 175799512, 0, 10.600000000000001, 12405),
    (4000000.0, 85599958, 0, 10.700000000000001, 10214),
    (8322156.96677, 179758529, 0, 10.8, 12287),
    (4000000.0, 87199958, 0, 10.9, 12329),
    (8396979.1086, 184733466, 0, 11.0, 11301),
    (4000000.0, 88799958, 0, 11.100000000000001, 9810),
    (8587173.92059, 192352593, 0, 11.200000000000001, 10725),
    (4000000.0, 90399958, 0, 11.3, 11628),
    (14540853.4847, 331531295, 121462997, 11.4, 10631),
    (4000000.0, 91999958, 0, 11.5, 10071),
    (8381056.35041, 194440407, 0, 11.600000000000001, 11365),
    (4000000.0, 93599958, 0, 11.700000000000001, 12601),
    (8403663.128, 198326356, 0, 11.8, 12162),
    (4000000.0, 95199958, 0, 11.9, 12572),
    (8422568.74064, 202141570, 0, 12.0, 12307),
    (4000000.0, 96799958, 0, 12.100000000000001, 12103),
    (8465596.90607, 206560481, 0, 12.200000000000001, 12356),
]

print "soak compute, record measurer, non-printing"

p = measurer(7000000, 1000, 1, fast=False)
s = search(p, 0.2, 1e-7, 50, 36000, trace_enabled=True)

trial_result_list = list()
list_integrator_data = (
    ([0.0, 0.0], [0.0, 0.0], [[1.0, 0.0], [0.0, 1.0]], [[1.0, 0.0], [0.0, 1.0]]),
    ([0.0, 0.0], [-0.01425912328672453, 0.004743736408224265], [[1.0, 0.0], [0.0, 1.0]], [[3.294252996489952, 0.04366929684188717], [0.04366929684188717, 3.3716348588596663]]),
    ([0.0, 0.0], [-0.5248042443319995, -0.11531977810815439], [[1.0, 0.0], [0.0, 1.0]], [[0.8166483142606422, -0.13936207604466258], [-0.13936207604466258, 2.6138827967419838]]),
    ([0.0, 0.0], [-0.13174157849361678, -0.16245231866734705], [[1.0, 0.0], [0.0, 1.0]], [[6.44107096526866e-09, -7.945325634753827e-07], [-7.945325634753827e-07, 2.2807385261091975]]),
    ([0.0, 0.0], [-0.13174029350472116, 0.41857085725184817], [[1.0, 0.0], [0.0, 1.0]], [[6.313269955384359e-09, -2.504534435917077e-07], [-2.504534435917077e-07, 1.0167690299388888e-05]]),
    ([0.0, 0.0], [-0.13025411186714206, -0.3855177302702337], [[1.0, 0.0], [0.0, 1.0]], [[3.531532536379895e-11, -4.6980859348694985e-07], [-4.6980859348694985e-07, 0.0066890034964233805]]),
    ([0.0, 0.0], [-0.13945972878112067, 0.5320834167413316], [[1.0, 0.0], [0.0, 1.0]], [[1.947792355803144e-09, -1.5714343149794605e-08], [-1.5714343149794605e-08, 1.450066135945041e-07]]),
    ([0.0, 0.0], [-0.1394596240814114, 0.5320827817771304], [[1.0, 0.0], [0.0, 1.0]], [[1.9444614156217883e-09, -1.5725614670450004e-08], [-1.5725614670450004e-08, 1.453918667172646e-07]]),
    ([0.0, 0.0], [-0.13945960778845617, 0.532082629519135], [[1.0, 0.0], [0.0, 1.0]], [[1.942147210099439e-09, -1.5704721182462376e-08], [-1.5704721182462376e-08, 1.451541662411258e-07]]),
    ([0.0, 0.0], [-0.13945960305525598, 0.5320827497712559], [[1.0, 0.0], [0.0, 1.0]], [[1.943154685437367e-09, -1.5727591139528047e-08], [-1.5727591139528047e-08, 1.4541627830416624e-07]]),
    ([0.0, 0.0], [-0.13945952792684238, 0.5320820446547516], [[1.0, 0.0], [0.0, 1.0]], [[1.9379264794268327e-09, -1.5670168276861733e-08], [-1.5670168276861733e-08, 1.448430690881437e-07]]),
    ([0.0, 0.0], [-0.13945955109583733, 0.532082200707949], [[1.0, 0.0], [0.0, 1.0]], [[1.936725463927175e-09, -1.565529449011735e-08], [-1.565529449011735e-08, 1.4470465211479452e-07]]),
)

def trackers(data):
    stretch = VectorStatTracker(averages=data[0], covariance_matrix=data[2])
    erf = VectorStatTracker(averages=data[1], covariance_matrix=data[3])
    return (stretch, erf)

for count, (rate, tx, lx, duration, samples) in enumerate(tuple_list):
    rate *= 2
    if count in (0,):
        result = s.measure_and_compute(20.0, rate, trial_result_list, 20000.0, 29761904.0, trackers(list_integrator_data[count]), samples)
        _, _, _, stretch, erf, integrator_data = result
        print "    stretch {0!r}".format(stretch), "erf {0!r}".format(erf)
        print "integrator_data", repr(integrator_data)
    if count == 0:
        break
    measurement = ReceiveRateMeasurement(duration, rate, tx, lx)
    print "measurement", repr(measurement)
    trial_result_list.append(measurement)
