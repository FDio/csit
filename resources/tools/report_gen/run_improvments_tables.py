#!/usr/bin/python

# Copyright (c) 2016 Cisco and/or its affiliates.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Generate csv files for the chapter "CSIT Release Notes" from json files
generated by Jenkins' jobs.
"""

import argparse
import sys
import math
import json

from os import walk
from os.path import join
from collections import OrderedDict


def get_files(path, extension):
    """Generates the list of files to process.

    :param path: Path to files.
    :param extension: Extension of files to process. If it is the empty string,
    all files will be processed.
    :type path: str
    :type extension: str
    :returns: List of files to process.
    :rtype: list
    """

    file_list = list()
    for root, dirs, files in walk(path):
        for filename in files:
            if extension:
                if filename.endswith(extension):
                    file_list.append(join(root, filename))
            else:
                file_list.append(join(root, filename))

    return file_list


def parse_args():
    """Parse arguments from cmd line.

    :return: Parsed arguments.
    :rtype ArgumentParser
    """

    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input",
                        required=True,
                        help="Input folder with xml files.")
    parser.add_argument("-o", "--output",
                        required=True,
                        help="Output folder with csv files and templates for "
                             "csv files.")
    return parser.parse_args()


def calculate_stats(data):
    """Calculate statistics:
    - average,
    - standard deviation.

    :param data: Data to process.
    :type data: list
    :return: Average and standard deviation.
    :rtype: tuple
    """

    if len(data) == 0:
        return None, None

    def average(s):
        return float(sum(s)) / len(s)

    avg = average(data)
    variance = map(lambda x: (x - avg) ** 2, data)
    stdev = math.sqrt(average(variance))

    return avg, stdev


def main():
    """Main function to generate csv files for the chapter "CSIT Release Notes"
    from json files generated by Jenkins' jobs.
    """

    args = parse_args()

    json_files = get_files(args.input, ".json")
    csv_files = get_files(args.output, ".template")

    # Get information from template files
    csv_data = dict()
    for csv_file in csv_files:
        with open(csv_file, mode='r') as fh:
            item = OrderedDict()
            for line in fh:
                line_list = line.split(',')
                try:
                    item[line_list[0]] = {"old": ",".join(line_list[1:])[:-1],
                                          "last_old": line_list[-1],
                                          "rates": list(),
                                          "mean": "",
                                          "stdev": "",
                                          "change": ""}
                except IndexError:
                    pass
            csv_data[csv_file] = item

    # Get information from json files
    for json_file in json_files:
        with open(json_file) as fh:
            tests_data = json.load(fh)
            for table, data in csv_data.items():
                for test, values in data.items():
                    try:
                        rate = tests_data["data"][test]["throughput"]["value"]
                        csv_data[table][test]["rates"].append(rate)
                    except KeyError:
                        pass

    # Update existing data with the new information from json files
    for table, data in csv_data.items():
        for test, values in data.items():
            mean, stdev = calculate_stats(values["rates"])
            if mean is not None:
                mean = mean / 1000000
                old = float(csv_data[table][test]["last_old"])
                csv_data[table][test]["mean"] = "{:.1f}".format(mean)
                csv_data[table][test]["change"] = "{:.0f}%". \
                    format(((mean - old) / old) * 100)
                csv_data[table][test]["stdev"] = "{:.1f}".\
                    format(stdev/1000000)

        # Write csv files which are used in report
        file_name = "{}.csv".format(table.rsplit('.', 1)[0])
        with open(file_name, "w") as fh:
            for test in data:
                line = "{},{},{},{}\n".format(csv_data[table][test]["old"],
                                              csv_data[table][test]["mean"],
                                              csv_data[table][test]["stdev"],
                                              csv_data[table][test]["change"])
                fh.write(line)


if __name__ == "__main__":
    sys.exit(main())
