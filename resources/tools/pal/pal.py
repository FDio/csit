# Copyright (c) 2021 Cisco and/or its affiliates.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""CSIT Presentation and Analytics Layer.
"""

import sys
import argparse
import logging

from pal_errors import PresentationError
from specification_parser import Specification


def parse_args():
    """Parse arguments from cmd line.

    :returns: Parsed arguments.
    :rtype: ArgumentParser
    """

    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        u"-s", u"--specification",
        required=True,
        type=str,
        help=u"Specification YAML file."
    )
    parser.add_argument(
        u"-r", u"--release",
        default=u"master",
        type=str,
        help=u"Release string of the product."
    )
    parser.add_argument(
        u"-w", u"--week",
        default=u"1",
        type=str,
        help=u"Calendar week when the report is published."
    )
    parser.add_argument(
        u"-l", u"--logging",
        choices=[
            u"NOTSET", u"DEBUG", u"INFO", u"WARNING", u"ERROR", u"CRITICAL"
        ],
        default=u"ERROR",
        help=u"Logging level."
    )
    parser.add_argument(
        u"-f", u"--force",
        action=u"store_true",
        help=u"Force removing the old build(s) if present."
    )
    parser.add_argument(
        u"-o", u"--print-all-oper-data",
        action=u"store_true",
        help=u"Print all operational data to console. Be careful, the output "
             u"can be really long."
    )
    parser.add_argument(
        u"-i", u"--input-file",
        type=str,
        default=u"",
        help=u"XML file generated by RobotFramework which will be processed "
             u"instead of downloading the data from Nexus and/or Jenkins. In "
             u"this case, the section 'input' in the specification file is "
             u"ignored."
    )
    parser.add_argument(
        u"-d", u"--input-directory",
        type=str,
        default=u"",
        help=u"Directory with XML file(s) generated by RobotFramework or with "
             u"sub-directories with XML file(s) which will be processed "
             u"instead of downloading the data from Nexus and/or Jenkins. In "
             u"this case, the section 'input' in the specification file is "
             u"ignored."
    )

    return parser.parse_args()


def main():
    """Main function."""

    log_levels = {
        u"NOTSET": logging.NOTSET,
        u"DEBUG": logging.DEBUG,
        u"INFO": logging.INFO,
        u"WARNING": logging.WARNING,
        u"ERROR": logging.ERROR,
        u"CRITICAL": logging.CRITICAL
    }

    args = parse_args()
    logging.basicConfig(
        format=u"%(asctime)s: %(levelname)s: %(message)s",
        datefmt=u"%Y/%m/%d %H:%M:%S",
        level=log_levels[args.logging]
    )

    logging.info(u"Application started.")

    try:
        spec = Specification(args.specification)
        spec.read_specification()
    except PresentationError as err:
        logging.critical(u"Finished with error.")
        return 1

    return_code = 1

    return return_code


if __name__ == u"__main__":
    sys.exit(main())
