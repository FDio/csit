<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.6.4 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

<!ENTITY RFC2544 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2544.xml">
]>


<rfc ipr="trust200902" docName="draft-ietf-bmwg-mlrsearch-02" category="info" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Multiple Loss Ratio Search">Multiple Loss Ratio Search for Packet Throughput (MLRsearch)</title>

    <author initials="M." surname="Konstantynowicz" fullname="Maciek Konstantynowicz" role="editor">
      <organization>Cisco Systems</organization>
      <address>
        <email>mkonstan@cisco.com</email>
      </address>
    </author>
    <author initials="V." surname="Polak" fullname="Vratko Polak">
      <organization>Cisco Systems</organization>
      <address>
        <email>vrpolak@cisco.com</email>
      </address>
    </author>

    <date year="2022" month="March" day="07"/>

    <area>ops</area>
    <workgroup>Benchmarking Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>TODO: Update after all sections are ready.</t>

<t>This document proposes changes to <xref target="RFC2544"></xref>, specifically to packet
throughput search methodology, by defining a new search algorithm
referred to as Multiple Loss Ratio search (MLRsearch for short). Instead
of relying on binary search with pre-set starting offered load, it
proposes a novel approach discovering the starting point in the initial
phase, and then searching for packet throughput based on defined packet
loss ratio (PLR) input criteria and defined final trial duration time.
One of the key design principles behind MLRsearch is minimizing the
total test duration and searching for multiple packet throughput rates
(each with a corresponding PLR) concurrently, instead of doing it
sequentially.</t>

<t>The main motivation behind MLRsearch is the new set of challenges and
requirements posed by NFV (Network Function Virtualization),
specifically software based implementations of NFV data planes. Using
<xref target="RFC2544"></xref> in the experience of the authors yields often not repetitive
and not replicable end results due to a large number of factors that are
out of scope for this draft. MLRsearch aims to address this challenge
in a simple way of getting the same result sooner, so more repetitions
can be done to describe the replicability.</t>



    </abstract>



  </front>

  <middle>



<section anchor="terminology"><name>Terminology</name>

<t>TODO: Update after most other sections are updated.</t>


<t><list style="symbols">
  <t>TODO: The current text uses Throughput for the zero loss ratio load.
Is the capital T needed/useful?</t>
  <t>DUT and SUT: see the definitions in https://gerrit.fd.io/r/c/csit/+/35545</t>
  <t>Traffic Generator (TG) and Traffic Analyzer (TA): see
https://datatracker.ietf.org/doc/html/rfc6894#section-4
TODO: Maybe there is an earlier RFC?</t>
  <t>Overall search time: the time it takes to find all required loads within
their precision goals, starting from zero trials measured at given
DUT configuration and traffic profile.</t>
  <t>TODO: traffic profile?</t>
  <t>Intended load: https://datatracker.ietf.org/doc/html/rfc2285#section-3.5.1</t>
  <t>Offered load: https://datatracker.ietf.org/doc/html/rfc2285#section-3.5.2</t>
  <t>Maximum offered load (MOL): see
https://datatracker.ietf.org/doc/html/rfc2285#section-3.5.3</t>
  <t>Forwarding rate at maximum offered load (FRMOL)
https://datatracker.ietf.org/doc/html/rfc2285#section-3.6.2</t>
  <t>Trial Loss Count: the number of frames transmitted
minus the number of frames received. Negative count is possible,
e.g. when SUT duplicates some frames.</t>
  <t>Trial Loss Ratio: ratio of frames received relative to frames
transmitted over the trial duration.
For bi-directional throughput tests, the aggregate ratio is calculated,
based on the aggregate number of frames transmitted and received.
If the trial loss count is negative, its absolute value MUST be used
to keep compliance with RFC2544.</t>
  <t>Safe load: any value, such that trial measurement at this (or lower)
intended load is correcrly handled by both TG and TA, regardless of SUT behavior.
Frequently, it is not known what the safe load is.</t>
  <t>Max load (TODO rename?): Maximal intended load to be used during search.
Benchmarking team decides which value is low enough
to guarantee values reported by TG and TA are reliable.
It has to be a safe load, but it can be lower than a safe load estimate
for added safety.
See the subsection on unreliable test equipment below.
This value MUST NOT be higher than MOL, which itself MUST NOT
be higher than Maximum Frame Rate
https://datatracker.ietf.org/doc/html/rfc2544#section-20</t>
  <t>Min load: Minimal intended load to be used during search.
Benchmarking team decides which value is high enough
to guarantee the trial measurement results are valid.
E.g. considerable overall search time can be saved by declaring SUT
faulty if min load trial shows too high loss rate.
Zero frames per second is a valid min load value</t>
  <t>Effective loss ratio: a corrected value of trial loss ratio
chosen to avoid difficulties if SUT exhibits decreasing loss ratio
with increasing load. It is the maximum of trial loss ratios
measured at the same duration on all loads smaller than (and including)
the current one.</t>
  <t>Target loss ratio: a loss ratio value acting as an input for the search.
The search is finding tight enough lower and upper bounds in intended load,
so that the measurement at the lower bound has smaller or equal
trial loss ratio, and upper bound has strictly larger trial loss ratio.
For the tightest upper bound, the effective loss ratio is the same as
trial loss ratio at that upper bound load.
For the tightest lower bound, the effective loss ratio can be higher
than the trial loss ratio at that lower bound, but still not larger
than the target loss ratio.</t>
  <t>TODO: Search algorithm.</t>
  <t>TODO: Precision goal.</t>
  <t>TODO: Define a &quot;benchmarking group&quot;.</t>
  <t>TODO: Upper and lower bound.</t>
  <t>TODO: Valid and invalid bound?</t>
  <t>TODO: Interval and interval width?</t>
</list></t>

<t>TODO: Mention NIC/PCI bandwidth/pps limits can be lower than bandwidth of medium.</t>

</section>
<section anchor="intentions-of-this-document"><name>Intentions of this document</name>


<t>The intention of this document is to provide recommendations for:
* optimizing search for multiple target loss ratios at once,
* speeding up the overall search time,
* improve search results repeatability and comparability.</t>

<t>No part of RFC2544 is intended to be obsoleted by this document.</t>


</section>
<section anchor="rfc2544"><name>RFC2544</name>

<section anchor="throughput-search"><name>Throughput search</name>

<t>It is useful to restate the key requirements of RFC2544
using the new terminology (see section Terminology).</t>

<t>The following sections of RFC2544 are of interest for this document.</t>

<t><list style="symbols">
  <t>https://datatracker.ietf.org/doc/html/rfc2544#section-20
Mentions the max load SHOULD not be larget than the theoretical
maximum rate for the frame size on the media.</t>
  <t>https://datatracker.ietf.org/doc/html/rfc2544#section-23
Lists the actions to be done for each trial measurement,
it also mentions loss rate as an example of trial measurement results.
This document uses loss count instead, as that is the quantity
that is easier for the current test equipment to measure,
e.g. it is not affected by the real traffic duration.
TODO: Time uncertainty again.</t>
  <t>https://datatracker.ietf.org/doc/html/rfc2544#section-24
Mentions &quot;full length trials&quot; leading to the Throughput found,
as opposed to shorter trial durations, allowed in an attempt
to &quot;minimize the length of search procedure&quot;.
This document talks about &quot;final trial duration&quot; and aims to
&quot;optimize overal search time&quot;.</t>
  <t>https://datatracker.ietf.org/doc/html/rfc2544#section-26.1
with https://www.rfc-editor.org/errata/eid422
finaly states requirements for the search procedure.
It boils down to &quot;increase intended load upon zero trial loss
and decrease intended load upon non-zero trial loss&quot;.</t>
</list></t>

<t>No additional constraints are placed on the load selection,
and there is no mention of an exit condition, e.g. when there is enough
trial measurements to proclaim the largest load with zero trial loss
(and final trial duration) to be the Throughput found.</t>


</section>
<section anchor="simple-bisection"><name>Simple bisection</name>

<t>There is one obvious and simple search algorithm which conforms
to throughput search requirements: simple bijection.</t>

<t>Input: target precision, in frames per second.</t>

<t>Procedure:</t>

<t><list style="numbers">
  <t>Chose min load to be zero.
  <list style="numbers">
      <t>No need to measure, loss count has to be zero.</t>
      <t>Use the zero load as the current lower bound.</t>
    </list></t>
  <t>Chose max load to be the max value allowed by bandwidth of the medium.
  <list style="numbers">
      <t>Perform a trial measurement (at the full length duration) at max load.</t>
      <t>If there is zero trial loss count, return max load as Throughput.</t>
      <t>Use max load as the current upper bound.</t>
    </list></t>
  <t>Repeat until the difference between lower bound and upper bound is
smaller or equal to the precision goal.
  <list style="numbers">
      <t>If it is not larget, return the current lower bound as Throughput.</t>
      <t>Else: Chose new load as the arithmetic average of lower and upper bound.</t>
      <t>Perform a trial measurement (at the full length duration) at this load.</t>
      <t>If the trial loss rate is zero, consider the load as new lower bound.</t>
      <t>Else consider the load as the new upper bound.</t>
      <t>Jump back to the repeat at 3.</t>
    </list></t>
</list></t>

<t>Another possible stop condition is the overal search time so far,
but that is not really a different condition, as the time for search to reach
the precision goal is just a function of precision goal, trial duration
and the difference between max and min load.</t>

<t>While this algorithm can be accomodated to search for multiple
target loss ratios &quot;at the same time (see somewhere below),
it is still missing multiple improvement which give MLRsearch
considerably better overal search time in practice.</t>

</section>
</section>
<section anchor="problems"><name>Problems</name>

<section anchor="repeatability-and-comparability"><name>Repeatability and Comparability</name>

<t>RFC2544 does not suggest to repeat Throughput search,

and from just one Throughput value, it cannot be determined
how repeatable that value is (how likely it is for a repeated Throughput search
to end up with a value less then the precision goal away from the first value).</t>

<t>Depending on SUT behavior, different benchmark groups
can report significantly different Througput values,
even when using identical SUT and test equipment,
just because of minor differences in their search algorithm
(e.g. different max load value).</t>

<t>While repeatability can be addressed by repeating the search several times,
the differences in the comparability scenario may be systematic,
e.g. seeming like a bias in one or both benchmark groups.</t>

<t>MLRsearch algorithm does not really help with the repeatability problem.
This document RECOMMENDS to repeat a selection of &quot;important&quot; tests
ten times, so users can ascertain the repeatability of the results.</t>

<t>TODO: How to report? Average and standard deviation?</t>

<t>Following MLRsearch algorithm leaves less freedom for the benchmark groups
to encounter the comparability problem,
alghough more research is needed to determine the effect
of MLRsearch&#39;s tweakable parameters.</t>





</section>
<section anchor="non-zero-target-loss-ratios"><name>Non-Zero Target Loss Ratios</name>

<t>https://datatracker.ietf.org/doc/html/rfc1242#section-3.17
defines Throughput as:
    The maximum rate at which none of the offered frames
    are dropped by the device.</t>

<t>and then it says:
    Since even the loss of one frame in a
    data stream can cause significant delays while
    waiting for the higher level protocols to time out,
    it is useful to know the actual maximum data
    rate that the device can support.</t>


<t>New &quot;software DUTs&quot; (traffic forwarding programs running on
commercial-off-the-shelf compute server hardware) frequently exhibit quite
low repeatability of Throughput results per above definition.</t>

<t>This is due to, in general, throughput rates of software DUTs (programs)
being sensitive to server resource allocation by OS during runtime,
as well as any interrupts or blocking of software threads involved
in packet processing.</t>

<t>To deal with this, this document recommends discovery of multiple throughput rates of interest for software DUTs that run on general purpose COTS servers (with x86, AArch64 Instruction Set Architectures):
* throughput rate with target of zero packet loss ratio.
* at least one throughput rate with target of non-zero packet loss ratio.</t>

<t>In our experience, the higher the target loss ratio is,
the better is the repeatability of the corresponding load found.</t>

<t>TODO: Define a good name for a load corresponding to a specific non-zero
target loss ration, while keeping Throughput for the load corresponding
to zero target loss ratio.</t>

<t>This document RECOMMENDS the benchmark groups to search for corresponding loads
to at least one non-zero target loss ratio.
This document does not suggest any particular non-zero target loss ratio value
to search the corresponding load for.</t>


</section>
</section>
<section anchor="solution-ideas"><name>Solution ideas</name>

<t>This document gives several independent ideas on how to lower the (average)
overall search time, while remaining unconditionally compliant with RFC2544
(and adding some of extensions).</t>

<t>This document also specifies one particular way to combine all the ideas
into a single search algorithm class (single logic with few tweakable parameters).</t>

<t>Little to no research has been done into the question of which combination
of ideas achieves the best compromise with respect to overal search time,
high repeatability and high comparability.</t>

<t>TODO: How important it is to discuss particular implementation choices,
especially when motivated by non-deterministic SUT behavior?</t>

<section anchor="short-duration-trials"><name>Short duration trials</name>

<t>https://datatracker.ietf.org/doc/html/rfc2544#section-24
already mentions the possibity of using shorter duration
for trials that are not part of &quot;final determination&quot;.</t>

<t>Obviously, the upper and lower bound from a smaller duration trial
can be used as the initial upper and lower bound for the final determination.</t>

<t>MLRsearch makes it clear a re-measurement is always needed
(new trial measurement with the same load but longer duration).
It also specifes what to do if the longer trial is no longer a valid bound
(TODO define?), e.g. start an external search.
Additionaly one halving can be saved during the shorter duration search.</t>

</section>
<section anchor="frmol-as-reasonable-start"><name>FRMOL as reasonable start</name>

<t>TODO expand: Overal search ends with &quot;final determination&quot; search,
preceded by &quot;shorter duration search&quot; preceded by &quot;bound initialization&quot;,
where the bounds can be considerably different from min and max load.</t>

<t>For SUTs with high repeatability, the FRMOL is usually a good approximation
of Throughput. But for less repeatable SUTs, forwarding rate (TODO define)
is frequently a bad approximation to Throughput, therefore halving
and other robust-to-worst-case approaches have to be used.
Still, forwarding rate at FRMOL load can be a good initial bound.</t>

</section>
<section anchor="non-zero-loss-ratios"><name>Non-zero loss ratios</name>

<t>See the &quot;Popularity of non-zero target loss ratios&quot; section above.</t>

<t>TODO: Define &quot;trial measurement result classification criteria&quot;,
or keep reusing long phrases without definitions?</t>

<t>A search for a load corresponding to a non-zero target loss rate
is very similar to a search for Throughput,
just the criterion when to increase or decrease the intended load
for the next trial measurement uses the comparison of trial loss ratio
to the target loss ratio (instead of comparing loss count to zero)
Any search algorithm that works for Throughput can be easily used also for
non-zero target loss rates, perhaps with small modifications
in places where the measured forwarding rate is used.</t>

<t>Note that it is possible to search for multiple loss ratio goals if needed.</t>

</section>
<section anchor="concurrent-ratio-search"><name>Concurrent ratio search</name>

<t>A single trial measurement result can act as an upper bound for a lower
target loss ratio, and as a lower bound for a higher target loss ratio
at the same time. This is an example of how
it can be advantageous to search for all loss ratio goals &quot;at once&quot;,
or at least &quot;reuse&quot; trial measurement result done so far.</t>

<t>Even when a search algorithm is fully deterministic in load selection
while focusing on a single loss ratio and trial duration,
the choice of iteration order between target loss ratios and trial durations
can affect the obtained results in subtle ways.
MLRsearch offers one particular ordering.</t>


</section>
<section anchor="load-selection-heuristics-and-shortcuts"><name>Load selection heuristics and shortcuts</name>

<t>Aside of the two heuristics already mentioned (FRMOL based initial bounds
and saving one halving when increasing trial duration),
there are other tricks that can save some overall search time
at the cost of keeping the difference between final lower and upper bound
intentionally large (but still within the precision goal).</t>

<t>TODO: Refer implementation subsections on:
* Uneven splits.
* Rounding the interval width up.
* Using old invalid bounds for interval width guessing.</t>

<t>The impact on overall duration is probably small,
and the effect on result distribution maybe even smaller.
TODO: Is the two-liner above useful at all?</t>

</section>
</section>
<section anchor="non-compliance-with-rfc2544"><name>Non-compliance with RFC2544</name>

<t>It is possible to achieve even faster search times by abandoning
some requirements and suggestions of RFC2544,
mainly by reducing the wait times at start and end of trial.</t>

<t>Such results are therefore no longer compliant with RFC2544
(or at least not unconditionally),
but they may still be useful for internal usage, or for comparing
results of different DUTs achieved with an identical non-compliant algorithm.</t>

<t>TODO: Refer to the subsection with CSIT customizations.</t>

</section>
<section anchor="additional-requirements"><name>Additional Requirements</name>

<t>RFC2544 can be understood as having a number of implicit requirements.
They are made explicit in this section
(as requirements for this document, not for RFC2544).</t>

<t>Recommendations on how to properly address the implicit requirements
are out of scope of this document.</t>


<section anchor="todo-search-stop-criteria"><name>TODO: Search Stop Criteria</name>

<t>TODO: Mention the timeout parameter?</t>


</section>
<section anchor="reliability-of-test-equipment"><name>Reliability of Test Equipment</name>

<t>Both TG and TA MUST be able to handle correctly
every intended load used during the search.</t>

<t>On TG side, the difference between Intended Load and Offered Load
MUST be small.</t>

<t>TODO: How small? Difference of one packet may not be measurable
due to time uncertainties.</t>


<t>TODO expand: time uncertainty.</t>

<t>To ensure that, max load (see Terminology) has to be set to low enough value.
Benchmark groups MAY list the max load value used,
especially if the Throughput value is equal (or close) to the max load.</t>


<t>Solutions (even problem formulations) for the following open problems
are outside of the scope of this document:
* Detecting when the test equipment operates above its safe load.
* Finding a large but safe load value.
* Correcting any result affected by max load value not being a safe load.</t>



<section anchor="very-late-frames"><name>Very late frames</name>


<t>RFC2544 requires quite conservative time delays
see https://datatracker.ietf.org/doc/html/rfc2544#section-23
to prevent frames buffered in one trial measurement
to be counted as received in a subsequent trial measurement.</t>

<t>However, for some SUTs it may still be possible to buffer enough frames,
so they are still sending them (perhaps in bursts)
when the next trial measurement starts.
Sometimes, this can be detected as a negative trial loss count, e.g. TA receiving
more frames than TG has sent during this trial measurement. Frame duplication
is another way of causing the negative trial loss count.</t>

<t>https://datatracker.ietf.org/doc/html/rfc2544#section-10
recommends to use sequence numbers in frame payloads,
but generating and verifying them requires test equipment resources,
which may be not plenty enough to suport at high loads.
(Using low enough max load would work, but frequently that would be
smaller than SUT&#39;s sctual Throughput.)</t>

<t>RFC2544 does not offer any solution to the negative loss problem,
except implicitly treating negative trial loss counts
the same way as positive trial loss counts.</t>

<t>This document also does not offer any practical solution.</t>

<t>Instead, this document SUGGESTS the search algorithm to take any precaution
necessary to avoid very late frames.</t>

<t>This document also REQUIRES any detected duplicate frames to be counted
as additional lost frames.
This document also REQUIRES, any negative trial loss ratio
to be treated as positive trial loss ratio of the same absolute value.</t>


<t>!!! Nothing below is up-to-date with draft v02. !!!</t>

</section>
</section>
</section>
<section anchor="mlrsearch-background"><name>MLRsearch Background</name>

<t>TODO: Old section, probably obsoleted by preceding section(s).</t>

<t>Multiple Loss Ratio search (MLRsearch) is a packet throughput search
algorithm suitable for deterministic systems (as opposed to
probabilistic systems). MLRsearch discovers multiple packet throughput
rates in a single search, each rate is associated with a distinct
Packet Loss Ratio (PLR) criterion.</t>

<t>For cases when multiple rates need to be found, this property makes
MLRsearch more efficient in terms of time execution, compared to
traditional throughput search algorithms that discover a single packet
rate per defined search criteria (e.g. a binary search specified by
<xref target="RFC2544"></xref>). MLRsearch reduces execution time even further by relying on
shorter trial durations of intermediate steps, with only the final
measurements conducted at the specified final trial duration. This
results in the shorter overall search execution time when compared to a
traditional binary search, while guaranteeing the same results for
deterministic systems.</t>

<t>In practice, two rates with distinct PLRs are commonly used for packet
throughput measurements of NFV systems: Non Drop Rate (NDR) with PLR=0
and Partial Drop Rate (PDR) with PLR&gt;0. The rest of this document
describes MLRsearch with NDR and PDR pair as an example.</t>

<t>Similarly to other throughput search approaches like binary search,
MLRsearch is effective for SUTs/DUTs with PLR curve that is
non-decreasing with growing offered load. It may not be as
effective for SUTs/DUTs with abnormal PLR curves, although
it will always converge to some value.</t>

<t>MLRsearch relies on traffic generator to qualify the received packet
stream as error-free, and invalidate the results if any disqualifying
errors are present e.g. out-of-sequence frames.</t>

<t>MLRsearch can be applied to both uni-directional and bi-directional
throughput tests.</t>

<t>For bi-directional tests, MLRsearch rates and ratios are aggregates of
both directions, based on the following assumptions:</t>

<t><list style="symbols">
  <t>Traffic transmitted by traffic generator and received by SUT/DUT
has the same packet rate in each direction,
in other words the offered load is symmetric.</t>
  <t>SUT/DUT packet processing capacity is the same in both directions,
resulting in the same packet loss under load.</t>
</list></t>

<t>MLRsearch can be applied even without those assumptions,
but in that case the aggregate loss ratio is less useful as a metric.</t>

<t>MLRsearch can be used for network transactions consisting of more than
just one packet, or anything else that has intended load as input
and loss ratio as output (duration as input is optional).
This text uses mostly packet-centric language.</t>

</section>
<section anchor="mlrsearch-overview"><name>MLRsearch Overview</name>

<t>The main properties of MLRsearch:</t>

<t><list style="symbols">
  <t>MLRsearch is a duration aware multi-phase multi-rate search algorithm:
  <list style="symbols">
      <t>Initial Phase determines promising starting interval for the search.</t>
      <t>Intermediate Phases progress towards defined final search criteria.</t>
      <t>Final Phase executes measurements according to the final search
criteria.</t>
      <t>Final search criteria are defined by following inputs:
      <list style="symbols">
          <t>Target PLRs (e.g. 0.0 and 0.005 when searching for NDR and PDR).</t>
          <t>Final trial duration.</t>
          <t>Measurement resolution.</t>
        </list></t>
    </list></t>
  <t>Initial Phase:
  <list style="symbols">
      <t>Measure MRR over initial trial duration.</t>
      <t>Measured MRR is used as an input to the first intermediate phase.</t>
    </list></t>
  <t>Multiple Intermediate Phases:
  <list style="symbols">
      <t>Trial duration:
      <list style="symbols">
          <t>Start with initial trial duration in the first intermediate phase.</t>
          <t>Converge geometrically towards the final trial duration.</t>
        </list></t>
      <t>Track all previous trial measurement results:
      <list style="symbols">
          <t>Duration, offered load and loss ratio are tracked.</t>
          <t>Effective loss ratios are tracked.
          <list style="symbols">
              <t>While in practice, real loss ratios can decrease with increasing load,
effective loss ratios never decrease. This is achieved by sorting
results by load, and using the effective loss ratio of the previous load
if the current loss ratio is smaller than that.</t>
            </list></t>
          <t>The algorithm queries the results to find best lower and upper bounds.
          <list style="symbols">
              <t>Effective loss ratios are always used.</t>
            </list></t>
          <t>The phase ends if all target loss ratios have tight enough bounds.</t>
        </list></t>
      <t>Search:
      <list style="symbols">
          <t>Iterate over target loss ratios in increasing order.</t>
          <t>If both upper and lower bound are in measurement results for this duration,
apply bisect until the bounds are tight enough,
and continue with next loss ratio.</t>
          <t>If a bound is missing for this duration, but there exists a bound
from the previous duration (compatible with the other bound
at this duration), re-measure at the current duration.</t>
          <t>If a bound in one direction (upper or lower) is missing for this duration,
and the previous duration does not have a compatible bound,
compute the current &quot;interval size&quot; from the second tightest bound
in the other direction (lower or upper respectively)
for the current duration, and choose next offered load for external search.</t>
          <t>The logic guarantees that a measurement is never repeated with both
duration and offered load being the same.</t>
          <t>The logic guarantees that measurements for higher target loss ratio
iterations (still within the same phase duration) do not affect validity
and tightness of bounds for previous target loss ratio iterations
(at the same duration).</t>
        </list></t>
      <t>Use of internal and external searches:
      <list style="symbols">
          <t>External search:
          <list style="symbols">
              <t>It is a variant of &quot;exponential search&quot;.</t>
              <t>The &quot;interval size&quot; is multiplied by a configurable constant
(powers of two work well with the subsequent internal search).</t>
            </list></t>
          <t>Internal search:
          <list style="symbols">
              <t>A variant of binary search that measures at offered load between
the previously found bounds.</t>
              <t>The interval does not need to be split into exact halves,
if other split can get to the target width goal faster.
              <list style="symbols">
                  <t>The idea is to avoid returning interval narrower than the current
width goal. See sample implementation details, below.</t>
                </list></t>
            </list></t>
        </list></t>
    </list></t>
  <t>Final Phase:
  <list style="symbols">
      <t>Executed with the final test trial duration, and the final width
goal that determines resolution of the overall search.</t>
    </list></t>
  <t>Intermediate Phases together with the Final Phase are called
Non-Initial Phases.</t>
  <t>The returned bounds stay within prescribed min_rate and max_rate.
  <list style="symbols">
      <t>When returning min_rate or max_rate, the returned bounds may be invalid.
      <list style="symbols">
          <t>E.g. upper bound at max_rate may come from a measurement
with loss ratio still not higher than the target loss ratio.</t>
        </list></t>
    </list></t>
</list></t>

<t>The main benefits of MLRsearch vs. binary search include:</t>

<t><list style="symbols">
  <t>In general, MLRsearch is likely to execute more trials overall, but
likely less trials at a set final trial duration.</t>
  <t>In well behaving cases, e.g. when results do not depend on trial
duration, it greatly reduces (&gt;50%) the overall duration compared to a
single PDR (or NDR) binary search over duration, while finding
multiple drop rates.</t>
  <t>In all cases MLRsearch yields the same or similar results to binary
search.</t>
  <t>Note: both binary search and MLRsearch are susceptible to reporting
non-repeatable results across multiple runs for very bad behaving
cases.</t>
</list></t>

<t>Caveats:</t>

<t><list style="symbols">
  <t>Worst case MLRsearch can take longer than a binary search, e.g. in case of
drastic changes in behaviour for trials at varying durations.
  <list style="symbols">
      <t>Re-measurement at higher duration can trigger a long external search.
That never happens in binary search, which uses the final duration
from the start.</t>
    </list></t>
</list></t>

</section>
<section anchor="sample-implementation"><name>Sample Implementation</name>

<t>Following is a brief description of a sample MLRsearch implementation,
which is a simplified version of the existing implementation.</t>

<section anchor="input-parameters"><name>Input Parameters</name>

<t><list style="numbers">
  <t><strong>max_rate</strong> - Maximum Transmit Rate (MTR) of packets to
be used by external traffic generator implementing MLRsearch,
limited by the actual Ethernet link(s) rate, NIC model or traffic
generator capabilities.</t>
  <t><strong>min_rate</strong> - minimum packet transmit rate to be used for
measurements. MLRsearch fails if lower transmit rate needs to be
used to meet search criteria.</t>
  <t><strong>final_trial_duration</strong> - required trial duration for final rate
measurements.</t>
  <t><strong>initial_trial_duration</strong> - trial duration for initial MLRsearch phase.</t>
  <t><strong>final_relative_width</strong> - required measurement resolution expressed as
(lower_bound, upper_bound) interval width relative to upper_bound.</t>
  <t><strong>packet_loss_ratios</strong> - list of maximum acceptable PLR search criteria.</t>
  <t><strong>number_of_intermediate_phases</strong> - number of phases between the initial
phase and the final phase. Impacts the overall MLRsearch duration.
Less phases are required for well behaving cases, more phases
may be needed to reduce the overall search duration for worse behaving cases.</t>
</list></t>

</section>
<section anchor="initial-phase"><name>Initial Phase</name>

<t><list style="numbers">
  <t>First trial measures at configured maximum transmit rate (MTR) and
discovers maximum receive rate (MRR).
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = maximum_transmit_rate.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR = measured receive rate.
Received rate is computed as intended load multiplied by pass ratio
(which is one minus loss ratio). This is useful when loss ratio is computed
from a different metric than intended load. For example, intended load
can be in transactions (multiple packets each), but loss ratio is computed
on level of packets, not transactions.</t>
      <t>Example: If MTR is 10 transactions per second, and each transaction has
10 packets, and receive rate is 90 packets per second, then loss rate
is 10%, and MRR is computed to be 9 transactions per second.</t>
    </list>
If MRR is too close to MTR, MRR is set below MTR so that interval width
is equal to the width goal of the first intermediate phase.
If MRR is less than min_rate, min_rate is used.</t>
  <t>Second trial measures at MRR and discovers MRR2.
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = MRR.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR2 = measured receive rate.
If MRR2 is less than min_rate, min_rate is used.
If loss ratio is less or equal to the smallest target loss ratio,
MRR2 is set to a value above MRR, so that interval width is equal
to the width goal of the first intermediate phase.
MRR2 could end up being equal to MTR (for example if both measurements so far
had zero loss), which was already measured, step 3 is skipped in that case.</t>
    </list></t>
  <t>Third trial measures at MRR2.
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = MRR2.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR3 = measured receive rate.
If MRR3 is less than min_rate, min_rate is used.
If step 3 is not skipped, the first trial measurement is forgotten.
This is done because in practice (if MRR2 is above MRR), external search
from MRR and MRR2 is likely to lead to a faster intermediate phase
than a bisect between MRR2 and MTR.</t>
    </list></t>
</list></t>

</section>
<section anchor="non-initial-phases"><name>Non-Initial Phases</name>

<t><list style="numbers">
  <t>Main phase loop:
  <list style="numbers">
      <t>IN: trial_duration for the current phase. Set to
initial_trial_duration for the first intermediate phase; to
final_trial_duration for the final phase; or to the element of
interpolating geometric sequence for other intermediate phases.
For example with two intermediate phases, trial_duration of the
second intermediate phase is the geometric average of
initial_trial_duration and final_trial_duration.</t>
      <t>IN: relative_width_goal for the current phase. Set to
final_relative_width for the final phase; doubled for each
preceding phase. For example with two intermediate phases, the
first intermediate phase uses quadruple of final_relative_width
and the second intermediate phase uses double of
final_relative_width.</t>
      <t>IN: Measurement results from the previous phase (previous duration).</t>
      <t>Internal target ratio loop:
      <list style="numbers">
          <t>IN: Target loss ratio for this iteration of ratio loop.</t>
          <t>IN: Measurement results from all previous ratio loop iterations
of current phase (current duration).</t>
          <t>DO: According to the procedure described in point 2:
          <list style="numbers">
              <t>either exit the phase (by jumping to 1.5),</t>
              <t>or exit loop iteration (by continuing with next target loss ratio,
jumping to 1.4.1),</t>
              <t>or calculate new transmit rate to measure with.</t>
            </list></t>
          <t>DO: Perform the trial measurement at the new transmit rate and
current trial duration, compute its loss ratio.</t>
          <t>DO: Add the result and go to next iteration (1.4.1),
including the added trial result in 1.4.2.</t>
        </list></t>
      <t>OUT: Measurement results from this phase.</t>
      <t>OUT: In the final phase, bounds for each target loss ratio
are extracted and returned.
      <list style="numbers">
          <t>If a valid bound does not exist, use min_rate or max_rate.</t>
        </list></t>
    </list></t>
  <t>New transmit rate (or exit) calculation (for point 1.4.3):
  <list style="numbers">
      <t>If the previous duration has the best upper and lower bound,
select the middle point as the new transmit rate.
      <list style="numbers">
          <t>See 2.5.3. below for the exact splitting logic.</t>
          <t>This can be a no-op if interval is narrow enough already,
in that case continue with 2.2.</t>
          <t>Discussion, assuming the middle point is selected and measured:
          <list style="numbers">
              <t>Regardless of loss rate measured, the result becomes
either best upper or best lower bound at current duration.</t>
              <t>So this condition is satisfied at most once per iteration.</t>
              <t>This also explains why previous phase has double width goal:
              <list style="numbers">
                  <t>We avoid one more bisection at previous phase.</t>
                  <t>At most one bound (per iteration) is re-measured
with current duration.</t>
                  <t>Each re-measurement can trigger an external search.</t>
                  <t>Such surprising external searches are the main hurdle
in achieving low overall search durations.</t>
                  <t>Even without 1.1, there is at most one external search
per phase and target loss ratio.</t>
                  <t>But without 1.1 there can be two re-measurements,
each coming with a risk of triggering external search.</t>
                </list></t>
            </list></t>
        </list></t>
      <t>If the previous duration has one bound best, select its transmit rate.
In deterministic case this is the last measurement needed this iteration.</t>
      <t>If only upper bound exists in current duration results:
      <list style="numbers">
          <t>This can only happen for the smallest target loss ratio.</t>
          <t>If the upper bound was measured at min_rate,
exit the whole phase early (not investigating other target loss ratios).</t>
          <t>Select new transmit rate using external search:
          <list style="numbers">
              <t>For computing previous interval size, use:
              <list style="numbers">
                  <t>second tightest bound at current duration,</t>
                  <t>or tightest bound of previous duration,
if compatible and giving a more narrow interval,</t>
                  <t>or target interval width if none of the above is available.</t>
                  <t>In any case increase to target interval width if smaller.</t>
                </list></t>
              <t>Quadruple the interval width.</t>
              <t>Use min_rate if the new transmit rate is lower.</t>
            </list></t>
        </list></t>
      <t>If only lower bound exists in current duration results:
      <list style="numbers">
          <t>If the lower bound was measured at max_rate,
exit this iteration (continue with next lowest target loss ratio).</t>
          <t>Select new transmit rate using external search:
          <list style="numbers">
              <t>For computing previous interval size, use:
              <list style="numbers">
                  <t>second tightest bound at current duration,</t>
                  <t>or tightest bound of previous duration,
if compatible and giving a more narrow interval,</t>
                  <t>or target interval width if none of the above is available.</t>
                  <t>In any case increase to target interval width if smaller.</t>
                </list></t>
              <t>Quadruple the interval width.</t>
              <t>Use max_rate if the new transmit rate is higher.</t>
            </list></t>
        </list></t>
      <t>The only remaining option is both bounds in current duration results.
      <list style="numbers">
          <t>This can happen in two ways, depending on how the lower bound
was chosen.
          <list style="numbers">
              <t>It could have been selected for the current loss ratio,
e.g. in re-measurement (2.2) or in initial bisect (2.1).</t>
              <t>It could have been found as an upper bound for the previous smaller
target loss ratio, in which case it might be too low.</t>
              <t>The algorithm does not track which one is the case,
as the decision logic works well regardless.</t>
            </list></t>
          <t>Compute &quot;extending down&quot; candidate transmit rate exactly as in 2.3.</t>
          <t>Compute &quot;bisecting&quot; candidate transmit rate:
          <list style="numbers">
              <t>Compute the current interval width from the two bounds.</t>
              <t>Express the width as a (float) multiple of the target width goal
for this phase.</t>
              <t>If the multiple is not higher than one, it means the width goal
is met. Exit this iteration and continue with next higher
target loss ratio.</t>
              <t>If the multiple is two or less, use half of that
for new width if the lower subinterval.</t>
              <t>Round the multiple up to nearest even integer.</t>
              <t>Use half of that for new width if the lower subinterval.</t>
              <t>Example: If lower bound is 2.0 and upper bound is 5.0, and width
goal is 1.0, the new candidate transmit rate will be 4.0.
This can save a measurement when 4.0 has small loss.
Selecting the average (3.5) would never save a measurement,
giving more narrow bounds instead.</t>
            </list></t>
          <t>If either candidate computation want to exit the iteration,
do as bisecting candidate computation says.</t>
          <t>The remaining case is both candidates wanting to measure at some rate.
Use the higher rate. This prefers external search down narrow enough
interval, competing with perfectly sized lower bisect subinterval.</t>
        </list></t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="fdio-csit-implementation"><name>FD.io CSIT Implementation</name>

<t>The only known working implementation of MLRsearch is in
the open-source code running in Linux Foundation
FD.io CSIT project <xref target="FDio-CSIT-MLRsearch"></xref> as part of
a Continuous Integration / Continuous Development (CI/CD) framework.</t>

<t>MLRsearch is also available as a Python package in <xref target="PyPI-MLRsearch"></xref>.</t>

<section anchor="additional-details"><name>Additional details</name>

<t>This document so far has been describing a simplified version of
MLRsearch algorithm. The full algorithm as implemented in CSIT contains
additional logic, which makes some of the details (but not general
ideas) above incorrect. Here is a short description of the additional
logic as a list of principles, explaining their main differences from
(or additions to) the simplified description, but without detailing
their mutual interaction.</t>

<t><list style="numbers">
  <t>Logarithmic transmit rate.
  <list style="symbols">
      <t>In order to better fit the relative width goal, the interval
doubling and halving is done differently.</t>
      <t>For example, the middle of 2 and 8 is 4, not 5.</t>
    </list></t>
  <t>Timeout for bad cases.
  <list style="symbols">
      <t>The worst case for MLRsearch is when each phase converges to
intervals way different than the results of the previous phase.</t>
      <t>Rather than suffer total search time several times larger than pure
binary search, the implemented tests fail themselves when the
search takes too long (given by argument <em>timeout</em>).</t>
    </list></t>
  <t>Intended count.
  <list style="symbols">
      <t>The number of packets to send during the trial should be equal to
the intended load multiplied by the duration.
      <list style="symbols">
          <t>Also multiplied by a coefficient, if loss ratio is calculated
from a different metric.
          <list style="symbols">
              <t>Example: If a successful transaction uses 10 packets,
load is given in transactions per second, but loss ratio is calculated
from packets, so the coefficient to get intended count of packets
is 10.</t>
            </list></t>
        </list></t>
      <t>But in practice that does not work.
      <list style="symbols">
          <t>It could result in a fractional number of packets,</t>
          <t>so it has to be rounded in a way traffic generator chooses,</t>
          <t>which may depend on the number of traffic flows
and traffic generator worker threads.</t>
        </list></t>
    </list></t>
  <t>Attempted count. As the real number of intended packets is not known exactly,
the computation uses the number of packets traffic generator reports as sent.
Unless overridden by the next point.</t>
  <t>Duration stretching.
  <list style="symbols">
      <t>In some cases, traffic generator may get overloaded,
causing it to take significantly longer (than duration) to send all packets.</t>
      <t>The implementation uses an explicit stop,
      <list style="symbols">
          <t>causing lower attempted count in those cases.</t>
        </list></t>
      <t>The implementation tolerates some small difference between
attempted count and intended count.
      <list style="symbols">
          <t>10 microseconds worth of traffic is sufficient for our tests.</t>
        </list></t>
      <t>If the difference is higher, the unsent packets are counted as lost.
      <list style="symbols">
          <t>This forces the search to avoid the regions of high duration stretching.</t>
          <t>The final bounds describe the performance of not just SUT,
but of the whole system, including the traffic generator.</t>
        </list></t>
    </list></t>
  <t>Excess packets.
  <list style="symbols">
      <t>In some test (e.g. using TCP flows) Traffic generator reacts to packet loss
by retransmission. Usually, such packet loss is already affecting loss ratio.
If a test also wants to treat retransmissions due to heavily delayed packets
also as a failure, this is once again visible as a mismatch between
the intended count and the attempted count.</t>
      <t>The CSIT implementation simply looks at absolute value of the difference,
so it offers the same small tolerance before it starts marking a &quot;loss&quot;.</t>
    </list></t>
  <t>For result processing, we use lower bounds and ignore upper bounds.</t>
</list></t>

<section anchor="fdio-csit-input-parameters"><name>FD.io CSIT Input Parameters</name>

<t><list style="numbers">
  <t><strong>max_rate</strong> - Typical values: 2 * 14.88 Mpps for 64B
10GE link rate, 2 * 18.75 Mpps for 64B 40GE NIC (specific model).</t>
  <t><strong>min_rate</strong> - Value: 2 * 9001 pps (we reserve 9000 pps
for latency measurements).</t>
  <t><strong>final_trial_duration</strong> - Value: 30.0 seconds.</t>
  <t><strong>initial_trial_duration</strong> - Value: 1.0 second.</t>
  <t><strong>final_relative_width</strong> - Value: 0.005 (0.5%).</t>
  <t><strong>packet_loss_ratios</strong> - Value: 0.0, 0.005 (0.0% for NDR, 0.5% for PDR).</t>
  <t><strong>number_of_intermediate_phases</strong> - Value: 2.
The value has been chosen based on limited experimentation to date.
More experimentation needed to arrive to clearer guidelines.</t>
  <t><strong>timeout</strong> - Limit for the overall search duration (for one search).
If MLRsearch oversteps this limit, it immediately declares the test failed,
to avoid wasting even more time on a misbehaving SUT.
Value: 600.0 (seconds).</t>
  <t><strong>expansion_coefficient</strong> - Width multiplier for external search.
Value: 4.0 (interval width is quadroupled).
Value of 2.0 is best for well-behaved SUTs, but value of 4.0 has been found
to decrease overall search time for worse-behaved SUT configurations,
contributing more to the overall set of different SUT configurations tested.</t>
</list></t>

</section>
</section>
<section anchor="example-mlrsearch-run"><name>Example MLRsearch Run</name>

<t>The following list describes a search from a real test run in CSIT
(using the default input values as above).</t>

<t><list style="symbols">
  <t>Initial phase, trial duration 1.0 second.</t>
</list></t>

<t>Measurement 1, intended load 18750000.0 pps (MTR),
measured loss ratio 0.7089514628479618 (valid upper bound for both NDR and PDR).</t>

<t>Measurement 2, intended load 5457160.071600716 pps (MRR),
measured loss ratio 0.018650817320118702 (new tightest upper bounds).</t>

<t>Measurement 3, intended load 5348832.933500009 pps (slightly less than MRR2
in preparation for first intermediate phase target interval width),
measured loss ratio 0.00964383362905351 (new tightest upper bounds).</t>

<t><list style="symbols">
  <t>First intermediate phase starts, trial duration still 1.0 seconds.</t>
</list></t>

<t>Measurement 4, intended load 4936605.579021453 pps (no lower bound,
performing external search downwards, for NDR),
measured loss ratio 0.0 (valid lower bound for both NDR and PDR).</t>

<t>Measurement 5, intended load 5138587.208637197 pps (bisecting for NDR),
measured loss ratio 0.0 (new tightest lower bounds).</t>

<t>Measurement 6, intended load 5242656.244044665 pps (bisecting),
measured loss ratio 0.013523745379347257 (new tightest upper bounds).</t>

<t><list style="symbols">
  <t>Both intervals are narrow enough.</t>
  <t>Second intermediate phase starts, trial duration 5.477225575051661 seconds.</t>
</list></t>

<t>Measurement 7, intended load 5190360.904111567 pps (initial bisect for NDR),
measured loss ratio 0.0023533920869969953 (NDR upper bound, PDR lower bound).</t>

<t>Measurement 8, intended load 5138587.208637197 pps (re-measuring NDR lower bound),
measured loss ratio 1.2080222912800403e-06 (new tightest NDR upper bound).</t>

<t><list style="symbols">
  <t>The two intervals have separate bounds from now on.</t>
</list></t>

<t>Measurement 9, intended load 4936605.381062318 pps (external NDR search down),
measured loss ratio 0.0 (new valid NDR lower bound).</t>

<t>Measurement 10, intended load 5036583.888432355 pps (NDR bisect),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>

<t>Measurement 11, intended load 5087329.903232804 pps (NDR bisect),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>

<t><list style="symbols">
  <t>NDR interval is narrow enough, PDR interval not ready yet.</t>
</list></t>

<t>Measurement 12, intended load 5242656.244044665 pps (re-measuring PDR upper bound),
measured loss ratio 0.0101174866190136 (still valid PDR upper bound).</t>

<t><list style="symbols">
  <t>Also PDR interval is narrow enough, with valid bounds for this duration.</t>
  <t>Final phase starts, trial duration 30.0 seconds.</t>
</list></t>

<t>Measurement 13, intended load 5112894.3238511775 pps (initial bisect for NDR),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>

<t>Measurement 14, intended load 5138587.208637197 (re-measuring NDR upper bound),
measured loss ratio 2.030389804256833e-06 (still valid PDR upper bound).</t>

<t><list style="symbols">
  <t>NDR interval is narrow enough, PDR interval not yet.</t>
</list></t>

<t>Measurement 15, intended load 5216443.04126728 pps (initial bisect for PDR),
measured loss ratio 0.005620871287975237 (new tightest PDR upper bound).</t>

<t>Measurement 16, intended load 5190360.904111567 (re-measuring PDR lower bound),
measured loss ratio 0.0027629971184465604 (still valid PDR lower bound).</t>

<t><list style="symbols">
  <t>PDR interval is also narrow enough.</t>
  <t>Returning bounds:</t>
  <t>NDR_LOWER = 5112894.3238511775 pps; NDR_UPPER = 5138587.208637197 pps;</t>
  <t>PDR_LOWER = 5190360.904111567 pps; PDR_UPPER = 5216443.04126728 pps.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>No requests of IANA.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>Benchmarking activities as described in this memo are limited to
technology characterization of a DUT/SUT using controlled stimuli in a
laboratory environment, with dedicated address space and the constraints
specified in the sections above.</t>

<t>The benchmarking network topology will be an independent test setup and
MUST NOT be connected to devices that may forward the test traffic into
a production network or misroute traffic to the test management network.</t>

<t>Further, benchmarking is performed on a &quot;black-box&quot; basis, relying
solely on measurements observable external to the DUT/SUT.</t>

<t>Special capabilities SHOULD NOT exist in the DUT/SUT specifically for
benchmarking purposes. Any implications for network security arising
from the DUT/SUT SHOULD be identical in the lab and in production
networks.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>Many thanks to Alec Hothan of OPNFV NFVbench project for thorough
review and numerous useful comments and suggestions.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>

&RFC2544;


    </references>

    <references title='Informative References'>

<reference anchor="FDio-CSIT-MLRsearch" target="https://s3-docs.fd.io/csit/rls2110/report/introduction/methodology_data_plane_throughput/methodology_data_plane_throughput.html#mlrsearch-tests">
  <front>
    <title>FD.io CSIT Test Methodology - MLRsearch</title>
    <author >
      <organization></organization>
    </author>
    <date year="2021" month="November"/>
  </front>
</reference>
<reference anchor="PyPI-MLRsearch" target="https://pypi.org/project/MLRsearch/0.4.0/">
  <front>
    <title>MLRsearch 0.4.0, Python Package Index</title>
    <author >
      <organization></organization>
    </author>
    <date year="2021" month="April"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAEBWJmIAA+19aZPbSJbYd/wKTHWMl9SSrCrWXRO9slpHj2xdW1XqjvXG
WgGSIAsjEOAAYJU4Dvu3+92ZCYCSumf2k90x0y0RQB4vX777GI/HUZM1eXod
v93mTbbJ0/hNWdfxTdJkZXybJtX8Pl6WVfwhmX9Om/juviq3q/vNtokHb9/c
1PTCMEpmsyp9+Nog0aKcF8kaJlpUybIZZ2mzHM/Wj6vxOq94mPHRNFokDbwy
PZpOx0cn46OLKMo21XXcVNu6mR4dXcErSZUm13G5qaPH1XX8U1rM79dJ9Tkr
VvGvJf/3Z1jkJvr8eB2/Lpq0KtJm/AJnjeZJcx1nxbKMonm5gFev4209Tup5
lkWb7DqGf36I50kBv6ZxUlXJLh5kyzjJ83iX1sMYAHGf1PfxfVqlURw35fwa
H8Af67JqqnRZX9MQi3SZAChqeEOf79b8GP8aJdvmvqyuo5j+Gct/Y1gavPF2
Ev/3sqibpGh2RfmYzf9mzxmCb5N5ln7e+1JZwbaeZ/UcYL+rm3Rd26OqxKNO
F1lTVvZjuk6y/Dpef+bx/uscP53My3X/8n6ZxB/KPPncWtQvVdJ8LluPvrIU
mfWh2uAX3qRRUVZrwJyHFOFz8+r59Oz09BoQAY7Ne/DqRVaOn9++vhsbHjI8
m6RapXDM902zqa8PD+uTMeBePVkuJll5OK+z5rDK6+nx8dFhlW7g2A6zoqnK
xXYO2FocrlM4mkWZl6vdJ8DG5NMmT4r0U2OI/+03JvfNOv/B4XWT1g1vXO7a
wasXsJYYVx/fwcP4rRsyHse2oQP6yO7E8fj4GH75sPvw+lub3uw22QSgf7ip
yr+k8+bQ3j88mpxOjg6D5djDmB6OYApYT0GXPlmlcIsW6ZfOYo5Oo2g8HsfJ
rG6qZN5E0d37F++v448bfCmG+5ZWdHXqlEBbw41KY7i9i90E3r3P6hgOZrtO
iyaGZW7KOq3j+X1SrFK6OP8uZ/8fo7jepPNsmc1htB0+2hA1ihzIY1m/dzaj
eLbDi5gVSBKSuEgf9a0kX5VV1tyvI7iTaVWlCxw0qXvpl3zjyB3RwxrubzOc
AGgArZNFVC5hZ/kOpwLAzbIiqXb66SNMBTtMxzVQULhiVUOvLWFqmDkvk8Uo
zprIYABrLR/SPE428FMCAyzwcjykFX7W3KdujE0JuAvXkn6FjTZZkkcbIFHp
KE6KBf5cyCrwdVw4gy72QDeD1xe4agIW/FGgmyMMKoLB4MObmyFMgK/PAXKw
lIQm0E/g30kOZBrmjxdb+ggWla3TSfS+SGGvtMLPKZ5Ina0KAEdWzBHUdTxL
YXELh/UxIMYaNrPO/iYbjpqyweHxqtjoOH24tbWeXneP8A3Q3UGa6HEk8byE
g683ZYF8IKYNzstivoVfiyYH9Mn4aHHxixLfgTOq079u4XGGiEhInMZAx4p4
XQJd4nX1bQc3z/jX4HCA5HmeEp7DLgAJ/7rNqhQvQh0jCiwQdd+9+iUevEub
R2Bq8attQXco/iWrmm2SZ3+jyYajKLgadblsHvGW8Zlma4AGDpvw/YOpcVQk
WjERrXoSf6xha5HdNUWm9MsGDhmYqx0e86w63mVpvsCxGsCtogTYppsUKAnQ
5QjPRH7KYUkzOIsUfgI4EzdcbFO6aHGO5CoutusZkAgYfwnkA8du7pMGqURU
bglQgPablM62IXKBTHzigTbJ1kQqksUC5qj5LYMusAyYqyYoxI/Ay2FEoJKN
XSNgXLI2gFxZpBVQmhLOksgUbwrAFqFAMEsBCQpaPmAw3AH4AcfQnWZ51iBG
IEFcZ4tFnkbR/7q+BoaG8P/fRDuf1fFjSqLF5ypZL8rHAocDpIOr3cTLqlzH
KMnggxF9IG/TrmT9KurIwDWBG0aB5TxkdYYQh10DCi+IuDDEaDDjhw3cDqQm
y7x8RI57mByeTk+mJydXR/Ti62VcwtYqOLoVXG7EX1gF0ChdKUynS7r+5tDT
o8vLs6vLI4DGoUEj+gH4XgWXnCh1L+NYl3DZeR0B/9jSS4tJF7x4GZdlDlPT
Za2RqcwAB3cEoyJNFwCQAeCSEq00r9NHFOWGMBqO8CR+VSFO1NnfgMnhvxHk
cPovcR0gRsZvkl1ajadwWPheyXflES4vkot5vkVaIiJOUuziX948ewe8eVXH
g0XZHP91FON/ksWQqJeN+ur5LXArQPn0i4xhz2Qw4B7JGg8Xv8tQqB3zElbJ
Bi5EmtRbPG44+tkOKB1sc96kTT2cyL5EfJeN4YfA7Za2WZgdQA0EtlrzYfMc
zIwRhDrOi/QhA5LwEdGLRZfBi493QxS0HfEpmGjBNkbxwYK+OACgwykgwZMd
Kd2KN1nKRMa+b5L6MyyB2SYvHI5yDhcchpzEt1tkiTSsjAVnDfsHYl8s9DvB
HB0SEAUoPV2YQY3fw/aBtCArAWDXJJvKYJ8R7jmy9gYHRtwBmsxXCzC/2hYy
eU0zIaVK8poeFMqvRPqlNbipmSffJ9XikSWhutxWOA7+rYbfkfAD7FIgrHge
k/iViembbcXCAVJjgDsBl5DvHmR6ZSw2NjHH7uYdvJBfwHQHvPV4SweKAx/E
g1s40QlSK/iDcq8NSBzKCWhKGYp4Msy+3cQATpLQhWc83mcAZ6Gda8VQYGyO
17C0Vo90rEAk3OJuaQWOD7tPAesmio1u8TIQ4aRODXKXCviIHCgRJSCs7Go6
LFy+sqct/QTrbtJZ+cU2OL8vMuD6NV/RcJFwEPPPxIJmOWAqfKanozeG9Z7g
xtzSjbltQ54fIMATH9yyDj5nD9zwA/AGH+hZLZxgpkox0Ekii4gBedr0HBrQ
9AYEmFqQFeeFjfaOnWb0SpKTCC9DwUhAH7L6HhkE0Fa8LglItnPjsjNfQ2dQ
K2x+ysYLoJ1E3VG+c/IaqUyoqj+U+YMKdPUhUSwgXErjC1kFU68qKep11hDy
w6gpSCSxjQ87fECeBv/a0fBK5ED2QHyVkeAIDgm3hGLiVIinVTbne2qYDNBx
o/PVZoyTkVi5hBeB1CSrVZWukLmhLEOr9RYGnx6iSpEC9OGdXGGL75LEanPa
R6h4MIucJ3hPZi1ImsYZiwQh0s6g3q15N0NSPIhjhMvRw/lY/KNOpyyAB6Pw
5IErm6QTxSg7ONhv59xGdG6KbftO7/vPzbjzQtRROSVSILpwDvmnZ/66IUV4
nXzJ1tu1silfp0MSdYj0C0YGMrzQ80CmIUK28ED4QMb31E5SufiYUZLgYyaJ
M7F7vAAhtUBZnIdz/Fz5JRNcWcgk/jPJ86LeKc0NdKT47cfbOyQhf92WjfJS
Y9XeBIDUclQ4hQymOwYdTW+/gBSJJbGzXkwdfX1NoGtv8wXT8u+8UxMZypeM
BE3HcHFBEwfCB9LgZsNWPUbd4NESHilnQgXtIcmR4gtOGQkDRHrMFjB5BzeS
mIdCSwB/hVx3vs0TwjcU97+6bWZHSIHhk+t49viJfv4x3nxu+I9PYJW48E90
JP8s47w5/oRX5j5FOfNJfInkHLDS/51AZuInS65p7aTMwaVeXRYj+8TOeHA8
1edfOVql0Aan33u6ivPujOOXXzYVYzmSsax1trONk39RwQCujRoVKgLMxWGa
jGS8bIE6/RzXXKrF0TvPpzL1O7hnL6pyQ+cLuvmLm2GbAhx+ZZ/bGjmtUSB3
MWNQeuG2I5bBEv6WVnD76d9CVdAQM3S3ENUvooDKJuxWDvAkvnqDN04P+H1X
WAgV7N1RSyP0fTcMLxfeJA8D8OPUOzoFyDcPMFuKGjeClcvFaEgqXyefUzzM
eZ4maCxAfFfRU61CbANyrNUeDIqyGCPAh7GzeRkJuYY9V2jx8c/+w286e1V5
FAN6zh6wPUG1twGVS1BAVxWgQVt7MmT4HWigY3WR4XvRAMAgg6y/QWh70ODD
70SD6/gGrba49Vc3b9+/UQXBaL6cyo2IEnxib2/wxDonRVcTKU21yNGCBKIE
HMfXDowFdse6dbo7lWJkvrubYXAtWChQCQEGBLFniYexSgtURMuq/9A82td/
jdHYeHfz7RMMTyo4RwDOd59gh6Djx+lvo8R/AcCCop1uhMkdsOXYW9qBEt07
fELMFF7MAzQE7SvdTOLbNPUUQzEWxdOTYEbRWsz2A8s015I3kZmXYcZ1uS1Y
CcvQ1oPaA+u0Ah2SH1V2deRYjI79iw2sYL4BK7COKZ6T6sYGabjlX0Qn9gQN
toymTDA8ez2iGm7/NYuM82SToQH9TsjnIYyz3OZPYaIXSILgjABVrgF2rCqw
14SVE9iOmvdWaVVljTjSqsM5O9P++fDk7Oz0DBctCP2zInQ8uPuZZQd99Aw1
b1gtPHk2pAkjZz5EuzR6kj6n1QT9w+TAAlX7EP1ph9Vyfn55dfqDHPD4FL5k
ML1NdmyNrUhPBQIKTCDPYBY4Ytzkezg7dkSR1RjP85o2SicLV7YB9kHK8xJN
9/iq2ORZlK9FaEeX732aVSgozbMa0WxVJjnIr+aRIbGOjoNQunbXCgj9Ci4n
DoJAh5uxzFa+M0PpAcjuyyxPJ4YGrQe4I/Rrk7ELl3f9/RCcTi/PDIInk7PJ
MYLH01r+nrGmMJZSw0ATGgCV/u2n3Rn/BMZ/xcoU2RLIWNwYFw6nJNYw/Dvm
O6f9MFUgvew50gPGG89zwTpvSAbWWbGt+19UEj2J36F4i/xpTnQmq83MiCQ2
nawmbKxiIk5eBrSf1uVaNL16Eq6P9MZroQDdGdE/yRMintMzxGe3cCZxdC0C
UoiEpE+8b9kD2Bzp5HZeB5saRenBjZm3MXz7axD1DTpM1pbeMonsGQwLgSp6
VGt0TZf5FoYH5W3rlFu0cFP4BvMgso5lZOYijiuMAcF7myxTuReohdMwcNvR
gky+qg7fQoQk5QL5ZV4+phXiYOZfV4IJOh/nVb6LQd5b5MyySYe9+5kJ5rNR
SyxBPJil98lDBpICHknFvkhyVZqp+nOBbqVHWhsZfWT98HzC11PuB3FF4CwA
7KfDa763sJVwpWxOJIeAyBFMQnH+IPIG5K81sI15hmokc0kGOSwLLTFpgbjC
MF9tEzjbJpVTqZ3eBzCw7Yt1Bs5lhrQwRnP8faIWzsTtjM2yKPuzvE9AZzna
ewsNlbBBksWRayYL3CQ+bsi5cSusr97OVIKA/20LXQHbTJEpbOiYZym6uJAF
4WF76PXuPaHYfba612UAIRoJUAAp03xpb+J9aL0rxIwdUTe84O8nYYC2RsKm
R3jgwL8Zf9+iS/0/54RxA3uO2N1T/5KoxR3PGEbJ6Fa/RJIHbLGGKSqCednl
23rKdSJyLiwpT2jhcEHwcDHwaoeq4lq2LvPX9+Ujok/Jy1VpiXDrfyDDFsKz
YY8jCq5kiqf1ucFo0wDYl2zkfkg9uetawwrmiM0MHpQfHZ2i12DCORrYyf2b
PJQZGhyRw6NCCivI+LKnX+4zFKVxiyC8kqAcDELEKiu8hyD1iduKNDZjjJ0l
IOn3JRMzEFt4BQoleS7iT71Gd5Gg6ICNQeKpHLJQZHJqWbDkQgFJLdh4EioD
J2E3QUJCG4eXqEjr0PDO/oYbQwmN8BEOsRGkkzuP69pu8Pxm6Aok2TXAduQ/
dSmUO1RpFQg8En1P5EZ3jqZ4NM8QywxhOWpPzB+iwQ+IM8c6VJ2vlKuyGAp7
QfriDcLsNO3BMj1eceP2rIg3kwTjmU7QmdTb8lcmlXvHtIrOPCnaXDicPBgX
aTRQYMAo5FIMk2CUNr448fe2FbTlnnwIxHD3+wtS8gDhDgLn0wrDQg/cax8J
OgnBxpbqHv9CF5+RnYkAvfDUXqDgUnjirKP4F1KKn2pMw1u0LMIC371+fvjh
+WunNh9uNsAaszVe8C7ncto1xnyki2wL245+YLnfgnkCX2Q3IOK1c5yC9kcg
SGborwb9A8Ou8Ac0Mi3ShoIxMvRm0pe4IVBVFhiTc7BK4NnqAG9TWS3Y8IJn
NUsbtFh56qiQdTYRSJQqDiWxoRZbhfqTWHBwYbIqicTByBvgcxpREyjGdxTm
JiDoQEAcoKAmPQALQYmRPlxI9NMSI26fxOWm0dAyL57PjIEdRKwRoUsQDkfw
cb0BBRo/3W4IbXs4FL6WrXERRraU3QVbY48hiJ7AKi186F1prl+1Q6N9WokY
c+sSpdpUBKYAAr1RMT6E1slOXb7AX5I1BeCJpx5+rpIFEC2b2g9MM7yot6sV
ClPmZbnDyy7iJ+reIItXyYqpKhnvO3dQgmFLoAjlRhBRhfCmJYPvNZL8oO/A
H3/wsZCBHkXMCNnUQZEb6KtuUotEDMLuHMAjNklpyF7j4pTiARpIVDz0ApiG
Egrooo8sZMk7SBR24K9EKJDuurA2d3pPfr+sFyutMebPAsvtn99/fPOCTgdp
DKO3o7v3aVml5PxAkUAkhkodLy23oqhtSJCSv2e1JzDXGyA3vNREYMXYTWF2
5vruyI5IXDIJuVnrhk2YE1FCUNtJPj3CpwnvYcSJr04y/RzhoI0gOa4X5ACY
t9kx/6KfUQIDgqYgc0a7QGlARwUvxFR8p7lx1IReagqUzs304+viYhtEYXgL
ZKnCy4zkZAX//XsO5dRHoQO4NMDV02LVyCHUB/DXhGWvklYYGCKRy8MAFFfF
Max4vzFK2oQf3QQGQuFFYTMs6mnASNabhnWHA4n95YsqK8DwMKal5NmGkdKD
7gEiM6mFmxz0hSQfsN+fo0bh8wNhBkrIfTp+8PfA8nxyrAK6jvD4+DiB98ac
fUHfpxUsKzlMs8XpdIq6Cy55FxOZqkP6FIrFDgqiGc/KLEdAcEjpgSgFaUvZ
227KwjNOEq5HsQRy7//CHFHuqwPmVaBFZ2IOQsUNAJQVotZt8mTuDD00GKi+
EtMRSXA6G2wLu8kSbpl+QXUeI7M5AsQZw+wb0TY7t1slAFAKszVPjRSvFvcL
nUgbAqTQ9KHLUEhSH7J/MwBV+UQ7EFUYEm9AAk+BgbHRPAdcXBgHY6czsSxR
TzpszkW5Edaw7zw+MOARWY8V/pRUogHw5k2yl2U1X0UfhpBGTQOY6uVO+aUN
ZMLC19AqGAkhs280zjzhIIYWEOwdBPNBn0EQD/tANkbUAkNT+T5RXI0NQDAW
aKaonrowDfXnsNiyh6GwGoj2ruxzymkqiDrVlozUaAQjXdpAswSSSo/EHAHP
ZJkuvn1OavG8rDYlcTeTUtFekBKLsQ2I2J0gC2Od2i4Lp0/k2YpiHEiIRyBr
rCm8x8GvA2ZJSzJjKFwIUl2xWNkWH1rGxt1Y+Blx5+CpAVyDYmV0lj2R8zKe
irLcnk0jtJn3/RmAiZHzKHkDshNKJXVdzrPE3KYkWaEsjWaVpPKw6WlLjvwh
vuUUgVkmd5akOQYdCiPl7CErtzVLv/xqO5HIydAYllBHxCHbV9Un6Nc60iz7
i4aaRa/RAnKtuzcnE8aWd61T8P4H5QLXUXQ8iZ9T1KYzexECIv6TnA4vAMXm
6Bcnh/i3xZlX7aMpJoikvo+RQB0IOYHyPLVlqPzpSCj+JHYfYf9o9PY1XRUu
UdvlJX/gGFTEwM69GwhR9EUVR7rZM2RmD9wK+w34YFtMgEGANvdmWxVu9Ynv
b6VxThgk/hs+NDyTyySCd29I5wNJrclydq7K1Z2ndgF9o1PblpTRxWiboVQE
27QsIAw02KeTK1nit53tObmejQLAXgKJupYDRWXI33BCiI+qQ5yg8LQicbvX
Eqdw+7sOky60nebppMcLRDRSznZkpmQngCS17OIxWNkZb7T/A9UD29s5n8T/
bbsG7RVkQj0N1u9xsSdwO58VElOt2QOk7QYcy5kQAhs3EM9lUo0ijjd32jWq
BMBZkj7yP9LF0giUoigjouYLqlTUxRccl0IxEgC7JJjBGYYvjVpCkcpufYiM
lwIfKw0CKPx6n+WSwuSopbDZZA5kuKR8HtIWuuaYqMccc+Dbq2m3rJeXa87m
Yd/McBTxHWCr4zqj7BHHQcVEQ7jHxBu98473Rp4nYqe2rp6zwmgZzH7N5ilZ
6IAmw1kDC0DGctMx+Dz3DT5RpLaBRZkKO2XrCp8aYVNH5Bv5gqeJlrN0nmio
N90hSQkh36yFv3CgAwoIPg8kcQQFHUIGZHnepOLzZAebWBHUYpguonvgxWrX
ykVSNcfQAJ+KPMSnwdIEfwCn3jXbwMZToh4qpvJgOaf3sbTSRuMEk+NoA7T7
rKplDSg2vKAgaUnM9Z2oI+8amY1KDVSIoeyXjDFflTIsyXTpvuG1G4hA/kof
0oL1FLYhubjSWwmzCQ0Co4gArkdXks8KE9TsZtWSj5lVHZEjYmnNrcc4km2d
715oddSrxxmTzIP5DUuL5InqlJEdsRz2Ft54XVdowIzreVoAXyjJzoheOspx
gaHnABxcLVzUNbmqACfgbGdZQiORlCVB3O2jgH14CZ9GQuzGCFG8T/ONSn7t
PW/4Tk5aSec3L5+/f/v25bsXt951S5yaigdyAHQCkADO/kCyKjDtlWGCdBrO
rWIDflKLLaZnASLamOUpCuRYxrOn8TNhoyRnwpSLpFpQrhnR3adR9MqUyz6I
5Cnw4ZpvyrICOQ/ug5oNOvhN14xkHuF34UEKxEBRz1f35GKTrFjniJOESkqI
FWrgeY8wId4W+U9wdR/T5DNRCJxljV/UPSr0B+aVO3ZElfmCfRWPSNbh1jSc
J7fJd8ys6ya1/HcMy3IJSyPVszCzphWu5Q/Hmci+awM9yz2EXhSQXymOVjPr
aHF4XIx48No4RXtdRgF/rQMSBa0oH5NFsqv70cTXbfmmyjrLR9PvYLVd9Iip
AkFAVj2XDOtmdRwwNT/uoE+YDNSkjrGDXWhAGXe8+w+Gkl7SMb/1rhwzA09X
JKlUsHhATv0rPtvJ3/zP7hBnOPYO97EBtMIDMnOUp4ya9KseQHVjc4oMkqyn
fIA/lc67wLGztm6RkH2eZDJFRnDjMwtWT4MiU2s4H6uHPZE8AvzvuyD6FiPZ
USpmmYnO7IHi2ixdecSMcJGiE8hZkG51Fx5Kqd0j5ZWwN+J4ejqlrXsuJoAr
OSNj5Njq+nNUg+8Xoruo+d6FgSs3J8isHTHT0B4SB+7xRgmyYUqx5O2yYkhx
kNWaGVFW6Hk1fW4jz7pmAiDsoe6adx5TkICWlOvt+TZpA/LyTxJr0HGA8i5p
gm4qiIR/yG2ixDaLdSFauCRvYCiKij7hkFyirzgWWSKjXwchgBQZUlUokRJP
YiEInpKsj2Y0FqrIdqQsx8dLphWNkPa6Yc8TG+MWbbelivZ8tmSY2OFxkKKk
0CbRAn6kFDzSRyVEGsQ8L0U3/QLCMBx5/iDBITFb+3j/rEpIAInGrcwkSMLG
sw9Y6sNv5NQ+VFx8gXzZhUzW4YQDs+TgzXQXHP5CKhkv6zFjHAHkVYR3+Esz
o+s73R10zr/+xk2Gy/jyC7CmmspH9NiGm8cyrGpgYrxf+MIIPqx55wQedhR5
25KSKvP7ErPSjSD8EL+gcE0NYQCOG4S81M6khvH78Na1fuEr5qhCcTR7ry8u
tvI2WhdjwZE8zBhhP/RnpKyWWInaQCE6M1ozhPepZ5RGfSneaQ7PfwNsrZjv
fr87Zqp31mLzF52t8kXkyDtnT/jdU554U1KoJmeqduetJz0n8brovmj1TmrK
u4ULcKDnavq7SG4HfDbwMRUlGFhK+bDH9sKHxJ4KPUQrIOS7O+PAgY0KHpqS
H8ROPqTXOYzLSXm9TlhmAFTtZX6fpQ+S2+qmlzUJbSwkSSY3pphQrQOTUzkG
lKXsbcFBsK2F6GmojjtegLhGVxSG1T2OPHEt1kIRzi6MQyy0ZMuqnTikuA5K
jsgxv6ZipC52MprRKHRRc2mq9lp43TDvgThseKz3S7RRVljaiWLAQyeZJ5G3
XIWsUBsgMZE4FDRHboPe+gjVa1bJPNuXuS+C6C4iAYE1kTkPavLOddt1n8dt
n4/LPAnX6BG1t5LUzcY1El4lmr17iW6JTd09/8Dh5BxoQII1nMYcWTap7NnS
D6snggz3v+m9liGbXlKUt4mhDSmEvk7Oeb+0SrNdcqQrxX+5T9m9GWZ6cESC
SE55ijXBvH20nAEKHwmaQ28g+hlBmtn7TKbr+EPeAQGjkFiJ4nTpBQDk76aH
KGZ6+RTHFxELPEEGUyIE/s6LV9XEDjbLFaUrIKYpHpa+ENNhLaoSMNQiJ7g8
C4DESqBl6InayVS3GVJiOngVzOj2FhrqgkEJfNWxUFbdYFY0IQ2baTx7EMrg
qMo9oqGFmWGSNVqPDEcPDg+OtSnnZU40nLPKto3vN3PBSkjCNDgG7f0KG1wS
fVAlvl+YtyyYvUEJpqVcMzlytlg00LBlVJ2UZDLGW2Cr5JWZzo/uoRlaeUXN
TheTSeCWe7aQxOo8Kz5TSb+0ynfXQQRE1mwnwEAOgbUdUp2+rPi02c4mSb15
mifF6sf0v2SLH+/GNy+fj/9tcnx2ejyeHh0fH0/Hr//whw8vXo1f/pdmt0l/
zKyYJM+N0USqdIglEECjpp4R/3Z89D/HJwjd0yf4x3NZPWwD6Q0b6+2IyIeB
XgGsvGCgQPMx1bZgWLEcjMynRyvVGEtVuiVFED30QHw2ZDCdgAoNwGy2BVX+
kCQaeyyCv1foQZdkhJjhTIHjyrCQ4IGcuQAUshRRqo6EjHgjUYpEfVGbVoHI
xauHNvc0Hni0lvKk2+YEC03cFhnKI+ym2GgROMJFj8S8Sx+BuflGlIN4oLRv
6TK8YGsruJG11VYCFkyjVHOQJ8ZADcawsHF9jzkVaMDCVJ86rTCPSUshDdEW
JokyGlLPNpUo90zXfQYYDdukKOEZxnM69qQVLDOtakdOWpFSRnErAbwO6luR
1WigmxtGjCU1CgCanyWb0BJR5DCdS33BXfz+VpM1KvQr4mkmovNS/NuOZbRq
u8HIRuDJ8PFnrjnpVdm6R5dArVVcFpHl/frVtmCbaOCjuGbxqo9aUbcWZ1tb
oUouVWchtT3ACKIgQ8jQzcUyW6UT+6T8Vfz8/d2tAAdASEv6cnk+ip89Awp1
fkohzxVXco1vYSf4Mxw10FCYbIjhv+2yDLwtxnhYVzvh3gWjYxAHCLDsH/nG
KH2p+zoSuvmB7ldeicWRzyp6o+EBz9gEL46obI/5kNV9v7Alqe0asdQKj1+V
5YLK94pbht4NP6dyjRYppPvquuWKETNByqjDD3uylLvDoxmaHfHd8P+vGOt7
DNot/2EXBmTyDs7QhbV1Jw/n7njn8Ip5sSX7RxJ7kVvc3gOqeqzhv4rv97F0
Yn9n4wPxXtLfnv4pnmdc7lPUAabVlJ9MOaAoGxhMAhVswfasAyo7+4WS5Vxi
ueiTfMYsOKBmw3I7maj80uAseG2RAcKGNM/AQryd2UAsbMNJO7b7FvM2Sa8B
4lO3kQFdtbV5qHyrIb2OlOOefSuaUwFMTKIUhlFf0L7srMKy1MRqQJ92MXTk
b+iLT+fYQQyDRAqO50MmMLX9DDtoTJFRWjyCw4s8REI/JpUEXc/ohuYcMsIw
IJOJmS86Rq95ntRY3ZAfo2Q156UuMYq9x/2Ci3uTNQ1bG4uyR9KjWGzPVMNx
/151P1oohwUgUSfgBxr9DK8Lwg7kL9AyO8b8rqNlFJFRs5srQT+3EyacI80c
dSJLo2MK2NG2DsLAwpK4ajMbRbQiKuvLmpgU9GWlomsj9v3ITzmGDEOdvdrH
FDL9G7Sldiy2euwtxp3sI6R3Cq1nH7OGWFt4BlFbrj2g5XS5iKXklUhgtO6H
46IBku85yk1l0G1fcpSFQ0o4UrhdLZRL2aQSjSJFqfcNpykG3SUFbt81hS1Y
fR8MIBi3bJRJ/oiaGBO9aECpGx1Dl/mHa7bxoUV721A8hLcbuBivg5tKOTIJ
4euiVDOTfMSTcBSz/KQ5o2ww8W39T4cSzEz0mC3Y2KDAbsAkemYh1VwzTyzp
Yd6rV5anff42ECIl18ehyjBJDWNyFBJMzRfHrBrvg1tIohyBqhdXLAwF3Vxk
cYIrcrBnHQdx8JbEtDFSSBFrYC0utlcyN2W3gbvSWVW4VHLGZTNckF+EqY23
5C+mwPsOGWHMlqJBqG1vJZ6KBCHH94SceeYncxeRrc+Ld7klZ9GyVZUi8O9E
We3rIEk8S1qTIWL59jgKUlyiw11OnywZrIRV5WxbN+OmHKNU0IzJnqeV4tFa
lLAGIfdwEt0is+4uEdCZAcFSmUSFMCT00kq0m5qE2uptFGnW/MGHcoPkVSjT
fnmoPrC4eNKo2jJptxCQBogTeyOzCxNuqUIPyAOnQmUcqnQradCoOt5XVDFR
S/R6JW2AXj/zZcX9cu++faR4pOwHy9YZshXmzG5M7zQ5xofkPl5zKTFC8I0F
2pOnUv7c3LfC5SMlkwXWAOpCaKulIZk5ZrXkRrbTzoWNd4VU338nY2iuOUcG
i5g+jJ4Vu67kQWzGhdV3QxjQzweYz3wBySq8Fu0FLpaDTKv7ZCP3mG0s63Jh
p1+TrooJJrWXFmD57G1UlwLmlLKiRrOs427tSwZtRRjUrgId34rn1jBA3tLM
jWd7fWaGzxgyNG8kYc2P+FWcBDbZ1bPYLUNJHm1GmpgG2f4oakdMTmI1XoTJ
ciA0R66SRrJ4AHEKRGYMfg8hxKUBWsA5kERZvpOmax3gxUwP9oOCpEyOeQWw
vrQguqSLakhKt0izQ3FMQ94tdCticX4JYnctoX8mOfup6sWiFd3KWjaLhWSn
aFItiEDxDpYz0ZMm3BmMwwjFX0v265nUk1PTEtoRt7OG+xPUE0/kIVN3R0HQ
3I0eZdGVK2chScQUq8ugWR+YKINS+YFveMbPyCLO34ryJGdFf2UWWfjjmI/r
kSp4UmqB6mRwXdOc6QGyO19eFmPqbLsaY5haX5cKx+p1utpiE7CUUFlJduGj
RCJjtYXZ1uKgyMpkOYlx5wXVAF1GoplTE49Mm55DZCQYhKCYLA7sO8BY4s+Z
auwiaXJAd0KVi76r+BuQlTcBLsf3KYh7iOeSgoKS1nyL/vtnFJQkdh8MKvBf
DRWIVGtiaW8Qn8fXJGDAKsUfaVIn3UMvVKOVH0e3BcvNY2oz24grLoiuyVQU
TceKcVfrjloBKmo72hNdzsJob4ZBZFUBSKLjcJKBKzrhFV0Og7OGJoFwUcmW
fujKAeFVRPvhx4LuSb0BgZJKKt3g/LrqsAoErBDf+MgkKG8VkuDb0fpitXWG
13u6G8gkEBdbKBvkFRKLtKxKCcHEr5TC+qi7pnJ5vAvW4yYCAikXCIg0zoFM
qdVbvFKoS+Y5arskDe6pmqV590EkE1sEeM4l8IS08tGgRtUgwUSgEk0vEaFL
kP3aqjvgZdWPIjTYcLgS8P7tXE8CHXEyetKYvrVQl7QGFVEzCb8ckZO9nUK3
z/bjczlK7QxtRkPN4Eh3ob9NAGrHj2i9rYHRUgl9tl+KFBbp2gKqyHGnarbj
QPnCCzcPrG1+5ZQA10Ue9Epe0UjUlgz4ZlOuRUOrKbPBaabwvVcYwpIYVP3H
AqnwdUlyyj0TlcSr8IZ3LJtnTXDGaHMFOFGp9mRBDYj4Jbq2GIQknH2Q9KZG
e0a2ER0G/uzMi9FNqxqIMxGqo9LrIpT2rzEiOue3JmqXIOnzuj7LGw6hJrxG
WXurMcJDNZlxCBjlzbedZc5tzzfmFrOInov60y4zoxyn9CNfnvYsij9DgTGn
QkpqPWOpR5HOgqznHK2xZAU76AzRVJJeQdyzKNeJiGea1djezQ2VVHMON7QQ
vtSUiCj6KaiCZzX7EqElXC9Py2zlu4h7ArTyi+uWkURtIu8LHBq55mgfl7HS
msSFcRVaHxN/iHQ9RDoDAyT98jR+4YaUqAJxAiEJkPwZFqxwS5H0xGrCcg5Z
2o6O58xgqqlzHR9bwwFGxuOjtyPiuf9Uw5+fPBlfoA8ZZpjvxMfNJXiuqfqT
CPyj+O4m/cLao4ptB6jGpdWBegdHXIVD+5/BtXnkKKhKuZ7cozW7RLgwLukK
GBfkWlqQE1UqerCfl+MqJOYOG2taGjRnjrtiESw5k9dv8a3SmzFRIT5WlxKE
rjaqrYH18qWA5VAc3hg0kjJP0bKaraJDvqWsdU47dpDC9xyxnQDxsTwcSkvz
y8R4GbaYncXuCa1hRquZRD+1/Ttvn/1bnGdiQghzfLgvl2+7FqG/HbBKFRMo
bxR51hy0lnSo5N+zn3WpxP2+llpfpYIq4JsmKQyPpEmKNBRXhqCHTz67EVeU
zOorTGJ8Djz1XEGyrdJghhGuu96iyosl1tViIwn6lnyMKPfhw61W5MJOea+f
9wZmAk2ieCMKUBCEp40hENWJRkJqHZiBLN6C7L68pr7hf6a7QwaYlHwXPAXL
sjIvys2sgJrZX2NNybwCwtuoVQlgn1UkTPyVbD9JVGl8v3RAYftWbjkXeLMb
bsso54AL4pv+Tnq+HMzv0/lntiVwhJOr0YIpcAcksf1znYNK8M+47wOL9rKS
nLX4CK2xoBXqvk+VjHhXVeNXEcJSrvnQIKpUaSBsxx6QAcw762GbPNzaKgYk
30pIqjbuoEdD5+mw2wQXx142ycLX5/rvFuogL5i7qn5GTD+sNMS9zdJaJHhE
aSuFiirJK6miqK0YCbusVqqQoifxc+ayzN13qk34lYpaBIn5G4/sTbhP/lCx
5erojxwnmi+pW65WhAThKOww+E032uX0+MrcaFeT6eTYyw0htSTj4wR0efHu
1vVSw2Rt+R37hGRBFwe7vcjqspoJUp6ieYx6QT+N9icEcN6CON/EI5lxgc2f
3v76M/YPzTklEluAeRZPLBSEMSvB+iXuWciH0mhnIEvq2MXhI7sBLUZaR2JI
YSbtCbWQfaupmyRschWTdWYpoZ68Jzf/NXp1pW8LSoRE9QZF6SKyBbKc+lob
Cx4ajbbv4ULy59qxAyZeJa4gsKGFGVvE9clg0hKgcOW1TMhPUhGYZiCSOEu5
xCia81jXUXlPK+Df/Swx0utkxeExMPWAuGm7eD3CbagVfSUNiIQ5/N7JqFi5
Ze0TFywaWLIagLfTsclNUqsNP7gD+IOrpk/HhWe6lmLN1lvE1dTUbL5EfFbk
t5SCspiDIaYZMvfv3ADEkJFbjAWcs21VMx80szJ7tghBJezVmhXSyzQQkxMe
hBJktTZEm/2sk4b8VRoYNJw4PEeEBRpMCTqa2u+6LtSWzD9g8xRxRzKXspKC
n2036GrlGF/aEAIAYec6Y1HGmukRXUXlh/gX1CyoxYxGmHcu9uuC9eVHNoJR
QXNYHOdt1Z8z4ddogvIMEhaMmeQOCTBOA+BNuj158XxY6g4lF0B73JAFXxyD
5OKFA9/pYgB0FHqjheadQ6cj40atko+1pJ2iAojmKY5LRPbKRx/hsfzu4n+k
dOPhNCrE8+64IBzF13USRjRbEDOWF0GzE264gUYMcrF2v4XNgn6GGs7IRTmT
nzhrQsOMb7TiJSn4eZ2jiMoHi52CP1NpjdBpoJ6rTG/FMDIevcd9R8IInMht
idVUKLGc+xhL22Fi9lrZyw6zW7qGAgvg2jBgkNJTzraqSUgXgKJRbWIKalP1
OKt7QCZpUNp4ACVMD9eEo2A8vKuVuWdhk98bBHN8FHmhpZJaYZlUrAfWVhoJ
6MOOeAAb3aSpjtolsHm6ZZmsHZa3xCZryYohCRkFnlAdA4qfwfZvO8UHpONb
yhRsVfAafBQntCl2JiKxmwQ1bM5X8oICxIXKDDEKym0DooJWX7OQ7IUkDHuq
h5DTiLONNH5OtLyQCFh6f/oFI83N2oUrqaQUxN4DrSPzJSIeJLXkpfa92h//
1rNeqaGCQSiycqqHJQU4w4Dj248///zy9u7Wz3LyvNElVTmRUbG0BmFvkSLZ
x158VnT9oUXe+xd78/JfP76+eXlLA9pltI4cdr98+oTh2F5tREwmsjm+MsWI
5ugDvDnwKVsj1Up/fYC3/h92SmEXjD5p/A9/+MO3Es8p79ys3VmhkcjaiHyC
g1guOov3P2F8lXj9pIUFvzH4M4oUQVFGid9yMSZB+YNlItYcVKzlOxdFqrFf
ZWGfTzjudfAuCN1bXwPKVmuQDijGICsXIJWhqpnn9QH9tHRxGNwOhYJDJxO8
biRZZitlxU4zkdyW+6yZzNbp5H57+H+AWMzr9HCznSn9rA9fPn+OySwX45/G
b8egfJyfjoELZmjz3Sy4AS0G1GxQXLpkn4fzuJOMXoLor/W42ywcz/CdKDFS
cQAzqTFSaGEh6lSaIX44mspx/eClEf8EhHlFkolaNd/nCzW7jzzTj19+mqO7
vHqXAxLC32oEhdfRVKYZ2IzW65hMmZ16eZG70zUgQaL5dqHrnzUWUL6DyrMR
rzbLg5ewLZ7LmpZchdqFe3RWErES7bf0kuA3tmWqIaVdfDAhjxvI/020p7Or
8zJL3Bo3eOXY06BjoZXsm6Xi0uYLKnk/Ow6O9IMlkeu7MiToP6G+7trJLP2S
zrd8puxmYohR8W8hWN3ahV5aLGdWCfQcYKSnIIGEeiNLpzUtZSkeCykyiZa5
AqmxVhuyfnqzXWTd3IIDI/deWrv1y3bIqbitSDAhL2C+k1yhPeWHLf+E6lhj
ylCTbmrJYiVlzmJSo6C0LHr3tiyLSUCNrbqvfCxH2USe6dIP2Gz5w1u7IkTw
jidOggMKgKfB61aJIiiQodNjzFXv1SFGa0XMRhRHwJjHJEMwmQq8xNJPfk1g
IvvhkjRTOnsPbQK4oTX11S8633VfI1WrIfPjEbmx9/TctNf+5Yg7m1MOUacV
gppAag996EtsPUrDw383SVaF9cLRH+ybhzXtrXMZXLglFbIKT8O7imh2t2Ya
4jyrD19YiCp2/pxvqwcNSqsjDjW3eAt6C4gyWwy9BmfU58XzKCV19NWZklmB
BpzcTUlVuFk5xpgvUraFkVp+u1orVHDwL2PO+QvdNpb4FVV1WGohc1HUBEsk
oRZtQlVVVhQENPL7bGiRfrs4S5a9slqGRd2GvlXPaUoaDRGWctuMy+XY9AQT
7cKqurOU8xOFtFKWe6vhOa4o7HnmIzgVAxPa3d/T2gMWm2IxC1NCxdRUsJJ8
uKjVv3oU9klzVmPgNNv1ht65jryei367tL7eokEPNXxDGqaD1HGfeP1khAUy
YyvE+2e92COu/MM6IAgjUsHSb7yHnnrtMU8d1HiebmohdqVM5ugE9vvZdPvR
46RB4m17rSQtcldWsTbvPWou0CchwQ2VNfUAyppjZqWgJRbXNakLqx+Te0Zj
Y1CQ0U135zdCWaQN6n9hGr942SVBk9g3an6RVWPkjVJwCFwEFvFQKI+lvFLd
cn/TDyi+cL6FC3estdTHwMKI9F0yZG7ENSpaius5iqWtcnXwjudw27CsASZs
b0FanYSCJGYTPGTpI4cwYXyOn6TsF4YjFA7IZeICnBJKCSVhaLy5x9PgPxNu
tsUSFMaxLSYHtX2g160uHQlL64yNxtqp0wKvuh2nuL+miQc0Ws3ZyBQfUqIl
szYJh3l/S87hcV7RI14Oc/i0Dnkj1kCt/K4K/mjs0O4ZsS1UURUEWQ5cbs9n
S6V4WFWxrlzEyVkOO5ocEWmA/x6dsdTBY2sRA49jWg/fV33Cjjx7G8b3mjLf
Ohw+L3mZWgiTNKlRid2x7eUFve15L611mAGwIg3VO0FCH+p/qKJ1zwHzklpt
gGVXtxQ/Jg3X+paohGn/5DzQc2Wtq7RkekF+e0UphwB9ELhD2xkZk9F8SjXJ
97Y30ZWrV3YUkuk2ZeBWxnC7F7rSvgZ3dfdFfJXrSmS+EEndS/wPKSxDVeu+
znXaWDru7T+GatBD6rIkvAh2DYObodWL7raNpBIE1TJLpKaRs1n2NjoTy4lB
2EwN5CcJg6pDhhCY7cgFo9cucNGBYFJlaR2IONp6eOYasrW72Tlw7z8Zkd84
28HNzdSTzKgoS2FWaTd8nROH/K56bt4nEnymSPWaouLVRNIdKwuChimGW9fz
eunXFGonBCZUarG3V6QL8wuq1cXE3HdSw8irsy4xtoSw3q7sK+q+hb7greAj
mefDBn2y4MRqsZvrqbuaWGI9KyrNREWXvZJJsQtGMswy2jEgRa8hz4OlKLKU
5Y+gRdBd+LWXB2nF/gQ123TZ3wb7WEzEigd8GNax9usb9QDYvx0z7xJKJbG3
u5mLyY+tYoe/7ANjy1i55MBBTVpyWtdCHzBCexli3rYYs2ADvD9JO4aLk++G
eiqtjk3uOAlB7ksuff+lCckn9adqp266C8fZ16aPayZuu64ekzSr2kpHj5dD
1uYkIYpZ9qafBSr+t2cOJI6lBNv1ZgoJQDXrBRPK2wH0LHuzhGUF+helX5uQ
1Dgt8SWoggdXSKU0L/7dcbJuzQtbhYwz8POYvGxd3PzH2nVXU+2tdUKpMcWX
4YNrI60cu44JvBWFTmO+dPplA9elIKYfVGRTmLdxNjOTItuzuJ0Kd3uf5exU
bbQMAu1rw+FiyHoeS/IQcTUXl6/s3Ju2QzGi2gUv9uzpmb+b0OrmIwf3OQyx
jNz7tkz/tuc7NkZ2mNOdnwVhlMCzYVLmBAccuFqhWmFJeCzfZH4TBYdVatKd
oIlkS2BRW04omNj3soZFmkgZAPb2cHXfQPIHUFSu56ZHBmys2JtoQtb5mpPl
WnkioGokWY5qO/eFDiR/Fixfsvi/cIcqgh6V+w+T0Iy48iu0BloTbZgNsE65
cWK21UkLbIssfHcVmqZccc6SrchXV8jShwINUll0owTyOzefJwlGSnvKnQbM
3im18Mo5wko/cd4xp2zTX/jm/opKhzsdexMTMeXFkQhL4VTinBWrkcmtqNb4
+ZTcCOaTRJ1QJY9UCxm0S1LGWsrQiJBrWtsul91fs0YU3llagDrWhOpu/FBP
WjeQ+yinpAi/9gpIBUqx6yglOqQYCbjKgxw2CSCwCXnZlc6tYylr3+xRLWhm
ojfsrCPbDBY98xqvqRQmdJ4LrsRW+SH2cBfu7ApdlPnOTPaDfzk7+uMwQE1j
bqGRO1Z3AlpoB6x/DlswI6nTzSepnhzRCAO4JlloOybbm+wxoao1dWAW3mVp
vvAMUBgfIkndnnDOC8DV2Y3CXOJraVkQLC8sKk6BItsa3ewaWWJFeKKYMnW8
cgKWiTSvEK2cJ2jLDWzZZz0zvyqNMef7GD0HcStp2C74KxYHYBtWaI0i37jW
rkBUTtrOBG4CZpVC8WyrhBwGWLx7xf4wcetupeel4RmwGvK+mLOF7/hNWK8j
sdvk0CAhXFpxAQ0KXO4VsKjbLAtO9yD5Y+Q+LqfjD5GuYh4VDUKlnVyJmj0Z
sG6Zsr8OKLvfdIEkgxnobkuJsdwozU2ULXjXNhhG40mkADGGW5DbCP2PHt0m
xYGmCr7mZHPqDoaOEanfQz2/njxR2vbkSTyO30qZyDsxB4vr5O0dXCLs7GMJ
GggENUzOdg7UXcOxLSXz+04Qu6YYUVd3UwK5XyJPKZAyZsXnQT3kWEeMp+es
4JgQhiuPIkuzmdAgTHlBlP0ypc0JM6DNUWNQ2Jy6aXWPRNldyQvydMVxWGHZ
O5klcmqUMqQ2VDAMCioSzIFjbGttl5Y2XQvfCS6RkOsT3YBPimK0XAkyaieF
04VhjNTwy7AW9CmOKlamvnF7hlOblNukGJ3O3AqrNKewkk8kTYQrXPca7TBm
V5rEUJt5Uag+SdFf4rH8l2E7jVUno7At994kOscF8QF+Qs75iS0GtByKgEYL
uCCxVwYTvVYd8F/gWBwH9qlcfvKNbp9o/zysyxjiH/2+hwo53B2rNKHkxWBE
mgDIXQcMzIsk8FXtN5S0wRNxtoLAGM+pl8kSL+cvCBkk5MzaqzAT7ZHrQhyg
InGtwZVweIIbUY1XZKUMbIdEvVVNSRd2COH1YEqSsObtRVBo5V52MOm7N2Iy
Bub77joOUTn+Me7Hce8L0UY+6RpYhvtRpwt/l+8wbsWvvSE/v/94d+0qhLSs
PPIY7co/upf8zdBrN+o+07APMWCIw8X3wIT6H4Z3O/164AWOU7vGrV8Ieugs
m37WVGhp1Ikj5WTJnprTYdJOmP0X1piJY3VWZUXonhq04mNq8goOR1I6a9+6
sIUDVT12fIcTc/3BOV7/iVb7p2wvQDEc6/hoX7FrVo80mdDKet8nYieAL21C
z+1px3Zlz4NBGx/OHBbP6/gjDyNuBzt05jhXXy/Jjfvh75qy5Mw7/BD2ONIH
KJhzwBbunAKMk6ZFUCNeS9D70VOBRXz4qvPBrUR6qcFpK3sdOa3LiuVMUd9l
m1uHTuBAlKRpFAB+mf6n3HUY+B9ys6dfvdoMnOn3Q4e/6XEItzt0slOgbrrq
IolQOqvkg2qnF07bgoejPQhh2ICD/D6EoKk5RUY67rFZ0ZaP6DhYOpKBMhPp
O4E5kQv34ID3QPgsAHOoUvhj4tci4QMYUchVfEI7xyQJDuM3vzuJVkAGqz3I
95+GatN/CK6dfAeunfxWXHMQo0q0DLWRd8xdV2BGOuOqbBppSGElq5HzaNtB
z28XDzJ3EQwHMZMmVMWM7yghsMtjloo85d6/iRb86GIhoa6qoOS9UcmMhqNx
725c/bnQAEWCzFsKLiDBLS/LDRk9sQFuFy/ahn6R7G7p3pkfoQ9zvCqV/bfp
T26EPmWgVeVSPimt/kaaSxeWpS0DZtiUOcfhm6PY5T4stZFRz2LMFOvxejHw
PZZ974/akGLaIaOI26X7nUbtuOW5LsBfByd1G+2Bk3VphsMLlZVPbOf9jhPs
U3X64b8ot6BYiCcnmavPxcUzy/C/AYwGtH2IwhYJIK+LaisV1/oW3HKw7T8C
Go434qDeN6I2YEbQvu3zrXZ8kzzBoOPcG1r3ZXU3CF9jLmiX0N3Du45fx1yK
XnG1pTeAYvD0GwsOAiHc512/UUx53wHexIO2x2+o0wKcqJtFOzBno93WY7/T
FWcUx9NrNxdsXLLcqUdPYx74AegCf9muNzLo8eRs6NweuN1SPgm3Qd+Jr9qC
QjmZrFemsH+CuU4nx/5sJzTbPMmxsFzDPa47FhX1LeOMCp5TBo/28iZLeIfz
iKOuO2hSuGAKO5G290Mdw2g/bzvkqV236zaiJlO6LSvqwEOQ8YDX2Trb3NWD
miwWZqORseBU8aOpdgdnvr7/3mS1J1ady/uvizbRGfl+T1Zf9vhfEwoiwDgb
0i6Lhfk+Jt7lWoaVhp23jcyII8qX6/OmkGz/rnM0A8G+oWEFgY+ctITjCJOT
ofHYVpyM0XeNJ6VYlt4wj5Exl1wrI66zBaZM80Re2/Vgid7m0RU3nZxNAI1Z
d1IiLy0B0XUode5XGJNpV+zOS63ECq9jvGlLJ12jfEVuQY2CEdk1wB8vQjSM
IZkK0ggZsWz/EceZKs4FuyXpP0/tqFVyDCnKTdBqzPVmcSK1dxmo7H5aB8RA
SJJ3KmXlxxuZs6w/gkThd1sywgedx7iLV8aJEdQGFeuAkjJsF3ES0J67ey1W
goW+QIqrKXO5xX8QlYS/OeXmOtgWgObXVFy8ZE9Ba5rX0KxpjTkJvoYNPbMV
S3gKJfG6dVM0jIuzWQTfx+Iw/ArMeL8vKV0o9IIELo+eUuD+EEB1qVQdfLyp
OJK1E92g9evYA3m/RXRprxZTmShgTpNU95gU63B6IIIv/djp48mxlKkmTcED
YY+m4P+DoPUMrV0Xqv/yudQwcJPKnHJ/KVMlgGk9ak9IdFbqMEhuFsDvs9QA
RNj3wNJE0a/ROIcweItGSs2QafVSrddFK3VNIsxZJaM6CJha6WOIGoEDYcmE
uSUnK/m+bok8Q+9dCyPDuFC6N0YKaRj2prlo6L12C188k46L3gpQ3TfdFxFD
FVt3MCYVcc0RiU6kpJsBsi/saVlTCRCKHmx6I5VqX167ZdB3xY1t300JCesr
Kbe45So/etRBTA/x0g7d6Q1J66OgozbNQRiHX6GRtI1lHVzOln4sHUk8mVRX
JLInjEuXPmoTodLg2DYmLYM2e1I0CC72Q5Ll3MHLH4rEf8rJIRS2KuZNuX98
KzXqw+FfTRVq7tvFU0N+8dGXZSQKt3vcaIFAZmZKytIrx/V7rshr7fXwuB/B
NUalg+CBhjPoDTZ97L1hQ++K/X/U/n8CtTVA6WuozSETqpRgqBEht+tZxPk7
+CqHpbC28RVMn/QwA+EDKOQ+Uu2oeiThPl65x9alcPvB2zHHxCpfBDqeuHpR
FBNMzYVM6G0bdvapsxqY0hKjBiB0D2Pygruq1mxPhEfHw/BcehbCgYz9hfgD
9i8HHSyqp0J/Vmh7JEIh5IEYf44CS0klH9uisJ8dYEocZVnIQNSGSXo8oCIZ
rEC0pYWWtZbWT9SPgRzOrkuxR1eei459QN2q6GwX5WNxgDiwkBzMAAFJscp3
7OuEEU48/muDieBdrPaOE1Ko5z0h4K0LZrYpRMcw2pR38pKjFDwXCGXjDZZ5
mYAya95LLZPeDiANgGm2qbaycGLMwAYUU7wfF1hi4cWMhLjCX1FnHowRThtc
fJdV7ElN4Hm+jnzegk97F4xAlDY2bCC4T/IlgyZpOpBAMmRkzt35ejvTQ/Im
BJp0w3Wt/Dm55lkB3IlK7VC7Zfh2FdDLc6aC/lp++/wXk8CN7PNs2PhUEt38
Cw4/n02O2LvrW175HzI6owMYX1GivO92PEoFqdPJUchQjK7WnAwRtKNCjzN8
wUWZ1tpUIxyABQCzVomRfXAyORta4wWMhuuOH5IJ4ac+NzUGQWV2PAMfgE/M
BW6/LEgwhj4m3BTGJHlDXm/ORek1T+cOVj1D1dT3wjCIQ4qVoc3F0UDszL6v
aX4xbHrpL1ZYzwPgR0ni9WrYCa8DokEdNloSFFHB0ATkW35E/KAtpI0plVg5
hsrIkUxlxi7mQgG6Rj/Er15MspLLxrWDDY2pcwt7JOLdcMAwphhJR0ElmbCi
6Fgaxs7LRWptc4FevwFi8gUEwq0UQI+8RWyq8i+4zn9/9SIrx/jT2Ib/Dyoz
xHUiowTTF5EsITNEB8BKKNah/+AFRn2UXFBr8Pz14fMXQ87Cx90E2dFqAjJZ
jCn3hx3o+9yMFlEdVv/vH3YfXnuLYp+gV5Be4u/bBZzYN+31M2TDvdQn7QvD
9FbnyuZzHeQtFUjwCm3aqbAjgOvmAxzQmhUF5Z+AIas7nFvZaatIZty0dm5X
gQxFgsAjqg0/VJG1kFKFk/jPanbhWiLtYFQxasvsEYsD3DFIAuw2FYyG1BlD
vNn8JvQlq9h45Oqis5Gbex3IoBjLwsHcHgi9RXBkkOu81XCF00jG31KUqFeK
c0Ku3DflKiHQetUM3G2m+G1uwUNxN1R7ainUx6INHbMdBWJ3JAQJqzFJRTjt
cKLecIufwlKQNGEQLOVZbQGA7Jy+xI9POajpjIzqd1J6X9vezM0hy8kSjy4q
G18JbgIxA7JWsUFEi3DU5t3U3XCBTBfwZRkJXq+IrjNPlnGTNCat1FzisCkb
R/64X42Ug+dylX5l0Q3QWl5NK+SawO1dCCqCQbG2+GgNwv6D1jcyR6lOSVeC
ZWOs6ondXanPNczL9/iJ9DR4MqTIECvRLwUGDb5eqGdYit5vBsCuHrg6Un5W
4114TYo2+2L56MaGVt4n8TOkYt2cLyvCNOJw4yBUTj1vpjztCeQzZhZGyWHJ
yzmW0sAQQT8MjpzCXgic415an4Ph2w7z80PheiL7OsuVBVukHVfG9HeNwFeN
2R2XdzoeY8Uly0H+xEU4LCaF051ULWImIgAxZc457pLYlfjv4sNIv6wxvdCr
x091z7SYKLXh7QTCczKoG8JViPSyYQIktJb2IA7YZrlNWHtw7rsQS9sFCgJ/
BjRuvWkMzeNnmjMe7MygqygvaglLEKK10aL5eJzoZfkRPdems0BOWqHyu3Uq
l+5jwf4oIBYV0Ea+tCwpg75C3i0KQe+pDO+IOrHCuUaitKdF8FJTdZiDC+wL
/LX2aNZYxcc6WxXUI5BKakqOy4DIlktUVYJAwQO8W4+AtAQtghC5ZqQbDJaF
NwTQJUi+fnhc7CXEcM82E2jN0ZS51GonSLAa0O1LwpO2J0kkMKRFDXEqIAHA
SquS77S2JPOwEv121omGY4q2ldY1iiVnnMidW4xZoaRJcEGFl6w0cxVU6MWy
l7YcEsxgkrnVuWbar+mZjNmrTOqzUUnVxR68UUiyb120GA3KYNbnNaihhqRN
TNV0bj/eGUGcbXuLn49a8QEdnKQkhpdf5l53hhY2k/GT66swhtw9/8BEYGgF
m/ybxbkFpV/QSHgsWvdEGCI/MurJ1LR2hOT/PiiBlLk4S07DzrSJp28aINbB
9cWRaaEmRXNTVdHWbNZY4T5NHjJq65MnO0dqBCdJhK8p0i/Lt1U6MqcWeYGT
FUqUDxlXVuZKSVlN9b9D5A5Yr8NvkmdbtNDdJpK6213b8O9IAcrPnPwYFEA1
udvQWlCCeYI0XrSEQL6QfEv5PlJ3sEwLN8fYrIU1igOE9gElprwqNX/QK3k1
wsrc2zownXJdMKBcOGhY74NqkPvK4nckgN3tNlRFl3ZaX4OkCpTgdHJ5Gb/d
bDjy5Pz0JwrhOPr5JaVoSX4WvXk5uTgL3oxP8TXM3RpIscM5Z3EN+zK0fsFZ
edKro6PjGAcaPJJgit178Mcj/BHnp27KCfWWCgKKh9/Kq5JJTrB0kRC3bydN
yUfH9s23cqPkA66LNDianP1x+PXsJffByH119EctooQ/nvHfuJTSd2YvKUgl
fldx2FRaNra7cnGak4f9FqrMZzPxQpWpt1QhtPWCSzhKgJtz6hZ1AwWMXG1B
F8WWgADpS1y3yuO4wjc4oxnL96UoURwRNXr1yha89g0ZlEiAlTiZfNBGyJia
rQUuRIHmeVIJDyEyhkRHpAJjJo8Jp1GSuZFzpak1TMG0x5KkgB3QOgTI50eI
UwNBKljiFe6V+tsgOfzkyba0819J3TS5v9pbFkTGR1PfoBvHTwGhJfqKpAvC
L0qm0GiJ5i/ap+SPjWn16UJaj8+sxxO8r7ZE59YQsARFjVtdOF32mD+0K1lB
6gHBF40b3EZSDYkSGulGbcJGhd2B6NCoyx2acESj8bDgZltEbAdzRczIbuFq
erpO26wxkUBMuFBtC7XERANX52mRLhNWD6zFEQmyZFnBcsWuOJkE6rVyLH2y
EfmBgMetNCqgoBdnQOQQj4j4Yb7cKOpJGQBycHF0eXV2fHo+vTy9uDo/vowH
HM3X9kGR9TOswxYsYtpexNnp2cXxOawB/43/krXc7F/L0fHl+dnR5fHFyfTo
GDZxNI0H5IRUX67PmtoLOOks4OT08vJkOrk6OSFoXPECauo1aMUJUDDHSP+I
S0VQLzCXILsnhLrXC7t/W0dX56cnlycn59Oro7OTs+Nv7OqJpEb2TMzcvoMa
XB/i2OdFAWxO27A5vTo5Pz86m5xdXB1Nj0/PThg21G3Ui5AUCbbHx08WaioX
N1Lmsn//ilPtZuHfwqmzzpEen1yeXV5MpkeX5ycXx1cXvGxn3v+OpQSg92Wg
9uznndmnp9Pzs/PJ9PT06PT0/PysNftX8PrkbHpyAWC+uDo5vZieXXwTA6gB
pbO1Jc5fwu4Aqmq6NyZ/D5qcTU4vLqbTszMgD2fH5+fHe9Dlogv3q6MTuMtX
R6fHx8dn5wL3lqP7m8A/mp6cnZxc4eldXcH/AO2w7rK//RHV3PCOpX0ql9+J
E+afR7R41xqzf4XHOMbRdDq9Op5eHh2dHp2k46Pz1lG11sundSeeYXdg5Ni3
1oIaco2sosB4x6K1q6t9F/Tk8vjofHoCdJl2ZbcQl+HdxG8hPN+/NhjafOSo
A1s49bPLE5DcL09P4PAE43EcPvPvvmjfmrrDw4APABu4ApSDieE4Tv+RUz+h
H/eGWzMSugpNJeqkqNLu0qa98C7f66cSAT5+aCHRfsIBfPDi9BKu6hUQkXMt
hMbH2R6FNkZW4A9f3x15CztNwIMCe6561FcpSqj/hJDpMuRjuFdXpxM40Ev4
88XF2e8jI78RtTrMr0sxutTi26cDYvHJ0cnlFaDm9OwcuDsTi28e0G/FvB6c
6/LF6fH56enJBMjz9PxierkXrh++Sp7PzgEkF3BIF1cXyLBagO7ZTrCsLsPs
sI3uNfg2WSbGcQGy09UFCIVwpc7OgRp0AN254u1LQCaiDhO9sZpffBWu+Yg+
vXn/60usxNCPtH+idz5++CDv9LCgP/ESvIF6eOif6BUbp+cYyVn/+tm7Z+jd
xs6cmlUWvSuprkcqLfLwHS4hlM4BvM2u84F19SVDEdagpCo3YbtG7XS+Ttdc
kVd1eezOkc7vuYswVmGixKBKurNzAaIXH+8OUdtirYc0tRKLt6GAChpqRp6N
KAeVh6yO2MjqIavKghumS1e/BbU0Wlgn9HqTzF1JFKpbWGEv1TpynS+0KqSU
a2elSkqhzfxtW+3zcsMb0ZgZqlPBPhTyGiHCgya53VC2GDXcfvf+jtsrFQXH
DJJO+5DNrcJlstMWg840YJbuAiCYoCEO23ewsYPXgh6GrAblu3GGXi00iCOs
kyJZaSx+IwEMr7jZyCjcXlar1ZkNMUl8MMuT+efxrPxygPaZrB5pc5IIO+hg
K50izKXnLtcUCeEqMvFy5HyxRQV3ew7KJcW3f37/8c0LghMFOOuxKFqo8Y6q
TWOBpGDtm22FnXPqSfys2Ek3MFHX/ar1taJ3wikokcXm6TSyjBnVXyy4oZes
BFBP3BXeQUQyNN+1Z3N0WgHSMsjh3rzFSFxUFD+TkfpZns7jP5ccareM33/A
tiLwf9qMxbEwRy2pVUOEPnCgpDhzsV2nFfrDpbCKtq7iVkvb1QqzDrgoyXg8
hiObf47+L7S1lrsi8QAA

-->

</rfc>

