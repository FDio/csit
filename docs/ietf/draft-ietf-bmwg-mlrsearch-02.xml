<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.6.4 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

<!ENTITY RFC2544 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2544.xml">
]>


<rfc ipr="trust200902" docName="draft-ietf-bmwg-mlrsearch-02" category="info" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Multiple Loss Ratio Search">Multiple Loss Ratio Search for Packet Throughput (MLRsearch)</title>

    <author initials="M." surname="Konstantynowicz" fullname="Maciek Konstantynowicz" role="editor">
      <organization>Cisco Systems</organization>
      <address>
        <email>mkonstan@cisco.com</email>
      </address>
    </author>
    <author initials="V." surname="Polak" fullname="Vratko Polak">
      <organization>Cisco Systems</organization>
      <address>
        <email>vrpolak@cisco.com</email>
      </address>
    </author>

    <date year="2022" month="March" day="07"/>

    <area>ops</area>
    <workgroup>Benchmarking Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>TODO: Update after all sections are ready.</t>

<t>This document proposes changes to <xref target="RFC2544"></xref>, specifically to packet
throughput search methodology, by defining a new search algorithm
referred to as Multiple Loss Ratio search (MLRsearch for short). Instead
of relying on binary search with pre-set starting offered load, it
proposes a novel approach discovering the starting point in the initial
phase, and then searching for packet throughput based on defined packet
loss ratio (PLR) input criteria and defined final trial duration time.
One of the key design principles behind MLRsearch is minimizing the
total test duration and searching for multiple packet throughput rates
(each with a corresponding PLR) concurrently, instead of doing it
sequentially.</t>

<t>The main motivation behind MLRsearch is the new set of challenges and
requirements posed by NFV (Network Function Virtualization),
specifically software based implementations of NFV data planes. Using
<xref target="RFC2544"></xref> in the experience of the authors yields often not repetitive
and not replicable end results due to a large number of factors that are
out of scope for this draft. MLRsearch aims to address this challenge
in a simple way of getting the same result sooner, so more repetitions
can be done to describe the replicability.</t>



    </abstract>



  </front>

  <middle>



<section anchor="terminology"><name>Terminology</name>

<t>TODO: Update after most other sections are updated.</t>


<t><list style="symbols">
  <t>TODO: The current text uses Throughput for the zero loss ratio load.
Is the capital T needed/useful?</t>
  <t>DUT and SUT: see the definitions in https://gerrit.fd.io/r/c/csit/+/35545</t>
  <t>Traffic Generator (TG) and Traffic Analyzer (TA): see
https://datatracker.ietf.org/doc/html/rfc6894#section-4
TODO: Maybe there is an earlier RFC?</t>
  <t>Overall search time: the time it takes to find all required loads within
their precision goals, starting from zero trials measured at given
DUT configuration and traffic profile.</t>
  <t>TODO: traffic profile?</t>
  <t>Intended load: https://datatracker.ietf.org/doc/html/rfc2285#section-3.5.1</t>
  <t>Offered load: https://datatracker.ietf.org/doc/html/rfc2285#section-3.5.2</t>
  <t>Maximum offered load (MOL): see
https://datatracker.ietf.org/doc/html/rfc2285#section-3.5.3</t>
  <t>Forwarding rate at maximum offered load (FRMOL)
https://datatracker.ietf.org/doc/html/rfc2285#section-3.6.2</t>
  <t>Trial Loss Count: the number of frames transmitted
minus the number of frames received. Negative count is possible,
e.g. when SUT duplicates some frames.</t>
  <t>Trial Loss Ratio: ratio of frames received relative to frames
transmitted over the trial duration.
For bi-directional throughput tests, the aggregate ratio is calculated,
based on the aggregate number of frames transmitted and received.
If the trial loss count is negative, its absolute value MUST be used
to keep compliance with RFC2544.</t>
  <t>Safe load: any value, such that trial measurement at this (or lower)
intended load is correcrly handled by both TG and TA, regardless of SUT behavior.
Frequently, it is not known what the safe load is.</t>
  <t>Max load (TODO rename?): Maximal intended load to be used during search.
Benchmarking team decides which value is low enough
to guarantee values reported by TG and TA are reliable.
It has to be a safe load, but it can be lower than a safe load estimate
for added safety.
See the subsection on unreliable test equipment below.
This value MUST NOT be higher than MOL, which itself MUST NOT
be higher than Maximum Frame Rate
https://datatracker.ietf.org/doc/html/rfc2544#section-20</t>
  <t>Min load: Minimal intended load to be used during search.
Benchmarking team decides which value is high enough
to guarantee the trial measurement results are valid.
E.g. considerable overall search time can be saved by declaring SUT
faulty if min load trial shows too high loss rate.
Zero frames per second is a valid min load value</t>
  <t>Effective loss ratio: a corrected value of trial loss ratio
chosen to avoid difficulties if SUT exhibits decreasing loss ratio
with increasing load. It is the maximum of trial loss ratios
measured at the same duration on all loads smaller than (and including)
the current one.</t>
  <t>Target loss ratio: a loss ratio value acting as an input for the search.
The search is finding tight enough lower and upper bounds in intended load,
so that the measurement at the lower bound has smaller or equal
trial loss ratio, and upper bound has strictly larger trial loss ratio.
For the tightest upper bound, the effective loss ratio is the same as
trial loss ratio at that upper bound load.
For the tightest lower bound, the effective loss ratio can be higher
than the trial loss ratio at that lower bound, but still not larger
than the target loss ratio.</t>
  <t>TODO: Search algorithm.</t>
  <t>TODO: Precision goal.</t>
  <t>TODO: Define a &quot;benchmarking group&quot;.</t>
  <t>TODO: Upper and lower bound.</t>
  <t>TODO: Valid and invalid bound?</t>
  <t>TODO: Interval and interval width?</t>
</list></t>

<t>TODO: Mention NIC/PCI bandwidth/pps limits can be lower than bandwidth of medium.</t>

</section>
<section anchor="intentions-of-this-document"><name>Intentions of this document</name>


<t>The intention of this document is to provide recommendations for:
* optimizing search for multiple target loss ratios at once,
* speeding up the overall search time,
* improve search results repeatability and comparability.</t>

<t>No part of RFC2544 is intended to be obsoleted by this document.</t>


</section>
<section anchor="rfc2544"><name>RFC2544</name>

<section anchor="throughput-search"><name>Throughput search</name>

<t>It is useful to restate the key requirements of RFC2544
using the new terminology (see section Terminology).</t>

<t>The following sections of RFC2544 are of interest for this document.</t>

<t><list style="symbols">
  <t>https://datatracker.ietf.org/doc/html/rfc2544#section-20
Mentions the max load SHOULD not be larget than the theoretical
maximum rate for the frame size on the media.</t>
  <t>https://datatracker.ietf.org/doc/html/rfc2544#section-23
Lists the actions to be done for each trial measurement,
it also mentions loss rate as an example of trial measurement results.
This document uses loss count instead, as that is the quantity
that is easier for the current test equipment to measure,
e.g. it is not affected by the real traffic duration.
TODO: Time uncertainty again.</t>
  <t>https://datatracker.ietf.org/doc/html/rfc2544#section-24
Mentions &quot;full length trials&quot; leading to the Throughput found,
as opposed to shorter trial durations, allowed in an attempt
to &quot;minimize the length of search procedure&quot;.
This document talks about &quot;final trial duration&quot; and aims to
&quot;optimize overal search time&quot;.</t>
  <t>https://datatracker.ietf.org/doc/html/rfc2544#section-26.1
with https://www.rfc-editor.org/errata/eid422
finaly states requirements for the search procedure.
It boils down to &quot;increase intended load upon zero trial loss
and decrease intended load upon non-zero trial loss&quot;.</t>
</list></t>

<t>No additional constraints are placed on the load selection,
and there is no mention of an exit condition, e.g. when there is enough
trial measurements to proclaim the largest load with zero trial loss
(and final trial duration) to be the Throughput found.</t>


</section>
<section anchor="simple-bisection"><name>Simple bisection</name>

<t>There is one obvious and simple search algorithm which conforms
to throughput search requirements: simple bijection.</t>

<t>Input: target precision, in frames per second.</t>

<t>Procedure:</t>

<t><list style="numbers">
  <t>Chose min load to be zero.
  <list style="numbers">
      <t>No need to measure, loss count has to be zero.</t>
      <t>Use the zero load as the current lower bound.</t>
    </list></t>
  <t>Chose max load to be the max value allowed by bandwidth of the medium.
  <list style="numbers">
      <t>Perform a trial measurement (at the full length duration) at max load.</t>
      <t>If there is zero trial loss count, return max load as Throughput.</t>
      <t>Use max load as the current upper bound.</t>
    </list></t>
  <t>Repeat until the difference between lower bound and upper bound is
smaller or equal to the precision goal.
  <list style="numbers">
      <t>If it is not larget, return the current lower bound as Throughput.</t>
      <t>Else: Chose new load as the arithmetic average of lower and upper bound.</t>
      <t>Perform a trial measurement (at the full length duration) at this load.</t>
      <t>If the trial loss rate is zero, consider the load as new lower bound.</t>
      <t>Else consider the load as the new upper bound.</t>
      <t>Jump back to the repeat at 3.</t>
    </list></t>
</list></t>

<t>Another possible stop condition is the overal search time so far,
but that is not really a different condition, as the time for search to reach
the precision goal is just a function of precision goal, trial duration
and the difference between max and min load.</t>

<t>While this algorithm can be accomodated to search for multiple
target loss ratios &quot;at the same time (see somewhere below),
it is still missing multiple improvement which give MLRsearch
considerably better overal search time in practice.</t>

</section>
</section>
<section anchor="problems"><name>Problems</name>

<section anchor="repeatability-and-comparability"><name>Repeatability and Comparability</name>

<t>RFC2544 does not suggest to repeat Throughput search,

and from just one Throughput value, it cannot be determined
how repeatable that value is (how likely it is for a repeated Throughput search
to end up with a value less then the precision goal away from the first value).</t>

<t>Depending on SUT behavior, different benchmark groups
can report significantly different Througput values,
even when using identical SUT and test equipment,
just because of minor differences in their search algorithm
(e.g. different max load value).</t>

<t>While repeatability can be addressed by repeating the search several times,
the differences in the comparability scenario may be systematic,
e.g. seeming like a bias in one or both benchmark groups.</t>

<t>MLRsearch algorithm does not really help with the repeatability problem.
This document RECOMMENDS to repeat a selection of &quot;important&quot; tests
ten times, so users can ascertain the repeatability of the results.</t>

<t>TODO: How to report? Average and standard deviation?</t>

<t>Following MLRsearch algorithm leaves less freedom for the benchmark groups
to encounter the comparability problem,
alghough more research is needed to determine the effect
of MLRsearch&#39;s tweakable parameters.</t>





</section>
<section anchor="popularity-of-non-zero-target-loss-ratios"><name>Popularity of non-zero target loss ratios</name>

<t>https://datatracker.ietf.org/doc/html/rfc1242#section-3.17
says:
    Since even the loss of one frame in a
    data stream can cause significant delays while
    waiting for the higher level protocols to time out,
    it is useful to know the actual maximum data
    rate that the device can support.</t>

<t>While this may still be true for some protocols,
research has been performed...</t>

<t>TODO: Add this link properly: https://www.itu.int/rec/dologin_pub.asp?lang=e&amp;id=T-REC-Y.1541-201112-I!!PDF-E&amp;type=items
TODO: List values from that document, from 10^-3 to 4*10^-6.</t>

<t>...on other protocols and use cases,
resulting in some small but non-zero loss ratios being considered
as acceptable. Unfortunately, the acceptable value depends on use case
and properties such as TCP window size and round trip time,
so no single value of target loss rate (other than zero)
is considered to be universally applicable.</t>

<t>Also, since those times, new &quot;software DUTs&quot; (traffic forwarding programs
running on on-the-shelf host hardware) appeared, and their Throughput results
frequently exhibit quite small repeatability.</t>

<t><list style="symbols">
  <t>discovering multiple rates of interest is required for software DUTs
running on COTS general purpose servers (x86, arm)  <list style="symbols">
      <t>in general, throughput rates of software DUTs (programs)
are sensitive to server resources allocated to them by OS during runtime,
as well as to any system interrupts      <list style="symbols">
          <t>these are general purpose systems, not purpose built,
single function systems</t>
          <t>as such server resources shared across multiple programs</t>
          <t>real time packet processing makes it sensitive to any interrupts
or blocking of software threads</t>
        </list></t>
    </list></t>
</list></t>

<t>In our experience, the higher the target loss ratio is,
the better is the repeatability of the corresponding load found.</t>

<t>TODO: Define a good name for a load corresponding to a specific non-zero
target loss ration, while keeping Throughput for the load corresponding
to zero target loss ratio.</t>

<t>This document RECOMMENDS the benchmark groups to search for corresponding loads
to at least one non-zero target loss ratio.
This document does not suggest any particular non-zero target loss ratio value
to search the corresponding load for.</t>


</section>
</section>
<section anchor="solution-ideas"><name>Solution ideas</name>

<t>This document gives several independent ideas on how to lower the (average)
overall search time, while remaining unconditionally compliant with RFC2544
(and adding some of extensions).</t>

<t>This document also specifies one particular way to combine all the ideas
into a single search algorithm class (single logic with few tweakable parameters).</t>

<t>Little to no research has been done into the question of which combination
of ideas achieves the best compromise with respect to overal search time,
high repeatability and high comparability.</t>

<t>TODO: How important it is to discuss particular implementation choices,
especially when motivated by non-deterministic SUT behavior?</t>

<section anchor="short-duration-trials"><name>Short duration trials</name>

<t>https://datatracker.ietf.org/doc/html/rfc2544#section-24
already mentions the possibity of using shorter duration
for trials that are not part of &quot;final determination&quot;.</t>

<t>Obviously, the upper and lower bound from a smaller duration trial
can be used as the initial upper and lower bound for the final determination.</t>

<t>MLRsearch makes it clear a re-measurement is always needed
(new trial measurement with the same load but longer duration).
It also specifes what to do if the longer trial is no longer a valid bound
(TODO define?), e.g. start an external search.
Additionaly one halving can be saved during the shorter duration search.</t>

</section>
<section anchor="frmol-as-reasonable-start"><name>FRMOL as reasonable start</name>

<t>TODO expand: Overal search ends with &quot;final determination&quot; search,
preceded by &quot;shorter duration search&quot; preceded by &quot;bound initialization&quot;,
where the bounds can be considerably different from min and max load.</t>

<t>For SUTs with high repeatability, the FRMOL is usually a good approximation
of Throughput. But for less repeatable SUTs, forwarding rate (TODO define)
is frequently a bad approximation to Throughput, therefore halving
and other robust-to-worst-case approaches have to be used.
Still, forwarding rate at FRMOL load can be a good initial bound.</t>

</section>
<section anchor="non-zero-loss-ratios"><name>Non-zero loss ratios</name>

<t>See the &quot;Popularity of non-zero target loss ratios&quot; section above.</t>

<t>TODO: Define &quot;trial measurement result classification criteria&quot;,
or keep reusing long phrases without definitions?</t>

<t>A search for a load corresponding to a non-zero target loss rate
is very similar to a search for Throughput,
just the criterion when to increase or decrease the intended load
for the next trial measurement uses the comparison of trial loss ratio
to the target loss ratio (instead of comparing loss count to zero)
Any search algorithm that works for Throughput can be easily used also for
non-zero target loss rates, perhaps with small modifications
in places where the measured forwarding rate is used.</t>

<t>Note that it is possible to search for multiple loss ratio goals if needed.</t>

</section>
<section anchor="concurrent-ratio-search"><name>Concurrent ratio search</name>

<t>A single trial measurement result can act as an upper bound for a lower
target loss ratio, and as a lower bound for a higher target loss ratio
at the same time. This is an example of how
it can be advantageous to search for all loss ratio goals &quot;at once&quot;,
or at least &quot;reuse&quot; trial measurement result done so far.</t>

<t>Even when a search algorithm is fully deterministic in load selection
while focusing on a single loss ratio and trial duration,
the choice of iteration order between target loss ratios and trial durations
can affect the obtained results in subtle ways.
MLRsearch offers one particular ordering.</t>


</section>
<section anchor="load-selection-heuristics-and-shortcuts"><name>Load selection heuristics and shortcuts</name>

<t>Aside of the two heuristics already mentioned (FRMOL based initial bounds
and saving one halving when increasing trial duration),
there are other tricks that can save some overall search time
at the cost of keeping the difference between final lower and upper bound
intentionally large (but still within the precision goal).</t>

<t>TODO: Refer implementation subsections on:
* Uneven splits.
* Rounding the interval width up.
* Using old invalid bounds for interval width guessing.</t>

<t>The impact on overall duration is probably small,
and the effect on result distribution maybe even smaller.
TODO: Is the two-liner above useful at all?</t>

</section>
</section>
<section anchor="non-compliance-with-rfc2544"><name>Non-compliance with RFC2544</name>

<t>It is possible to achieve even faster search times by abandoning
some requirements and suggestions of RFC2544,
mainly by reducing the wait times at start and end of trial.</t>

<t>Such results are therefore no longer compliant with RFC2544
(or at least not unconditionally),
but they may still be useful for internal usage, or for comparing
results of different DUTs achieved with an identical non-compliant algorithm.</t>

<t>TODO: Refer to the subsection with CSIT customizations.</t>

</section>
<section anchor="additional-requirements"><name>Additional Requirements</name>

<t>RFC2544 can be understood as having a number of implicit requirements.
They are made explicit in this section
(as requirements for this document, not for RFC2544).</t>

<t>Recommendations on how to properly address the implicit requirements
are out of scope of this document.</t>


<section anchor="todo-search-stop-criteria"><name>TODO: Search Stop Criteria</name>

<t>TODO: Mention the timeout parameter?</t>


</section>
<section anchor="reliability-of-test-equipment"><name>Reliability of Test Equipment</name>

<t>Both TG and TA MUST be able to handle correctly
every intended load used during the search.</t>

<t>On TG side, the difference between Intended Load and Offered Load
MUST be small.</t>

<t>TODO: How small? Difference of one packet may not be measurable
due to time uncertainties.</t>


<t>TODO expand: time uncertainty.</t>

<t>To ensure that, max load (see Terminology) has to be set to low enough value.
Benchmark groups MAY list the max load value used,
especially if the Throughput value is equal (or close) to the max load.</t>


<t>Solutions (even problem formulations) for the following open problems
are outside of the scope of this document:
* Detecting when the test equipment operates above its safe load.
* Finding a large but safe load value.
* Correcting any result affected by max load value not being a safe load.</t>



<section anchor="very-late-frames"><name>Very late frames</name>


<t>RFC2544 requires quite conservative time delays
see https://datatracker.ietf.org/doc/html/rfc2544#section-23
to prevent frames buffered in one trial measurement
to be counted as received in a subsequent trial measurement.</t>

<t>However, for some SUTs it may still be possible to buffer enough frames,
so they are still sending them (perhaps in bursts)
when the next trial measurement starts.
Sometimes, this can be detected as a negative trial loss count, e.g. TA receiving
more frames than TG has sent during this trial measurement. Frame duplication
is another way of causing the negative trial loss count.</t>

<t>https://datatracker.ietf.org/doc/html/rfc2544#section-10
recommends to use sequence numbers in frame payloads,
but generating and verifying them requires test equipment resources,
which may be not plenty enough to suport at high loads.
(Using low enough max load would work, but frequently that would be
smaller than SUT&#39;s sctual Throughput.)</t>

<t>RFC2544 does not offer any solution to the negative loss problem,
except implicitly treating negative trial loss counts
the same way as positive trial loss counts.</t>

<t>This document also does not offer any practical solution.</t>

<t>Instead, this document SUGGESTS the search algorithm to take any precaution
necessary to avoid very late frames.</t>

<t>This document also REQUIRES any detected duplicate frames to be counted
as additional lost frames.
This document also REQUIRES, any negative trial loss ratio
to be treated as positive trial loss ratio of the same absolute value.</t>


<t>!!! Nothing below is up-to-date with draft v02. !!!</t>

</section>
</section>
</section>
<section anchor="mlrsearch-background"><name>MLRsearch Background</name>

<t>TODO: Old section, probably obsoleted by preceding section(s).</t>

<t>Multiple Loss Ratio search (MLRsearch) is a packet throughput search
algorithm suitable for deterministic systems (as opposed to
probabilistic systems). MLRsearch discovers multiple packet throughput
rates in a single search, each rate is associated with a distinct
Packet Loss Ratio (PLR) criterion.</t>

<t>For cases when multiple rates need to be found, this property makes
MLRsearch more efficient in terms of time execution, compared to
traditional throughput search algorithms that discover a single packet
rate per defined search criteria (e.g. a binary search specified by
<xref target="RFC2544"></xref>). MLRsearch reduces execution time even further by relying on
shorter trial durations of intermediate steps, with only the final
measurements conducted at the specified final trial duration. This
results in the shorter overall search execution time when compared to a
traditional binary search, while guaranteeing the same results for
deterministic systems.</t>

<t>In practice, two rates with distinct PLRs are commonly used for packet
throughput measurements of NFV systems: Non Drop Rate (NDR) with PLR=0
and Partial Drop Rate (PDR) with PLR&gt;0. The rest of this document
describes MLRsearch with NDR and PDR pair as an example.</t>

<t>Similarly to other throughput search approaches like binary search,
MLRsearch is effective for SUTs/DUTs with PLR curve that is
non-decreasing with growing offered load. It may not be as
effective for SUTs/DUTs with abnormal PLR curves, although
it will always converge to some value.</t>

<t>MLRsearch relies on traffic generator to qualify the received packet
stream as error-free, and invalidate the results if any disqualifying
errors are present e.g. out-of-sequence frames.</t>

<t>MLRsearch can be applied to both uni-directional and bi-directional
throughput tests.</t>

<t>For bi-directional tests, MLRsearch rates and ratios are aggregates of
both directions, based on the following assumptions:</t>

<t><list style="symbols">
  <t>Traffic transmitted by traffic generator and received by SUT/DUT
has the same packet rate in each direction,
in other words the offered load is symmetric.</t>
  <t>SUT/DUT packet processing capacity is the same in both directions,
resulting in the same packet loss under load.</t>
</list></t>

<t>MLRsearch can be applied even without those assumptions,
but in that case the aggregate loss ratio is less useful as a metric.</t>

<t>MLRsearch can be used for network transactions consisting of more than
just one packet, or anything else that has intended load as input
and loss ratio as output (duration as input is optional).
This text uses mostly packet-centric language.</t>

</section>
<section anchor="mlrsearch-overview"><name>MLRsearch Overview</name>

<t>The main properties of MLRsearch:</t>

<t><list style="symbols">
  <t>MLRsearch is a duration aware multi-phase multi-rate search algorithm:
  <list style="symbols">
      <t>Initial Phase determines promising starting interval for the search.</t>
      <t>Intermediate Phases progress towards defined final search criteria.</t>
      <t>Final Phase executes measurements according to the final search
criteria.</t>
      <t>Final search criteria are defined by following inputs:
      <list style="symbols">
          <t>Target PLRs (e.g. 0.0 and 0.005 when searching for NDR and PDR).</t>
          <t>Final trial duration.</t>
          <t>Measurement resolution.</t>
        </list></t>
    </list></t>
  <t>Initial Phase:
  <list style="symbols">
      <t>Measure MRR over initial trial duration.</t>
      <t>Measured MRR is used as an input to the first intermediate phase.</t>
    </list></t>
  <t>Multiple Intermediate Phases:
  <list style="symbols">
      <t>Trial duration:
      <list style="symbols">
          <t>Start with initial trial duration in the first intermediate phase.</t>
          <t>Converge geometrically towards the final trial duration.</t>
        </list></t>
      <t>Track all previous trial measurement results:
      <list style="symbols">
          <t>Duration, offered load and loss ratio are tracked.</t>
          <t>Effective loss ratios are tracked.
          <list style="symbols">
              <t>While in practice, real loss ratios can decrease with increasing load,
effective loss ratios never decrease. This is achieved by sorting
results by load, and using the effective loss ratio of the previous load
if the current loss ratio is smaller than that.</t>
            </list></t>
          <t>The algorithm queries the results to find best lower and upper bounds.
          <list style="symbols">
              <t>Effective loss ratios are always used.</t>
            </list></t>
          <t>The phase ends if all target loss ratios have tight enough bounds.</t>
        </list></t>
      <t>Search:
      <list style="symbols">
          <t>Iterate over target loss ratios in increasing order.</t>
          <t>If both upper and lower bound are in measurement results for this duration,
apply bisect until the bounds are tight enough,
and continue with next loss ratio.</t>
          <t>If a bound is missing for this duration, but there exists a bound
from the previous duration (compatible with the other bound
at this duration), re-measure at the current duration.</t>
          <t>If a bound in one direction (upper or lower) is missing for this duration,
and the previous duration does not have a compatible bound,
compute the current &quot;interval size&quot; from the second tightest bound
in the other direction (lower or upper respectively)
for the current duration, and choose next offered load for external search.</t>
          <t>The logic guarantees that a measurement is never repeated with both
duration and offered load being the same.</t>
          <t>The logic guarantees that measurements for higher target loss ratio
iterations (still within the same phase duration) do not affect validity
and tightness of bounds for previous target loss ratio iterations
(at the same duration).</t>
        </list></t>
      <t>Use of internal and external searches:
      <list style="symbols">
          <t>External search:
          <list style="symbols">
              <t>It is a variant of &quot;exponential search&quot;.</t>
              <t>The &quot;interval size&quot; is multiplied by a configurable constant
(powers of two work well with the subsequent internal search).</t>
            </list></t>
          <t>Internal search:
          <list style="symbols">
              <t>A variant of binary search that measures at offered load between
the previously found bounds.</t>
              <t>The interval does not need to be split into exact halves,
if other split can get to the target width goal faster.
              <list style="symbols">
                  <t>The idea is to avoid returning interval narrower than the current
width goal. See sample implementation details, below.</t>
                </list></t>
            </list></t>
        </list></t>
    </list></t>
  <t>Final Phase:
  <list style="symbols">
      <t>Executed with the final test trial duration, and the final width
goal that determines resolution of the overall search.</t>
    </list></t>
  <t>Intermediate Phases together with the Final Phase are called
Non-Initial Phases.</t>
  <t>The returned bounds stay within prescribed min_rate and max_rate.
  <list style="symbols">
      <t>When returning min_rate or max_rate, the returned bounds may be invalid.
      <list style="symbols">
          <t>E.g. upper bound at max_rate may come from a measurement
with loss ratio still not higher than the target loss ratio.</t>
        </list></t>
    </list></t>
</list></t>

<t>The main benefits of MLRsearch vs. binary search include:</t>

<t><list style="symbols">
  <t>In general, MLRsearch is likely to execute more trials overall, but
likely less trials at a set final trial duration.</t>
  <t>In well behaving cases, e.g. when results do not depend on trial
duration, it greatly reduces (&gt;50%) the overall duration compared to a
single PDR (or NDR) binary search over duration, while finding
multiple drop rates.</t>
  <t>In all cases MLRsearch yields the same or similar results to binary
search.</t>
  <t>Note: both binary search and MLRsearch are susceptible to reporting
non-repeatable results across multiple runs for very bad behaving
cases.</t>
</list></t>

<t>Caveats:</t>

<t><list style="symbols">
  <t>Worst case MLRsearch can take longer than a binary search, e.g. in case of
drastic changes in behaviour for trials at varying durations.
  <list style="symbols">
      <t>Re-measurement at higher duration can trigger a long external search.
That never happens in binary search, which uses the final duration
from the start.</t>
    </list></t>
</list></t>

</section>
<section anchor="sample-implementation"><name>Sample Implementation</name>

<t>Following is a brief description of a sample MLRsearch implementation,
which is a simplified version of the existing implementation.</t>

<section anchor="input-parameters"><name>Input Parameters</name>

<t><list style="numbers">
  <t><strong>max_rate</strong> - Maximum Transmit Rate (MTR) of packets to
be used by external traffic generator implementing MLRsearch,
limited by the actual Ethernet link(s) rate, NIC model or traffic
generator capabilities.</t>
  <t><strong>min_rate</strong> - minimum packet transmit rate to be used for
measurements. MLRsearch fails if lower transmit rate needs to be
used to meet search criteria.</t>
  <t><strong>final_trial_duration</strong> - required trial duration for final rate
measurements.</t>
  <t><strong>initial_trial_duration</strong> - trial duration for initial MLRsearch phase.</t>
  <t><strong>final_relative_width</strong> - required measurement resolution expressed as
(lower_bound, upper_bound) interval width relative to upper_bound.</t>
  <t><strong>packet_loss_ratios</strong> - list of maximum acceptable PLR search criteria.</t>
  <t><strong>number_of_intermediate_phases</strong> - number of phases between the initial
phase and the final phase. Impacts the overall MLRsearch duration.
Less phases are required for well behaving cases, more phases
may be needed to reduce the overall search duration for worse behaving cases.</t>
</list></t>

</section>
<section anchor="initial-phase"><name>Initial Phase</name>

<t><list style="numbers">
  <t>First trial measures at configured maximum transmit rate (MTR) and
discovers maximum receive rate (MRR).
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = maximum_transmit_rate.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR = measured receive rate.
Received rate is computed as intended load multiplied by pass ratio
(which is one minus loss ratio). This is useful when loss ratio is computed
from a different metric than intended load. For example, intended load
can be in transactions (multiple packets each), but loss ratio is computed
on level of packets, not transactions.</t>
      <t>Example: If MTR is 10 transactions per second, and each transaction has
10 packets, and receive rate is 90 packets per second, then loss rate
is 10%, and MRR is computed to be 9 transactions per second.</t>
    </list>
If MRR is too close to MTR, MRR is set below MTR so that interval width
is equal to the width goal of the first intermediate phase.
If MRR is less than min_rate, min_rate is used.</t>
  <t>Second trial measures at MRR and discovers MRR2.
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = MRR.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR2 = measured receive rate.
If MRR2 is less than min_rate, min_rate is used.
If loss ratio is less or equal to the smallest target loss ratio,
MRR2 is set to a value above MRR, so that interval width is equal
to the width goal of the first intermediate phase.
MRR2 could end up being equal to MTR (for example if both measurements so far
had zero loss), which was already measured, step 3 is skipped in that case.</t>
    </list></t>
  <t>Third trial measures at MRR2.
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = MRR2.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR3 = measured receive rate.
If MRR3 is less than min_rate, min_rate is used.
If step 3 is not skipped, the first trial measurement is forgotten.
This is done because in practice (if MRR2 is above MRR), external search
from MRR and MRR2 is likely to lead to a faster intermediate phase
than a bisect between MRR2 and MTR.</t>
    </list></t>
</list></t>

</section>
<section anchor="non-initial-phases"><name>Non-Initial Phases</name>

<t><list style="numbers">
  <t>Main phase loop:
  <list style="numbers">
      <t>IN: trial_duration for the current phase. Set to
initial_trial_duration for the first intermediate phase; to
final_trial_duration for the final phase; or to the element of
interpolating geometric sequence for other intermediate phases.
For example with two intermediate phases, trial_duration of the
second intermediate phase is the geometric average of
initial_trial_duration and final_trial_duration.</t>
      <t>IN: relative_width_goal for the current phase. Set to
final_relative_width for the final phase; doubled for each
preceding phase. For example with two intermediate phases, the
first intermediate phase uses quadruple of final_relative_width
and the second intermediate phase uses double of
final_relative_width.</t>
      <t>IN: Measurement results from the previous phase (previous duration).</t>
      <t>Internal target ratio loop:
      <list style="numbers">
          <t>IN: Target loss ratio for this iteration of ratio loop.</t>
          <t>IN: Measurement results from all previous ratio loop iterations
of current phase (current duration).</t>
          <t>DO: According to the procedure described in point 2:
          <list style="numbers">
              <t>either exit the phase (by jumping to 1.5),</t>
              <t>or exit loop iteration (by continuing with next target loss ratio,
jumping to 1.4.1),</t>
              <t>or calculate new transmit rate to measure with.</t>
            </list></t>
          <t>DO: Perform the trial measurement at the new transmit rate and
current trial duration, compute its loss ratio.</t>
          <t>DO: Add the result and go to next iteration (1.4.1),
including the added trial result in 1.4.2.</t>
        </list></t>
      <t>OUT: Measurement results from this phase.</t>
      <t>OUT: In the final phase, bounds for each target loss ratio
are extracted and returned.
      <list style="numbers">
          <t>If a valid bound does not exist, use min_rate or max_rate.</t>
        </list></t>
    </list></t>
  <t>New transmit rate (or exit) calculation (for point 1.4.3):
  <list style="numbers">
      <t>If the previous duration has the best upper and lower bound,
select the middle point as the new transmit rate.
      <list style="numbers">
          <t>See 2.5.3. below for the exact splitting logic.</t>
          <t>This can be a no-op if interval is narrow enough already,
in that case continue with 2.2.</t>
          <t>Discussion, assuming the middle point is selected and measured:
          <list style="numbers">
              <t>Regardless of loss rate measured, the result becomes
either best upper or best lower bound at current duration.</t>
              <t>So this condition is satisfied at most once per iteration.</t>
              <t>This also explains why previous phase has double width goal:
              <list style="numbers">
                  <t>We avoid one more bisection at previous phase.</t>
                  <t>At most one bound (per iteration) is re-measured
with current duration.</t>
                  <t>Each re-measurement can trigger an external search.</t>
                  <t>Such surprising external searches are the main hurdle
in achieving low overall search durations.</t>
                  <t>Even without 1.1, there is at most one external search
per phase and target loss ratio.</t>
                  <t>But without 1.1 there can be two re-measurements,
each coming with a risk of triggering external search.</t>
                </list></t>
            </list></t>
        </list></t>
      <t>If the previous duration has one bound best, select its transmit rate.
In deterministic case this is the last measurement needed this iteration.</t>
      <t>If only upper bound exists in current duration results:
      <list style="numbers">
          <t>This can only happen for the smallest target loss ratio.</t>
          <t>If the upper bound was measured at min_rate,
exit the whole phase early (not investigating other target loss ratios).</t>
          <t>Select new transmit rate using external search:
          <list style="numbers">
              <t>For computing previous interval size, use:
              <list style="numbers">
                  <t>second tightest bound at current duration,</t>
                  <t>or tightest bound of previous duration,
if compatible and giving a more narrow interval,</t>
                  <t>or target interval width if none of the above is available.</t>
                  <t>In any case increase to target interval width if smaller.</t>
                </list></t>
              <t>Quadruple the interval width.</t>
              <t>Use min_rate if the new transmit rate is lower.</t>
            </list></t>
        </list></t>
      <t>If only lower bound exists in current duration results:
      <list style="numbers">
          <t>If the lower bound was measured at max_rate,
exit this iteration (continue with next lowest target loss ratio).</t>
          <t>Select new transmit rate using external search:
          <list style="numbers">
              <t>For computing previous interval size, use:
              <list style="numbers">
                  <t>second tightest bound at current duration,</t>
                  <t>or tightest bound of previous duration,
if compatible and giving a more narrow interval,</t>
                  <t>or target interval width if none of the above is available.</t>
                  <t>In any case increase to target interval width if smaller.</t>
                </list></t>
              <t>Quadruple the interval width.</t>
              <t>Use max_rate if the new transmit rate is higher.</t>
            </list></t>
        </list></t>
      <t>The only remaining option is both bounds in current duration results.
      <list style="numbers">
          <t>This can happen in two ways, depending on how the lower bound
was chosen.
          <list style="numbers">
              <t>It could have been selected for the current loss ratio,
e.g. in re-measurement (2.2) or in initial bisect (2.1).</t>
              <t>It could have been found as an upper bound for the previous smaller
target loss ratio, in which case it might be too low.</t>
              <t>The algorithm does not track which one is the case,
as the decision logic works well regardless.</t>
            </list></t>
          <t>Compute &quot;extending down&quot; candidate transmit rate exactly as in 2.3.</t>
          <t>Compute &quot;bisecting&quot; candidate transmit rate:
          <list style="numbers">
              <t>Compute the current interval width from the two bounds.</t>
              <t>Express the width as a (float) multiple of the target width goal
for this phase.</t>
              <t>If the multiple is not higher than one, it means the width goal
is met. Exit this iteration and continue with next higher
target loss ratio.</t>
              <t>If the multiple is two or less, use half of that
for new width if the lower subinterval.</t>
              <t>Round the multiple up to nearest even integer.</t>
              <t>Use half of that for new width if the lower subinterval.</t>
              <t>Example: If lower bound is 2.0 and upper bound is 5.0, and width
goal is 1.0, the new candidate transmit rate will be 4.0.
This can save a measurement when 4.0 has small loss.
Selecting the average (3.5) would never save a measurement,
giving more narrow bounds instead.</t>
            </list></t>
          <t>If either candidate computation want to exit the iteration,
do as bisecting candidate computation says.</t>
          <t>The remaining case is both candidates wanting to measure at some rate.
Use the higher rate. This prefers external search down narrow enough
interval, competing with perfectly sized lower bisect subinterval.</t>
        </list></t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="fdio-csit-implementation"><name>FD.io CSIT Implementation</name>

<t>The only known working implementation of MLRsearch is in
the open-source code running in Linux Foundation
FD.io CSIT project <xref target="FDio-CSIT-MLRsearch"></xref> as part of
a Continuous Integration / Continuous Development (CI/CD) framework.</t>

<t>MLRsearch is also available as a Python package in <xref target="PyPI-MLRsearch"></xref>.</t>

<section anchor="additional-details"><name>Additional details</name>

<t>This document so far has been describing a simplified version of
MLRsearch algorithm. The full algorithm as implemented in CSIT contains
additional logic, which makes some of the details (but not general
ideas) above incorrect. Here is a short description of the additional
logic as a list of principles, explaining their main differences from
(or additions to) the simplified description, but without detailing
their mutual interaction.</t>

<t><list style="numbers">
  <t>Logarithmic transmit rate.
  <list style="symbols">
      <t>In order to better fit the relative width goal, the interval
doubling and halving is done differently.</t>
      <t>For example, the middle of 2 and 8 is 4, not 5.</t>
    </list></t>
  <t>Timeout for bad cases.
  <list style="symbols">
      <t>The worst case for MLRsearch is when each phase converges to
intervals way different than the results of the previous phase.</t>
      <t>Rather than suffer total search time several times larger than pure
binary search, the implemented tests fail themselves when the
search takes too long (given by argument <em>timeout</em>).</t>
    </list></t>
  <t>Intended count.
  <list style="symbols">
      <t>The number of packets to send during the trial should be equal to
the intended load multiplied by the duration.
      <list style="symbols">
          <t>Also multiplied by a coefficient, if loss ratio is calculated
from a different metric.
          <list style="symbols">
              <t>Example: If a successful transaction uses 10 packets,
load is given in transactions per second, but loss ratio is calculated
from packets, so the coefficient to get intended count of packets
is 10.</t>
            </list></t>
        </list></t>
      <t>But in practice that does not work.
      <list style="symbols">
          <t>It could result in a fractional number of packets,</t>
          <t>so it has to be rounded in a way traffic generator chooses,</t>
          <t>which may depend on the number of traffic flows
and traffic generator worker threads.</t>
        </list></t>
    </list></t>
  <t>Attempted count. As the real number of intended packets is not known exactly,
the computation uses the number of packets traffic generator reports as sent.
Unless overridden by the next point.</t>
  <t>Duration stretching.
  <list style="symbols">
      <t>In some cases, traffic generator may get overloaded,
causing it to take significantly longer (than duration) to send all packets.</t>
      <t>The implementation uses an explicit stop,
      <list style="symbols">
          <t>causing lower attempted count in those cases.</t>
        </list></t>
      <t>The implementation tolerates some small difference between
attempted count and intended count.
      <list style="symbols">
          <t>10 microseconds worth of traffic is sufficient for our tests.</t>
        </list></t>
      <t>If the difference is higher, the unsent packets are counted as lost.
      <list style="symbols">
          <t>This forces the search to avoid the regions of high duration stretching.</t>
          <t>The final bounds describe the performance of not just SUT,
but of the whole system, including the traffic generator.</t>
        </list></t>
    </list></t>
  <t>Excess packets.
  <list style="symbols">
      <t>In some test (e.g. using TCP flows) Traffic generator reacts to packet loss
by retransmission. Usually, such packet loss is already affecting loss ratio.
If a test also wants to treat retransmissions due to heavily delayed packets
also as a failure, this is once again visible as a mismatch between
the intended count and the attempted count.</t>
      <t>The CSIT implementation simply looks at absolute value of the difference,
so it offers the same small tolerance before it starts marking a &quot;loss&quot;.</t>
    </list></t>
  <t>For result processing, we use lower bounds and ignore upper bounds.</t>
</list></t>

<section anchor="fdio-csit-input-parameters"><name>FD.io CSIT Input Parameters</name>

<t><list style="numbers">
  <t><strong>max_rate</strong> - Typical values: 2 * 14.88 Mpps for 64B
10GE link rate, 2 * 18.75 Mpps for 64B 40GE NIC (specific model).</t>
  <t><strong>min_rate</strong> - Value: 2 * 9001 pps (we reserve 9000 pps
for latency measurements).</t>
  <t><strong>final_trial_duration</strong> - Value: 30.0 seconds.</t>
  <t><strong>initial_trial_duration</strong> - Value: 1.0 second.</t>
  <t><strong>final_relative_width</strong> - Value: 0.005 (0.5%).</t>
  <t><strong>packet_loss_ratios</strong> - Value: 0.0, 0.005 (0.0% for NDR, 0.5% for PDR).</t>
  <t><strong>number_of_intermediate_phases</strong> - Value: 2.
The value has been chosen based on limited experimentation to date.
More experimentation needed to arrive to clearer guidelines.</t>
  <t><strong>timeout</strong> - Limit for the overall search duration (for one search).
If MLRsearch oversteps this limit, it immediately declares the test failed,
to avoid wasting even more time on a misbehaving SUT.
Value: 600.0 (seconds).</t>
  <t><strong>expansion_coefficient</strong> - Width multiplier for external search.
Value: 4.0 (interval width is quadroupled).
Value of 2.0 is best for well-behaved SUTs, but value of 4.0 has been found
to decrease overall search time for worse-behaved SUT configurations,
contributing more to the overall set of different SUT configurations tested.</t>
</list></t>

</section>
</section>
<section anchor="example-mlrsearch-run"><name>Example MLRsearch Run</name>

<t>The following list describes a search from a real test run in CSIT
(using the default input values as above).</t>

<t><list style="symbols">
  <t>Initial phase, trial duration 1.0 second.</t>
</list></t>

<t>Measurement 1, intended load 18750000.0 pps (MTR),
measured loss ratio 0.7089514628479618 (valid upper bound for both NDR and PDR).</t>

<t>Measurement 2, intended load 5457160.071600716 pps (MRR),
measured loss ratio 0.018650817320118702 (new tightest upper bounds).</t>

<t>Measurement 3, intended load 5348832.933500009 pps (slightly less than MRR2
in preparation for first intermediate phase target interval width),
measured loss ratio 0.00964383362905351 (new tightest upper bounds).</t>

<t><list style="symbols">
  <t>First intermediate phase starts, trial duration still 1.0 seconds.</t>
</list></t>

<t>Measurement 4, intended load 4936605.579021453 pps (no lower bound,
performing external search downwards, for NDR),
measured loss ratio 0.0 (valid lower bound for both NDR and PDR).</t>

<t>Measurement 5, intended load 5138587.208637197 pps (bisecting for NDR),
measured loss ratio 0.0 (new tightest lower bounds).</t>

<t>Measurement 6, intended load 5242656.244044665 pps (bisecting),
measured loss ratio 0.013523745379347257 (new tightest upper bounds).</t>

<t><list style="symbols">
  <t>Both intervals are narrow enough.</t>
  <t>Second intermediate phase starts, trial duration 5.477225575051661 seconds.</t>
</list></t>

<t>Measurement 7, intended load 5190360.904111567 pps (initial bisect for NDR),
measured loss ratio 0.0023533920869969953 (NDR upper bound, PDR lower bound).</t>

<t>Measurement 8, intended load 5138587.208637197 pps (re-measuring NDR lower bound),
measured loss ratio 1.2080222912800403e-06 (new tightest NDR upper bound).</t>

<t><list style="symbols">
  <t>The two intervals have separate bounds from now on.</t>
</list></t>

<t>Measurement 9, intended load 4936605.381062318 pps (external NDR search down),
measured loss ratio 0.0 (new valid NDR lower bound).</t>

<t>Measurement 10, intended load 5036583.888432355 pps (NDR bisect),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>

<t>Measurement 11, intended load 5087329.903232804 pps (NDR bisect),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>

<t><list style="symbols">
  <t>NDR interval is narrow enough, PDR interval not ready yet.</t>
</list></t>

<t>Measurement 12, intended load 5242656.244044665 pps (re-measuring PDR upper bound),
measured loss ratio 0.0101174866190136 (still valid PDR upper bound).</t>

<t><list style="symbols">
  <t>Also PDR interval is narrow enough, with valid bounds for this duration.</t>
  <t>Final phase starts, trial duration 30.0 seconds.</t>
</list></t>

<t>Measurement 13, intended load 5112894.3238511775 pps (initial bisect for NDR),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>

<t>Measurement 14, intended load 5138587.208637197 (re-measuring NDR upper bound),
measured loss ratio 2.030389804256833e-06 (still valid PDR upper bound).</t>

<t><list style="symbols">
  <t>NDR interval is narrow enough, PDR interval not yet.</t>
</list></t>

<t>Measurement 15, intended load 5216443.04126728 pps (initial bisect for PDR),
measured loss ratio 0.005620871287975237 (new tightest PDR upper bound).</t>

<t>Measurement 16, intended load 5190360.904111567 (re-measuring PDR lower bound),
measured loss ratio 0.0027629971184465604 (still valid PDR lower bound).</t>

<t><list style="symbols">
  <t>PDR interval is also narrow enough.</t>
  <t>Returning bounds:</t>
  <t>NDR_LOWER = 5112894.3238511775 pps; NDR_UPPER = 5138587.208637197 pps;</t>
  <t>PDR_LOWER = 5190360.904111567 pps; PDR_UPPER = 5216443.04126728 pps.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>No requests of IANA.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>Benchmarking activities as described in this memo are limited to
technology characterization of a DUT/SUT using controlled stimuli in a
laboratory environment, with dedicated address space and the constraints
specified in the sections above.</t>

<t>The benchmarking network topology will be an independent test setup and
MUST NOT be connected to devices that may forward the test traffic into
a production network or misroute traffic to the test management network.</t>

<t>Further, benchmarking is performed on a &quot;black-box&quot; basis, relying
solely on measurements observable external to the DUT/SUT.</t>

<t>Special capabilities SHOULD NOT exist in the DUT/SUT specifically for
benchmarking purposes. Any implications for network security arising
from the DUT/SUT SHOULD be identical in the lab and in production
networks.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>Many thanks to Alec Hothan of OPNFV NFVbench project for thorough
review and numerous useful comments and suggestions.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>

&RFC2544;


    </references>

    <references title='Informative References'>

<reference anchor="FDio-CSIT-MLRsearch" target="https://s3-docs.fd.io/csit/rls2110/report/introduction/methodology_data_plane_throughput/methodology_data_plane_throughput.html#mlrsearch-tests">
  <front>
    <title>FD.io CSIT Test Methodology - MLRsearch</title>
    <author >
      <organization></organization>
    </author>
    <date year="2021" month="November"/>
  </front>
</reference>
<reference anchor="PyPI-MLRsearch" target="https://pypi.org/project/MLRsearch/0.4.0/">
  <front>
    <title>MLRsearch 0.4.0, Python Package Index</title>
    <author >
      <organization></organization>
    </author>
    <date year="2021" month="April"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
nsUv8wTi/1ydHaQvg+bz/lYTLyr0Ea6d1E86LLtkSX7gekEEhGq7UfH9CY5E
1WrT7j655uqIi1jJj7NtljeaxSuYadJj7VVpfYKTE7Z3diLFqpJ5hSjs6i4q
GvHnHMGGRLVTxYsS9qn8QgAy3Ke3QV4jGoYBcJ+5aKZXJuwefRo1us2Balde
ycKRT+h7o8sBhdikLY6dbI85jtVnv1AkqcEaAdQKN1+V5YLK4Yqbg94NP6fy
hxZ5o3Ss6+YqRszCKEMNP+zJ+u0Oj2bdflbdqbjqG797DMQtf1wXBmRCxsAW
EOrZZ7RfTmgb3jveLjx3L1Zj/0hif3GL23tAVY91+VfxpT6WTozubHwg3kD6
29M/xfOMy2eKeM2XnfJ9KacSObvBJFBpFmwfOqAyrl8o+cwlaot+xmfMcgBq
CiwHk8nHL7XNVHaLPA42pHH7FjLt1HCxWA0n7VjpW8yDJD1hAQfWRgZ0fdbm
8fGtcPQ6EtJ79lVojgLwLPH6D6O+IHjZWYVlnokWA4VxMWlkv++L9+ZYPAwr
xAg6PB8yKaktZdhBY4o00mIMHK7jIRL6BanE5npGNzTnEAyGAZkgzBzQMSLN
86TGaoH8GAWmOS91iVHhPe4MXNybrGnYeleUcVd4o9hmz/TBcfRetTxaKLvZ
keER8AMNeYbXBWEHohVobR3jeNdxMYrISNjNPaCf2wkIzjFlji+RhNHRA+x5
WwdhVWGJWbVBjSJaEZXJZc1GCuSymbdrc/X9sk85JgtDh71awhSC/Bv0jXZs
s3rALWac7A2kxwmtZ5+thixbuANRW87l1/K0zE8lT0MCjXU/HGcMkHzPUWMq
am77ko0svFDCe8LtauFZys6U6A4p8rxvOA3Z7y4pcKMa9+V6OeiQH7dsfkn+
iHoUE71oQKkQHcOR+VtrtpmhhXjbUHyBtxu4GK+Dm0o5Jwnh66JUs418xJNw
VLD8pDmYbIDwbedPhxIcTPSYLcJY8N9uwCR6ZiHKXINOLNNhHqlX5qZ9/jYQ
IiXXm6FKK0kNY3JUD0zNF8esBO+DW0gaBYGqF1csrAPdRmTBgStysGcdB3Hw
lsSIMVJIUWhgLS5WVjIhZbeB+89ZKbj0cMZlKFzQXISpgrfkf6VA9g4ZYcyW
IjyoK28lPokEIcf3hJx55hxzv5DtzIsfuSXny7JV5SHwl6Bu5GkWSTxLWpMh
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

-->

</rfc>

