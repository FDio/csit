<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.6.4 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

<!ENTITY RFC2544 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2544.xml">
]>


<rfc ipr="trust200902" docName="draft-ietf-bmwg-mlrsearch-02" category="info" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Multiple Loss Ratio Search">Multiple Loss Ratio Search for Packet Throughput (MLRsearch)</title>

    <author initials="M." surname="Konstantynowicz" fullname="Maciek Konstantynowicz" role="editor">
      <organization>Cisco Systems</organization>
      <address>
        <email>mkonstan@cisco.com</email>
      </address>
    </author>
    <author initials="V." surname="Polak" fullname="Vratko Polak">
      <organization>Cisco Systems</organization>
      <address>
        <email>vrpolak@cisco.com</email>
      </address>
    </author>

    <date year="2022" month="March" day="07"/>

    <area>ops</area>
    <workgroup>Benchmarking Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>TODO: Update after all sections are ready.</t>

<t>This document proposes changes to <xref target="RFC2544"></xref>, specifically to packet
throughput search methodology, by defining a new search algorithm
referred to as Multiple Loss Ratio search (MLRsearch for short). Instead
of relying on binary search with pre-set starting offered load, it
proposes a novel approach discovering the starting point in the initial
phase, and then searching for packet throughput based on defined packet
loss ratio (PLR) input criteria and defined final trial duration time.
One of the key design principles behind MLRsearch is minimizing the
total test duration and searching for multiple packet throughput rates
(each with a corresponding PLR) concurrently, instead of doing it
sequentially.</t>

<t>The main motivation behind MLRsearch is the new set of challenges and
requirements posed by NFV (Network Function Virtualization),
specifically software based implementations of NFV data planes. Using
<xref target="RFC2544"></xref> in the experience of the authors yields often not repetitive
and not replicable end results due to a large number of factors that are
out of scope for this draft. MLRsearch aims to address this challenge
in a simple way of getting the same result sooner, so more repetitions
can be done to describe the replicability.</t>



    </abstract>



  </front>

  <middle>



<section anchor="terminology"><name>Terminology</name>

<t>TODO: Update after most other sections are updated.</t>


<t><list style="symbols">
  <t>TODO: The current text uses Throughput for the zero loss ratio load.
Is the capital T needed/useful?</t>
  <t>DUT and SUT: see the definitions in https://gerrit.fd.io/r/c/csit/+/35545</t>
  <t>Traffic Generator (TG) and Traffic Analyzer (TA): see
https://datatracker.ietf.org/doc/html/rfc6894#section-4
TODO: Maybe there is an earlier RFC?</t>
  <t>Overall search time: the time it takes to find all required loads within
their precision goals, starting from zero trials measured at given
DUT configuration and traffic profile.</t>
  <t>TODO: traffic profile?</t>
  <t>Intended load: https://datatracker.ietf.org/doc/html/rfc2285#section-3.5.1</t>
  <t>Offered load: https://datatracker.ietf.org/doc/html/rfc2285#section-3.5.2</t>
  <t>Maximum offered load (MOL): see
https://datatracker.ietf.org/doc/html/rfc2285#section-3.5.3</t>
  <t>Forwarding rate at maximum offered load (FRMOL)
https://datatracker.ietf.org/doc/html/rfc2285#section-3.6.2</t>
  <t>Trial Loss Count: the number of frames transmitted
minus the number of frames received. Negative count is possible,
e.g. when SUT duplicates some frames.</t>
  <t>Trial Loss Ratio: ratio of frames received relative to frames
transmitted over the trial duration.
For bi-directional throughput tests, the aggregate ratio is calculated,
based on the aggregate number of frames transmitted and received.
If the trial loss count is negative, its absolute value MUST be used
to keep compliance with RFC2544.</t>
  <t>Safe load: any value, such that trial measurement at this (or lower)
intended load is correcrly handled by both TG and TA, regardless of SUT behavior.
Frequently, it is not known what the safe load is.</t>
  <t>Max load (TODO rename?): Maximal intended load to be used during search.
Benchmarking team decides which value is low enough
to guarantee values reported by TG and TA are reliable.
It has to be a safe load, but it can be lower than a safe load estimate
for added safety.
See the subsection on unreliable test equipment below.
This value MUST NOT be higher than MOL, which itself MUST NOT
be higher than Maximum Frame Rate
https://datatracker.ietf.org/doc/html/rfc2544#section-20</t>
  <t>Min load: Minimal intended load to be used during search.
Benchmarking team decides which value is high enough
to guarantee the trial measurement results are valid.
E.g. considerable overall search time can be saved by declaring SUT
faulty if min load trial shows too high loss rate.
Zero frames per second is a valid min load value</t>
  <t>Effective loss ratio: a corrected value of trial loss ratio
chosen to avoid difficulties if SUT exhibits decreasing loss ratio
with increasing load. It is the maximum of trial loss ratios
measured at the same duration on all loads smaller than (and including)
the current one.</t>
  <t>Target loss ratio: a loss ratio value acting as an input for the search.
The search is finding tight enough lower and upper bounds in intended load,
so that the measurement at the lower bound has smaller or equal
trial loss ratio, and upper bound has strictly larger trial loss ratio.
For the tightest upper bound, the effective loss ratio is the same as
trial loss ratio at that upper bound load.
For the tightest lower bound, the effective loss ratio can be higher
than the trial loss ratio at that lower bound, but still not larger
than the target loss ratio.</t>
  <t>TODO: Search algorithm.</t>
  <t>TODO: Precision goal.</t>
  <t>TODO: Define a &quot;benchmarking group&quot;.</t>
  <t>TODO: Upper and lower bound.</t>
  <t>TODO: Valid and invalid bound?</t>
  <t>TODO: Interval and interval width?</t>
</list></t>

<t>TODO: Mention NIC/PCI bandwidth/pps limits can be lower than bandwidth of medium.</t>

</section>
<section anchor="intentions-of-this-document"><name>Intentions of this document</name>


<t>The intention of this document is to provide recommendations for:
* optimizing search for multiple target loss ratios at once,
* speeding up the overall search time,
* improve search results repeatability and comparability.</t>

<t>No part of RFC2544 is intended to be obsoleted by this document.</t>


</section>
<section anchor="rfc2544"><name>RFC2544</name>

<section anchor="throughput-search"><name>Throughput search</name>

<t>It is useful to restate the key requirements of RFC2544
using the new terminology (see section Terminology).</t>

<t>The following sections of RFC2544 are of interest for this document.</t>

<t><list style="symbols">
  <t>https://datatracker.ietf.org/doc/html/rfc2544#section-20
Mentions the max load SHOULD not be larget than the theoretical
maximum rate for the frame size on the media.</t>
  <t>https://datatracker.ietf.org/doc/html/rfc2544#section-23
Lists the actions to be done for each trial measurement,
it also mentions loss rate as an example of trial measurement results.
This document uses loss count instead, as that is the quantity
that is easier for the current test equipment to measure,
e.g. it is not affected by the real traffic duration.
TODO: Time uncertainty again.</t>
  <t>https://datatracker.ietf.org/doc/html/rfc2544#section-24
Mentions &quot;full length trials&quot; leading to the Throughput found,
as opposed to shorter trial durations, allowed in an attempt
to &quot;minimize the length of search procedure&quot;.
This document talks about &quot;final trial duration&quot; and aims to
&quot;optimize overal search time&quot;.</t>
  <t>https://datatracker.ietf.org/doc/html/rfc2544#section-26.1
with https://www.rfc-editor.org/errata/eid422
finaly states requirements for the search procedure.
It boils down to &quot;increase intended load upon zero trial loss
and decrease intended load upon non-zero trial loss&quot;.</t>
</list></t>

<t>No additional constraints are placed on the load selection,
and there is no mention of an exit condition, e.g. when there is enough
trial measurements to proclaim the largest load with zero trial loss
(and final trial duration) to be the Throughput found.</t>


</section>
<section anchor="simple-bisection"><name>Simple bisection</name>

<t>There is one obvious and simple search algorithm which conforms
to throughput search requirements: simple bijection.</t>

<t>Input: target precision, in frames per second.</t>

<t>Procedure:</t>

<t><list style="numbers">
  <t>Chose min load to be zero.
  <list style="numbers">
      <t>No need to measure, loss count has to be zero.</t>
      <t>Use the zero load as the current lower bound.</t>
    </list></t>
  <t>Chose max load to be the max value allowed by bandwidth of the medium.
  <list style="numbers">
      <t>Perform a trial measurement (at the full length duration) at max load.</t>
      <t>If there is zero trial loss count, return max load as Throughput.</t>
      <t>Use max load as the current upper bound.</t>
    </list></t>
  <t>Repeat until the difference between lower bound and upper bound is
smaller or equal to the precision goal.
  <list style="numbers">
      <t>If it is not larget, return the current lower bound as Throughput.</t>
      <t>Else: Chose new load as the arithmetic average of lower and upper bound.</t>
      <t>Perform a trial measurement (at the full length duration) at this load.</t>
      <t>If the trial loss rate is zero, consider the load as new lower bound.</t>
      <t>Else consider the load as the new upper bound.</t>
      <t>Jump back to the repeat at 3.</t>
    </list></t>
</list></t>

<t>Another possible stop condition is the overal search time so far,
but that is not really a different condition, as the time for search to reach
the precision goal is just a function of precision goal, trial duration
and the difference between max and min load.</t>

<t>While this algorithm can be accomodated to search for multiple
target loss ratios &quot;at the same time (see somewhere below),
it is still missing multiple improvement which give MLRsearch
considerably better overal search time in practice.</t>

</section>
</section>
<section anchor="problems"><name>Problems</name>

<section anchor="repeatability-and-comparability"><name>Repeatability and Comparability</name>

<t>RFC2544 does not suggest to repeat Throughput search,

and from just one Throughput value, it cannot be determined
how repeatable that value is (how likely it is for a repeated Throughput search
to end up with a value less then the precision goal away from the first value).</t>

<t>Depending on SUT behavior, different benchmark groups
can report significantly different Througput values,
even when using identical SUT and test equipment,
just because of minor differences in their search algorithm
(e.g. different max load value).</t>

<t>While repeatability can be addressed by repeating the search several times,
the differences in the comparability scenario may be systematic,
e.g. seeming like a bias in one or both benchmark groups.</t>

<t>MLRsearch algorithm does not really help with the repeatability problem.
This document RECOMMENDS to repeat a selection of &quot;important&quot; tests
ten times, so users can ascertain the repeatability of the results.</t>

<t>TODO: How to report? Average and standard deviation?</t>

<t>Following MLRsearch algorithm leaves less freedom for the benchmark groups
to encounter the comparability problem,
alghough more research is needed to determine the effect
of MLRsearch&#39;s tweakable parameters.</t>





</section>
<section anchor="non-zero-target-loss-ratios"><name>Non-Zero Target Loss Ratios</name>

<t>https://datatracker.ietf.org/doc/html/rfc1242#section-3.17
defines Throughput as:
    The maximum rate at which none of the offered frames
    are dropped by the device.</t>

<t>and then it says:
    Since even the loss of one frame in a
    data stream can cause significant delays while
    waiting for the higher level protocols to time out,
    it is useful to know the actual maximum data
    rate that the device can support.</t>


<t>New &quot;software DUTs&quot; (traffic forwarding programs running on
commercial-off-the-shelf compute server hardware) frequently exhibit quite
low repeatability of Throughput results per above definition.</t>

<t>This is due to, in general, throughput rates of software DUTs (programs)
being sensitive to server resource allocation by OS during runtime,
as well as any interrupts or blocking of software threads involved
in packet processing.</t>

<t>To deal with this, this document recommends discovery of multiple throughput rates of interest for software DUTs that run on general purpose COTS servers (with x86, AArch64 Instruction Set Architectures):
* throughput rate with target of zero packet loss ratio.
* at least one throughput rate with target of non-zero packet loss ratio.</t>

<t>In our experience, the higher the target loss ratio is,
the better is the repeatability of the corresponding load found.</t>

<t>TODO: Define a good name for a load corresponding to a specific non-zero
target loss ration, while keeping Throughput for the load corresponding
to zero target loss ratio.</t>

<t>This document RECOMMENDS the benchmark groups to search for corresponding loads
to at least one non-zero target loss ratio.
This document does not suggest any particular non-zero target loss ratio value
to search the corresponding load for.</t>


</section>
</section>
<section anchor="solution-ideas"><name>Solution ideas</name>

<t>This document gives several independent ideas on how to lower the (average)
overall search time, while remaining unconditionally compliant with RFC2544
(and adding some of extensions).</t>

<t>This document also specifies one particular way to combine all the ideas
into a single search algorithm class (single logic with few tweakable parameters).</t>

<t>Little to no research has been done into the question of which combination
of ideas achieves the best compromise with respect to overal search time,
high repeatability and high comparability.</t>

<t>TODO: How important it is to discuss particular implementation choices,
especially when motivated by non-deterministic SUT behavior?</t>

<section anchor="short-duration-trials"><name>Short duration trials</name>

<t>https://datatracker.ietf.org/doc/html/rfc2544#section-24
already mentions the possibity of using shorter duration
for trials that are not part of &quot;final determination&quot;.</t>

<t>Obviously, the upper and lower bound from a smaller duration trial
can be used as the initial upper and lower bound for the final determination.</t>

<t>MLRsearch makes it clear a re-measurement is always needed
(new trial measurement with the same load but longer duration).
It also specifes what to do if the longer trial is no longer a valid bound
(TODO define?), e.g. start an external search.
Additionaly one halving can be saved during the shorter duration search.</t>

</section>
<section anchor="frmol-as-reasonable-start"><name>FRMOL as reasonable start</name>

<t>TODO expand: Overal search ends with &quot;final determination&quot; search,
preceded by &quot;shorter duration search&quot; preceded by &quot;bound initialization&quot;,
where the bounds can be considerably different from min and max load.</t>

<t>For SUTs with high repeatability, the FRMOL is usually a good approximation
of Throughput. But for less repeatable SUTs, forwarding rate (TODO define)
is frequently a bad approximation to Throughput, therefore halving
and other robust-to-worst-case approaches have to be used.
Still, forwarding rate at FRMOL load can be a good initial bound.</t>

</section>
<section anchor="non-zero-loss-ratios"><name>Non-zero loss ratios</name>

<t>See the &quot;Popularity of non-zero target loss ratios&quot; section above.</t>

<t>TODO: Define &quot;trial measurement result classification criteria&quot;,
or keep reusing long phrases without definitions?</t>

<t>A search for a load corresponding to a non-zero target loss rate
is very similar to a search for Throughput,
just the criterion when to increase or decrease the intended load
for the next trial measurement uses the comparison of trial loss ratio
to the target loss ratio (instead of comparing loss count to zero)
Any search algorithm that works for Throughput can be easily used also for
non-zero target loss rates, perhaps with small modifications
in places where the measured forwarding rate is used.</t>

<t>Note that it is possible to search for multiple loss ratio goals if needed.</t>

</section>
<section anchor="concurrent-ratio-search"><name>Concurrent ratio search</name>

<t>A single trial measurement result can act as an upper bound for a lower
target loss ratio, and as a lower bound for a higher target loss ratio
at the same time. This is an example of how
it can be advantageous to search for all loss ratio goals &quot;at once&quot;,
or at least &quot;reuse&quot; trial measurement result done so far.</t>

<t>Even when a search algorithm is fully deterministic in load selection
while focusing on a single loss ratio and trial duration,
the choice of iteration order between target loss ratios and trial durations
can affect the obtained results in subtle ways.
MLRsearch offers one particular ordering.</t>


</section>
<section anchor="load-selection-heuristics-and-shortcuts"><name>Load selection heuristics and shortcuts</name>

<t>Aside of the two heuristics already mentioned (FRMOL based initial bounds
and saving one halving when increasing trial duration),
there are other tricks that can save some overall search time
at the cost of keeping the difference between final lower and upper bound
intentionally large (but still within the precision goal).</t>

<t>TODO: Refer implementation subsections on:
* Uneven splits.
* Rounding the interval width up.
* Using old invalid bounds for interval width guessing.</t>

<t>The impact on overall duration is probably small,
and the effect on result distribution maybe even smaller.
TODO: Is the two-liner above useful at all?</t>

</section>
</section>
<section anchor="non-compliance-with-rfc2544"><name>Non-compliance with RFC2544</name>

<t>It is possible to achieve even faster search times by abandoning
some requirements and suggestions of RFC2544,
mainly by reducing the wait times at start and end of trial.</t>

<t>Such results are therefore no longer compliant with RFC2544
(or at least not unconditionally),
but they may still be useful for internal usage, or for comparing
results of different DUTs achieved with an identical non-compliant algorithm.</t>

<t>TODO: Refer to the subsection with CSIT customizations.</t>

</section>
<section anchor="additional-requirements"><name>Additional Requirements</name>

<t>RFC2544 can be understood as having a number of implicit requirements.
They are made explicit in this section
(as requirements for this document, not for RFC2544).</t>

<t>Recommendations on how to properly address the implicit requirements
are out of scope of this document.</t>


<section anchor="todo-search-stop-criteria"><name>TODO: Search Stop Criteria</name>

<t>TODO: Mention the timeout parameter?</t>


</section>
<section anchor="reliability-of-test-equipment"><name>Reliability of Test Equipment</name>

<t>Both TG and TA MUST be able to handle correctly
every intended load used during the search.</t>

<t>On TG side, the difference between Intended Load and Offered Load
MUST be small.</t>

<t>TODO: How small? Difference of one packet may not be measurable
due to time uncertainties.</t>


<t>TODO expand: time uncertainty.</t>

<t>To ensure that, max load (see Terminology) has to be set to low enough value.
Benchmark groups MAY list the max load value used,
especially if the Throughput value is equal (or close) to the max load.</t>


<t>Solutions (even problem formulations) for the following open problems
are outside of the scope of this document:
* Detecting when the test equipment operates above its safe load.
* Finding a large but safe load value.
* Correcting any result affected by max load value not being a safe load.</t>



<section anchor="very-late-frames"><name>Very late frames</name>


<t>RFC2544 requires quite conservative time delays
see https://datatracker.ietf.org/doc/html/rfc2544#section-23
to prevent frames buffered in one trial measurement
to be counted as received in a subsequent trial measurement.</t>

<t>However, for some SUTs it may still be possible to buffer enough frames,
so they are still sending them (perhaps in bursts)
when the next trial measurement starts.
Sometimes, this can be detected as a negative trial loss count, e.g. TA receiving
more frames than TG has sent during this trial measurement. Frame duplication
is another way of causing the negative trial loss count.</t>

<t>https://datatracker.ietf.org/doc/html/rfc2544#section-10
recommends to use sequence numbers in frame payloads,
but generating and verifying them requires test equipment resources,
which may be not plenty enough to suport at high loads.
(Using low enough max load would work, but frequently that would be
smaller than SUT&#39;s sctual Throughput.)</t>

<t>RFC2544 does not offer any solution to the negative loss problem,
except implicitly treating negative trial loss counts
the same way as positive trial loss counts.</t>

<t>This document also does not offer any practical solution.</t>

<t>Instead, this document SUGGESTS the search algorithm to take any precaution
necessary to avoid very late frames.</t>

<t>This document also REQUIRES any detected duplicate frames to be counted
as additional lost frames.
This document also REQUIRES, any negative trial loss ratio
to be treated as positive trial loss ratio of the same absolute value.</t>


<t>!!! Nothing below is up-to-date with draft v02. !!!</t>

</section>
</section>
</section>
<section anchor="mlrsearch-background"><name>MLRsearch Background</name>

<t>TODO: Old section, probably obsoleted by preceding section(s).</t>

<t>Multiple Loss Ratio search (MLRsearch) is a packet throughput search
algorithm suitable for deterministic systems (as opposed to
probabilistic systems). MLRsearch discovers multiple packet throughput
rates in a single search, each rate is associated with a distinct
Packet Loss Ratio (PLR) criterion.</t>

<t>For cases when multiple rates need to be found, this property makes
MLRsearch more efficient in terms of time execution, compared to
traditional throughput search algorithms that discover a single packet
rate per defined search criteria (e.g. a binary search specified by
<xref target="RFC2544"></xref>). MLRsearch reduces execution time even further by relying on
shorter trial durations of intermediate steps, with only the final
measurements conducted at the specified final trial duration. This
results in the shorter overall search execution time when compared to a
traditional binary search, while guaranteeing the same results for
deterministic systems.</t>

<t>In practice, two rates with distinct PLRs are commonly used for packet
throughput measurements of NFV systems: Non Drop Rate (NDR) with PLR=0
and Partial Drop Rate (PDR) with PLR&gt;0. The rest of this document
describes MLRsearch with NDR and PDR pair as an example.</t>

<t>Similarly to other throughput search approaches like binary search,
MLRsearch is effective for SUTs/DUTs with PLR curve that is
non-decreasing with growing offered load. It may not be as
effective for SUTs/DUTs with abnormal PLR curves, although
it will always converge to some value.</t>

<t>MLRsearch relies on traffic generator to qualify the received packet
stream as error-free, and invalidate the results if any disqualifying
errors are present e.g. out-of-sequence frames.</t>

<t>MLRsearch can be applied to both uni-directional and bi-directional
throughput tests.</t>

<t>For bi-directional tests, MLRsearch rates and ratios are aggregates of
both directions, based on the following assumptions:</t>

<t><list style="symbols">
  <t>Traffic transmitted by traffic generator and received by SUT/DUT
has the same packet rate in each direction,
in other words the offered load is symmetric.</t>
  <t>SUT/DUT packet processing capacity is the same in both directions,
resulting in the same packet loss under load.</t>
</list></t>

<t>MLRsearch can be applied even without those assumptions,
but in that case the aggregate loss ratio is less useful as a metric.</t>

<t>MLRsearch can be used for network transactions consisting of more than
just one packet, or anything else that has intended load as input
and loss ratio as output (duration as input is optional).
This text uses mostly packet-centric language.</t>

</section>
<section anchor="mlrsearch-overview"><name>MLRsearch Overview</name>

<t>The main properties of MLRsearch:</t>

<t><list style="symbols">
  <t>MLRsearch is a duration aware multi-phase multi-rate search algorithm:
  <list style="symbols">
      <t>Initial Phase determines promising starting interval for the search.</t>
      <t>Intermediate Phases progress towards defined final search criteria.</t>
      <t>Final Phase executes measurements according to the final search
criteria.</t>
      <t>Final search criteria are defined by following inputs:
      <list style="symbols">
          <t>Target PLRs (e.g. 0.0 and 0.005 when searching for NDR and PDR).</t>
          <t>Final trial duration.</t>
          <t>Measurement resolution.</t>
        </list></t>
    </list></t>
  <t>Initial Phase:
  <list style="symbols">
      <t>Measure MRR over initial trial duration.</t>
      <t>Measured MRR is used as an input to the first intermediate phase.</t>
    </list></t>
  <t>Multiple Intermediate Phases:
  <list style="symbols">
      <t>Trial duration:
      <list style="symbols">
          <t>Start with initial trial duration in the first intermediate phase.</t>
          <t>Converge geometrically towards the final trial duration.</t>
        </list></t>
      <t>Track all previous trial measurement results:
      <list style="symbols">
          <t>Duration, offered load and loss ratio are tracked.</t>
          <t>Effective loss ratios are tracked.
          <list style="symbols">
              <t>While in practice, real loss ratios can decrease with increasing load,
effective loss ratios never decrease. This is achieved by sorting
results by load, and using the effective loss ratio of the previous load
if the current loss ratio is smaller than that.</t>
            </list></t>
          <t>The algorithm queries the results to find best lower and upper bounds.
          <list style="symbols">
              <t>Effective loss ratios are always used.</t>
            </list></t>
          <t>The phase ends if all target loss ratios have tight enough bounds.</t>
        </list></t>
      <t>Search:
      <list style="symbols">
          <t>Iterate over target loss ratios in increasing order.</t>
          <t>If both upper and lower bound are in measurement results for this duration,
apply bisect until the bounds are tight enough,
and continue with next loss ratio.</t>
          <t>If a bound is missing for this duration, but there exists a bound
from the previous duration (compatible with the other bound
at this duration), re-measure at the current duration.</t>
          <t>If a bound in one direction (upper or lower) is missing for this duration,
and the previous duration does not have a compatible bound,
compute the current &quot;interval size&quot; from the second tightest bound
in the other direction (lower or upper respectively)
for the current duration, and choose next offered load for external search.</t>
          <t>The logic guarantees that a measurement is never repeated with both
duration and offered load being the same.</t>
          <t>The logic guarantees that measurements for higher target loss ratio
iterations (still within the same phase duration) do not affect validity
and tightness of bounds for previous target loss ratio iterations
(at the same duration).</t>
        </list></t>
      <t>Use of internal and external searches:
      <list style="symbols">
          <t>External search:
          <list style="symbols">
              <t>It is a variant of &quot;exponential search&quot;.</t>
              <t>The &quot;interval size&quot; is multiplied by a configurable constant
(powers of two work well with the subsequent internal search).</t>
            </list></t>
          <t>Internal search:
          <list style="symbols">
              <t>A variant of binary search that measures at offered load between
the previously found bounds.</t>
              <t>The interval does not need to be split into exact halves,
if other split can get to the target width goal faster.
              <list style="symbols">
                  <t>The idea is to avoid returning interval narrower than the current
width goal. See sample implementation details, below.</t>
                </list></t>
            </list></t>
        </list></t>
    </list></t>
  <t>Final Phase:
  <list style="symbols">
      <t>Executed with the final test trial duration, and the final width
goal that determines resolution of the overall search.</t>
    </list></t>
  <t>Intermediate Phases together with the Final Phase are called
Non-Initial Phases.</t>
  <t>The returned bounds stay within prescribed min_rate and max_rate.
  <list style="symbols">
      <t>When returning min_rate or max_rate, the returned bounds may be invalid.
      <list style="symbols">
          <t>E.g. upper bound at max_rate may come from a measurement
with loss ratio still not higher than the target loss ratio.</t>
        </list></t>
    </list></t>
</list></t>

<t>The main benefits of MLRsearch vs. binary search include:</t>

<t><list style="symbols">
  <t>In general, MLRsearch is likely to execute more trials overall, but
likely less trials at a set final trial duration.</t>
  <t>In well behaving cases, e.g. when results do not depend on trial
duration, it greatly reduces (&gt;50%) the overall duration compared to a
single PDR (or NDR) binary search over duration, while finding
multiple drop rates.</t>
  <t>In all cases MLRsearch yields the same or similar results to binary
search.</t>
  <t>Note: both binary search and MLRsearch are susceptible to reporting
non-repeatable results across multiple runs for very bad behaving
cases.</t>
</list></t>

<t>Caveats:</t>

<t><list style="symbols">
  <t>Worst case MLRsearch can take longer than a binary search, e.g. in case of
drastic changes in behaviour for trials at varying durations.
  <list style="symbols">
      <t>Re-measurement at higher duration can trigger a long external search.
That never happens in binary search, which uses the final duration
from the start.</t>
    </list></t>
</list></t>

</section>
<section anchor="sample-implementation"><name>Sample Implementation</name>

<t>Following is a brief description of a sample MLRsearch implementation,
which is a simplified version of the existing implementation.</t>

<section anchor="input-parameters"><name>Input Parameters</name>

<t><list style="numbers">
  <t><strong>max_rate</strong> - Maximum Transmit Rate (MTR) of packets to
be used by external traffic generator implementing MLRsearch,
limited by the actual Ethernet link(s) rate, NIC model or traffic
generator capabilities.</t>
  <t><strong>min_rate</strong> - minimum packet transmit rate to be used for
measurements. MLRsearch fails if lower transmit rate needs to be
used to meet search criteria.</t>
  <t><strong>final_trial_duration</strong> - required trial duration for final rate
measurements.</t>
  <t><strong>initial_trial_duration</strong> - trial duration for initial MLRsearch phase.</t>
  <t><strong>final_relative_width</strong> - required measurement resolution expressed as
(lower_bound, upper_bound) interval width relative to upper_bound.</t>
  <t><strong>packet_loss_ratios</strong> - list of maximum acceptable PLR search criteria.</t>
  <t><strong>number_of_intermediate_phases</strong> - number of phases between the initial
phase and the final phase. Impacts the overall MLRsearch duration.
Less phases are required for well behaving cases, more phases
may be needed to reduce the overall search duration for worse behaving cases.</t>
</list></t>

</section>
<section anchor="initial-phase"><name>Initial Phase</name>

<t><list style="numbers">
  <t>First trial measures at configured maximum transmit rate (MTR) and
discovers maximum receive rate (MRR).
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = maximum_transmit_rate.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR = measured receive rate.
Received rate is computed as intended load multiplied by pass ratio
(which is one minus loss ratio). This is useful when loss ratio is computed
from a different metric than intended load. For example, intended load
can be in transactions (multiple packets each), but loss ratio is computed
on level of packets, not transactions.</t>
      <t>Example: If MTR is 10 transactions per second, and each transaction has
10 packets, and receive rate is 90 packets per second, then loss rate
is 10%, and MRR is computed to be 9 transactions per second.</t>
    </list>
If MRR is too close to MTR, MRR is set below MTR so that interval width
is equal to the width goal of the first intermediate phase.
If MRR is less than min_rate, min_rate is used.</t>
  <t>Second trial measures at MRR and discovers MRR2.
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = MRR.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR2 = measured receive rate.
If MRR2 is less than min_rate, min_rate is used.
If loss ratio is less or equal to the smallest target loss ratio,
MRR2 is set to a value above MRR, so that interval width is equal
to the width goal of the first intermediate phase.
MRR2 could end up being equal to MTR (for example if both measurements so far
had zero loss), which was already measured, step 3 is skipped in that case.</t>
    </list></t>
  <t>Third trial measures at MRR2.
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = MRR2.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR3 = measured receive rate.
If MRR3 is less than min_rate, min_rate is used.
If step 3 is not skipped, the first trial measurement is forgotten.
This is done because in practice (if MRR2 is above MRR), external search
from MRR and MRR2 is likely to lead to a faster intermediate phase
than a bisect between MRR2 and MTR.</t>
    </list></t>
</list></t>

</section>
<section anchor="non-initial-phases"><name>Non-Initial Phases</name>

<t><list style="numbers">
  <t>Main phase loop:
  <list style="numbers">
      <t>IN: trial_duration for the current phase. Set to
initial_trial_duration for the first intermediate phase; to
final_trial_duration for the final phase; or to the element of
interpolating geometric sequence for other intermediate phases.
For example with two intermediate phases, trial_duration of the
second intermediate phase is the geometric average of
initial_trial_duration and final_trial_duration.</t>
      <t>IN: relative_width_goal for the current phase. Set to
final_relative_width for the final phase; doubled for each
preceding phase. For example with two intermediate phases, the
first intermediate phase uses quadruple of final_relative_width
and the second intermediate phase uses double of
final_relative_width.</t>
      <t>IN: Measurement results from the previous phase (previous duration).</t>
      <t>Internal target ratio loop:
      <list style="numbers">
          <t>IN: Target loss ratio for this iteration of ratio loop.</t>
          <t>IN: Measurement results from all previous ratio loop iterations
of current phase (current duration).</t>
          <t>DO: According to the procedure described in point 2:
          <list style="numbers">
              <t>either exit the phase (by jumping to 1.5),</t>
              <t>or exit loop iteration (by continuing with next target loss ratio,
jumping to 1.4.1),</t>
              <t>or calculate new transmit rate to measure with.</t>
            </list></t>
          <t>DO: Perform the trial measurement at the new transmit rate and
current trial duration, compute its loss ratio.</t>
          <t>DO: Add the result and go to next iteration (1.4.1),
including the added trial result in 1.4.2.</t>
        </list></t>
      <t>OUT: Measurement results from this phase.</t>
      <t>OUT: In the final phase, bounds for each target loss ratio
are extracted and returned.
      <list style="numbers">
          <t>If a valid bound does not exist, use min_rate or max_rate.</t>
        </list></t>
    </list></t>
  <t>New transmit rate (or exit) calculation (for point 1.4.3):
  <list style="numbers">
      <t>If the previous duration has the best upper and lower bound,
select the middle point as the new transmit rate.
      <list style="numbers">
          <t>See 2.5.3. below for the exact splitting logic.</t>
          <t>This can be a no-op if interval is narrow enough already,
in that case continue with 2.2.</t>
          <t>Discussion, assuming the middle point is selected and measured:
          <list style="numbers">
              <t>Regardless of loss rate measured, the result becomes
either best upper or best lower bound at current duration.</t>
              <t>So this condition is satisfied at most once per iteration.</t>
              <t>This also explains why previous phase has double width goal:
              <list style="numbers">
                  <t>We avoid one more bisection at previous phase.</t>
                  <t>At most one bound (per iteration) is re-measured
with current duration.</t>
                  <t>Each re-measurement can trigger an external search.</t>
                  <t>Such surprising external searches are the main hurdle
in achieving low overall search durations.</t>
                  <t>Even without 1.1, there is at most one external search
per phase and target loss ratio.</t>
                  <t>But without 1.1 there can be two re-measurements,
each coming with a risk of triggering external search.</t>
                </list></t>
            </list></t>
        </list></t>
      <t>If the previous duration has one bound best, select its transmit rate.
In deterministic case this is the last measurement needed this iteration.</t>
      <t>If only upper bound exists in current duration results:
      <list style="numbers">
          <t>This can only happen for the smallest target loss ratio.</t>
          <t>If the upper bound was measured at min_rate,
exit the whole phase early (not investigating other target loss ratios).</t>
          <t>Select new transmit rate using external search:
          <list style="numbers">
              <t>For computing previous interval size, use:
              <list style="numbers">
                  <t>second tightest bound at current duration,</t>
                  <t>or tightest bound of previous duration,
if compatible and giving a more narrow interval,</t>
                  <t>or target interval width if none of the above is available.</t>
                  <t>In any case increase to target interval width if smaller.</t>
                </list></t>
              <t>Quadruple the interval width.</t>
              <t>Use min_rate if the new transmit rate is lower.</t>
            </list></t>
        </list></t>
      <t>If only lower bound exists in current duration results:
      <list style="numbers">
          <t>If the lower bound was measured at max_rate,
exit this iteration (continue with next lowest target loss ratio).</t>
          <t>Select new transmit rate using external search:
          <list style="numbers">
              <t>For computing previous interval size, use:
              <list style="numbers">
                  <t>second tightest bound at current duration,</t>
                  <t>or tightest bound of previous duration,
if compatible and giving a more narrow interval,</t>
                  <t>or target interval width if none of the above is available.</t>
                  <t>In any case increase to target interval width if smaller.</t>
                </list></t>
              <t>Quadruple the interval width.</t>
              <t>Use max_rate if the new transmit rate is higher.</t>
            </list></t>
        </list></t>
      <t>The only remaining option is both bounds in current duration results.
      <list style="numbers">
          <t>This can happen in two ways, depending on how the lower bound
was chosen.
          <list style="numbers">
              <t>It could have been selected for the current loss ratio,
e.g. in re-measurement (2.2) or in initial bisect (2.1).</t>
              <t>It could have been found as an upper bound for the previous smaller
target loss ratio, in which case it might be too low.</t>
              <t>The algorithm does not track which one is the case,
as the decision logic works well regardless.</t>
            </list></t>
          <t>Compute &quot;extending down&quot; candidate transmit rate exactly as in 2.3.</t>
          <t>Compute &quot;bisecting&quot; candidate transmit rate:
          <list style="numbers">
              <t>Compute the current interval width from the two bounds.</t>
              <t>Express the width as a (float) multiple of the target width goal
for this phase.</t>
              <t>If the multiple is not higher than one, it means the width goal
is met. Exit this iteration and continue with next higher
target loss ratio.</t>
              <t>If the multiple is two or less, use half of that
for new width if the lower subinterval.</t>
              <t>Round the multiple up to nearest even integer.</t>
              <t>Use half of that for new width if the lower subinterval.</t>
              <t>Example: If lower bound is 2.0 and upper bound is 5.0, and width
goal is 1.0, the new candidate transmit rate will be 4.0.
This can save a measurement when 4.0 has small loss.
Selecting the average (3.5) would never save a measurement,
giving more narrow bounds instead.</t>
            </list></t>
          <t>If either candidate computation want to exit the iteration,
do as bisecting candidate computation says.</t>
          <t>The remaining case is both candidates wanting to measure at some rate.
Use the higher rate. This prefers external search down narrow enough
interval, competing with perfectly sized lower bisect subinterval.</t>
        </list></t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="fdio-csit-implementation"><name>FD.io CSIT Implementation</name>

<t>The only known working implementation of MLRsearch is in
the open-source code running in Linux Foundation
FD.io CSIT project <xref target="FDio-CSIT-MLRsearch"></xref> as part of
a Continuous Integration / Continuous Development (CI/CD) framework.</t>

<t>MLRsearch is also available as a Python package in <xref target="PyPI-MLRsearch"></xref>.</t>

<section anchor="additional-details"><name>Additional details</name>

<t>This document so far has been describing a simplified version of
MLRsearch algorithm. The full algorithm as implemented in CSIT contains
additional logic, which makes some of the details (but not general
ideas) above incorrect. Here is a short description of the additional
logic as a list of principles, explaining their main differences from
(or additions to) the simplified description, but without detailing
their mutual interaction.</t>

<t><list style="numbers">
  <t>Logarithmic transmit rate.
  <list style="symbols">
      <t>In order to better fit the relative width goal, the interval
doubling and halving is done differently.</t>
      <t>For example, the middle of 2 and 8 is 4, not 5.</t>
    </list></t>
  <t>Timeout for bad cases.
  <list style="symbols">
      <t>The worst case for MLRsearch is when each phase converges to
intervals way different than the results of the previous phase.</t>
      <t>Rather than suffer total search time several times larger than pure
binary search, the implemented tests fail themselves when the
search takes too long (given by argument <em>timeout</em>).</t>
    </list></t>
  <t>Intended count.
  <list style="symbols">
      <t>The number of packets to send during the trial should be equal to
the intended load multiplied by the duration.
      <list style="symbols">
          <t>Also multiplied by a coefficient, if loss ratio is calculated
from a different metric.
          <list style="symbols">
              <t>Example: If a successful transaction uses 10 packets,
load is given in transactions per second, but loss ratio is calculated
from packets, so the coefficient to get intended count of packets
is 10.</t>
            </list></t>
        </list></t>
      <t>But in practice that does not work.
      <list style="symbols">
          <t>It could result in a fractional number of packets,</t>
          <t>so it has to be rounded in a way traffic generator chooses,</t>
          <t>which may depend on the number of traffic flows
and traffic generator worker threads.</t>
        </list></t>
    </list></t>
  <t>Attempted count. As the real number of intended packets is not known exactly,
the computation uses the number of packets traffic generator reports as sent.
Unless overridden by the next point.</t>
  <t>Duration stretching.
  <list style="symbols">
      <t>In some cases, traffic generator may get overloaded,
causing it to take significantly longer (than duration) to send all packets.</t>
      <t>The implementation uses an explicit stop,
      <list style="symbols">
          <t>causing lower attempted count in those cases.</t>
        </list></t>
      <t>The implementation tolerates some small difference between
attempted count and intended count.
      <list style="symbols">
          <t>10 microseconds worth of traffic is sufficient for our tests.</t>
        </list></t>
      <t>If the difference is higher, the unsent packets are counted as lost.
      <list style="symbols">
          <t>This forces the search to avoid the regions of high duration stretching.</t>
          <t>The final bounds describe the performance of not just SUT,
but of the whole system, including the traffic generator.</t>
        </list></t>
    </list></t>
  <t>Excess packets.
  <list style="symbols">
      <t>In some test (e.g. using TCP flows) Traffic generator reacts to packet loss
by retransmission. Usually, such packet loss is already affecting loss ratio.
If a test also wants to treat retransmissions due to heavily delayed packets
also as a failure, this is once again visible as a mismatch between
the intended count and the attempted count.</t>
      <t>The CSIT implementation simply looks at absolute value of the difference,
so it offers the same small tolerance before it starts marking a &quot;loss&quot;.</t>
    </list></t>
  <t>For result processing, we use lower bounds and ignore upper bounds.</t>
</list></t>

<section anchor="fdio-csit-input-parameters"><name>FD.io CSIT Input Parameters</name>

<t><list style="numbers">
  <t><strong>max_rate</strong> - Typical values: 2 * 14.88 Mpps for 64B
10GE link rate, 2 * 18.75 Mpps for 64B 40GE NIC (specific model).</t>
  <t><strong>min_rate</strong> - Value: 2 * 9001 pps (we reserve 9000 pps
for latency measurements).</t>
  <t><strong>final_trial_duration</strong> - Value: 30.0 seconds.</t>
  <t><strong>initial_trial_duration</strong> - Value: 1.0 second.</t>
  <t><strong>final_relative_width</strong> - Value: 0.005 (0.5%).</t>
  <t><strong>packet_loss_ratios</strong> - Value: 0.0, 0.005 (0.0% for NDR, 0.5% for PDR).</t>
  <t><strong>number_of_intermediate_phases</strong> - Value: 2.
The value has been chosen based on limited experimentation to date.
More experimentation needed to arrive to clearer guidelines.</t>
  <t><strong>timeout</strong> - Limit for the overall search duration (for one search).
If MLRsearch oversteps this limit, it immediately declares the test failed,
to avoid wasting even more time on a misbehaving SUT.
Value: 600.0 (seconds).</t>
  <t><strong>expansion_coefficient</strong> - Width multiplier for external search.
Value: 4.0 (interval width is quadroupled).
Value of 2.0 is best for well-behaved SUTs, but value of 4.0 has been found
to decrease overall search time for worse-behaved SUT configurations,
contributing more to the overall set of different SUT configurations tested.</t>
</list></t>

</section>
</section>
<section anchor="example-mlrsearch-run"><name>Example MLRsearch Run</name>

<t>The following list describes a search from a real test run in CSIT
(using the default input values as above).</t>

<t><list style="symbols">
  <t>Initial phase, trial duration 1.0 second.</t>
</list></t>

<t>Measurement 1, intended load 18750000.0 pps (MTR),
measured loss ratio 0.7089514628479618 (valid upper bound for both NDR and PDR).</t>

<t>Measurement 2, intended load 5457160.071600716 pps (MRR),
measured loss ratio 0.018650817320118702 (new tightest upper bounds).</t>

<t>Measurement 3, intended load 5348832.933500009 pps (slightly less than MRR2
in preparation for first intermediate phase target interval width),
measured loss ratio 0.00964383362905351 (new tightest upper bounds).</t>

<t><list style="symbols">
  <t>First intermediate phase starts, trial duration still 1.0 seconds.</t>
</list></t>

<t>Measurement 4, intended load 4936605.579021453 pps (no lower bound,
performing external search downwards, for NDR),
measured loss ratio 0.0 (valid lower bound for both NDR and PDR).</t>

<t>Measurement 5, intended load 5138587.208637197 pps (bisecting for NDR),
measured loss ratio 0.0 (new tightest lower bounds).</t>

<t>Measurement 6, intended load 5242656.244044665 pps (bisecting),
measured loss ratio 0.013523745379347257 (new tightest upper bounds).</t>

<t><list style="symbols">
  <t>Both intervals are narrow enough.</t>
  <t>Second intermediate phase starts, trial duration 5.477225575051661 seconds.</t>
</list></t>

<t>Measurement 7, intended load 5190360.904111567 pps (initial bisect for NDR),
measured loss ratio 0.0023533920869969953 (NDR upper bound, PDR lower bound).</t>

<t>Measurement 8, intended load 5138587.208637197 pps (re-measuring NDR lower bound),
measured loss ratio 1.2080222912800403e-06 (new tightest NDR upper bound).</t>

<t><list style="symbols">
  <t>The two intervals have separate bounds from now on.</t>
</list></t>

<t>Measurement 9, intended load 4936605.381062318 pps (external NDR search down),
measured loss ratio 0.0 (new valid NDR lower bound).</t>

<t>Measurement 10, intended load 5036583.888432355 pps (NDR bisect),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>

<t>Measurement 11, intended load 5087329.903232804 pps (NDR bisect),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>

<t><list style="symbols">
  <t>NDR interval is narrow enough, PDR interval not ready yet.</t>
</list></t>

<t>Measurement 12, intended load 5242656.244044665 pps (re-measuring PDR upper bound),
measured loss ratio 0.0101174866190136 (still valid PDR upper bound).</t>

<t><list style="symbols">
  <t>Also PDR interval is narrow enough, with valid bounds for this duration.</t>
  <t>Final phase starts, trial duration 30.0 seconds.</t>
</list></t>

<t>Measurement 13, intended load 5112894.3238511775 pps (initial bisect for NDR),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>

<t>Measurement 14, intended load 5138587.208637197 (re-measuring NDR upper bound),
measured loss ratio 2.030389804256833e-06 (still valid PDR upper bound).</t>

<t><list style="symbols">
  <t>NDR interval is narrow enough, PDR interval not yet.</t>
</list></t>

<t>Measurement 15, intended load 5216443.04126728 pps (initial bisect for PDR),
measured loss ratio 0.005620871287975237 (new tightest PDR upper bound).</t>

<t>Measurement 16, intended load 5190360.904111567 (re-measuring PDR lower bound),
measured loss ratio 0.0027629971184465604 (still valid PDR lower bound).</t>

<t><list style="symbols">
  <t>PDR interval is also narrow enough.</t>
  <t>Returning bounds:</t>
  <t>NDR_LOWER = 5112894.3238511775 pps; NDR_UPPER = 5138587.208637197 pps;</t>
  <t>PDR_LOWER = 5190360.904111567 pps; PDR_UPPER = 5216443.04126728 pps.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>No requests of IANA.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>Benchmarking activities as described in this memo are limited to
technology characterization of a DUT/SUT using controlled stimuli in a
laboratory environment, with dedicated address space and the constraints
specified in the sections above.</t>

<t>The benchmarking network topology will be an independent test setup and
MUST NOT be connected to devices that may forward the test traffic into
a production network or misroute traffic to the test management network.</t>

<t>Further, benchmarking is performed on a &quot;black-box&quot; basis, relying
solely on measurements observable external to the DUT/SUT.</t>

<t>Special capabilities SHOULD NOT exist in the DUT/SUT specifically for
benchmarking purposes. Any implications for network security arising
from the DUT/SUT SHOULD be identical in the lab and in production
networks.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>Many thanks to Alec Hothan of OPNFV NFVbench project for thorough
review and numerous useful comments and suggestions.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>

&RFC2544;


    </references>

    <references title='Informative References'>

<reference anchor="FDio-CSIT-MLRsearch" target="https://s3-docs.fd.io/csit/rls2110/report/introduction/methodology_data_plane_throughput/methodology_data_plane_throughput.html#mlrsearch-tests">
  <front>
    <title>FD.io CSIT Test Methodology - MLRsearch</title>
    <author >
      <organization></organization>
    </author>
    <date year="2021" month="November"/>
  </front>
</reference>
<reference anchor="PyPI-MLRsearch" target="https://pypi.org/project/MLRsearch/0.4.0/">
  <front>
    <title>MLRsearch 0.4.0, Python Package Index</title>
    <author >
      <organization></organization>
    </author>
    <date year="2021" month="April"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
+efo/wLw1ElpFvEAAA==

-->

</rfc>

