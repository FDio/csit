<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.19 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2544 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2544.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-bmwg-mlrsearch-01" category="info">

  <front>
    <title>Multiple Loss Ratio Search for Packet Throughput (MLRsearch)</title>

    <author initials="M." surname="Konstantynowicz" fullname="Maciek Konstantynowicz" role="editor">
      <organization>Cisco Systems</organization>
      <address>
        <email>mkonstan@cisco.com</email>
      </address>
    </author>
    <author initials="V." surname="Polak" fullname="Vratko Polak" role="editor">
      <organization>Cisco Systems</organization>
      <address>
        <email>vrpolak@cisco.com</email>
      </address>
    </author>

    <date year="2021" month="July" day="09"/>

    <area>ops</area>
    <workgroup>Benchmarking Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes changes to <xref target="RFC2544"></xref>, specifically to packet
throughput search methodology, by defining a new search algorithm
referred to as Multiple Loss Ratio search (MLRsearch for short). Instead
of relying on binary search with pre-set starting offered load, it
proposes a novel approach discovering the starting point in the initial
phase, and then searching for packet throughput based on defined packet
loss ratio (PLR) input criteria and defined final trial duration time.
One of the key design principles behind MLRsearch is minimizing the
total test duration and searching for multiple packet throughput rates
(each with a corresponding PLR) concurrently, instead of doing it
sequentially.</t>

<t>The main motivation behind MLRsearch is the new set of challenges and
requirements posed by NFV (Network Function Virtualization),
specifically software based implementations of NFV data planes. Using
<xref target="RFC2544"></xref> in the experience of the authors yields often not repetitive
and not replicable end results due to a large number of factors that are
out of scope for this draft. MLRsearch aims to address this challenge
in a simple way of getting the same result sooner, so more repetitions
can be done to describe the replicability.</t>



    </abstract>


  </front>

  <middle>


<section anchor="terminology" title="Terminology">

<t><list style="symbols">
  <t>Frame size: size of an Ethernet Layer-2 frame on the wire, including
any VLAN tags (dot1q, dot1ad) and Ethernet FCS, but excluding Ethernet
preamble and inter-frame gap. Measured in bytes (octets).</t>
  <t>Packet size: same as frame size, both terms used interchangeably.</t>
  <t>Device Under Test (DUT): In software networking, &quot;device&quot; denotes a
specific piece of software tasked with packet processing. Such device
is surrounded with other software components (such as operating system
kernel). It is not possible to run devices without also running the
other components, and hardware resources are shared between both. For
purposes of testing, the whole set of hardware and software components
is called &quot;system under test&quot; (SUT). As SUT is the part of the whole
test setup performance of which can be measured by <xref target="RFC2544"></xref> methods,
this document uses SUT instead of <xref target="RFC2544"></xref> DUT. Device under test
(DUT) can be re-introduced when analysing test results using whitebox
techniques, but this document sticks to blackbox testing.</t>
  <t>System Under Test (SUT): System under test (SUT) is a part of the
whole test setup whose performance is to be benchmarked. The complete
test setup contains other parts, whose performance is either already
established, or not affecting the benchmarking result.</t>
  <t>Bi-directional throughput tests: involve packets/frames flowing in
both transmit and receive directions over every tested interface of
SUT/DUT. Packet flow metrics are measured per direction, and can be
reported as aggregate for both directions and/or separately
for each measured direction. In most cases bi-directional tests
use the same (symmetric) load in both directions.</t>
  <t>Uni-directional throughput tests: involve packets/frames flowing in
only one direction, i.e. either transmit or receive direction, over
every tested interface of SUT/DUT. Packet flow metrics are measured
and are reported for measured direction.</t>
  <t>Packet Loss Ratio (PLR): ratio of packets received relative to packets
transmitted over the test trial duration, calculated using formula:
PLR = ( pkts_transmitted - pkts_received ) / pkts_transmitted.
For bi-directional throughput tests aggregate PLR is calculated based
on the aggregate number of packets transmitted and received.</t>
  <t>Effective loss ratio: A corrected value of measured packet loss ratio
chosen to avoid difficulties if SUT exhibits decreasing loss
with increasing load. Maximum of packet loss ratios measured at the same
duration on all loads smaller than (and including) the current one.</t>
  <t>Target loss ratio: A packet loss ratio value acting as an imput for search.
The search is finding tight enough lower and upper bound in intended load,
so that the lower bound has smaller or equal loss ratio, and upper bound
has strictly larger loss ratio. For the tighterst upper bound,
the effective loss ratio is the same as packet loss ratio.
For the tightest lower bound, the effective loss ratio can be higher
than the packet loss ratio, but still not larger than the target loss ratio.</t>
  <t>Packet Throughput Rate: maximum packet offered load DUT/SUT forwards
within the specified Packet Loss Ratio (PLR). In many cases the rate
depends on the frame size processed by DUT/SUT. Hence packet
throughput rate MUST be quoted with specific frame size as received by
DUT/SUT during the measurement. For bi-directional tests, packet
throughput rate should be reported as aggregate for both directions.
Measured in packets-per-second (pps) or frames-per-second (fps),
equivalent metrics.</t>
  <t>Bandwidth Throughput Rate: a secondary metric calculated from packet
throughput rate using formula: bw_rate = pkt_rate * (frame_size +
L1_overhead) * 8, where L1_overhead for Ethernet includes preamble (8
octets) and inter-frame gap (12 octets). For bi-directional tests,
bandwidth throughput rate should be reported as aggregate for both
directions. Expressed in bits-per-second (bps).</t>
  <t>Non Drop Rate (NDR): maximum packet/bandwith throughput rate sustained
by DUT/SUT at PLR equal zero (zero packet loss) specific to tested
frame size(s). MUST be quoted with specific packet size as received by
DUT/SUT during the measurement. Packet NDR measured in
packets-per-second (or fps), bandwidth NDR expressed in
bits-per-second (bps).</t>
  <t>Partial Drop Rate (PDR): maximum packet/bandwith throughput rate
sustained by DUT/SUT at PLR greater than zero (non-zero packet loss)
specific to tested frame size(s). MUST be quoted with specific packet
size as received by DUT/SUT during the measurement. Packet PDR
measured in packets-per-second (or fps), bandwidth PDR expressed in
bits-per-second (bps).</t>
  <t>Maximum Receive Rate (MRR): packet/bandwidth rate regardless of PLR
sustained by DUT/SUT under specified Maximum Transmit Rate (MTR)
packet load offered by traffic generator. MUST be quoted with both
specific packet size and MTR as received by DUT/SUT during the
measurement. Packet MRR measured in packets-per-second (or fps),
bandwidth MRR expressed in bits-per-second (bps).</t>
  <t>Trial: a single measurement step. See <xref target="RFC2544"></xref> section 23.</t>
  <t>Trial duration: amount of time over which packets are transmitted
in a single measurement step.</t>
</list></t>

</section>
<section anchor="mlrsearch-background" title="MLRsearch Background">

<t>Multiple Loss Ratio search (MLRsearch) is a packet throughput search
algorithm suitable for deterministic systems (as opposed to
probabilistic systems). MLRsearch discovers multiple packet throughput
rates in a single search, each rate is associated with a distinct
Packet Loss Ratio (PLR) criterion.</t>

<t>For cases when multiple rates need to be found, this property makes
MLRsearch more efficient in terms of time execution, compared to
traditional throughput search algorithms that discover a single packet
rate per defined search criteria (e.g. a binary search specified by
<xref target="RFC2544"></xref>). MLRsearch reduces execution time even further by relying on
shorter trial durations of intermediate steps, with only the final
measurements conducted at the specified final trial duration. This
results in the shorter overall search execution time when compared to a
traditional binary search, while guaranteeing the same results for
deterministic systems.</t>

<t>In practice two rates with distinct PLRs are commonly used for packet
throughput measurements of NFV systems: Non Drop Rate (NDR) with PLR=0
and Partial Drop Rate (PDR) with PLR&gt;0. The rest of this document
describes MLRsearch with NDR and PDR pair as an example.</t>

<t>Similarly to other throughput search approaches like binary search,
MLRsearch is effective for SUTs/DUTs with PLR curve that is
non-decreasing with growing offered load. It may not be as
effective for SUTs/DUTs with abnormal PLR curves, although
it will always converge to some value.</t>

<t>MLRsearch relies on traffic generator to qualify the received packet
stream as error-free, and invalidate the results if any disqualifying
errors are present e.g. out-of-sequence frames.</t>

<t>MLRsearch can be applied to both uni-directional and bi-directional
throughput tests.</t>

<t>For bi-directional tests, MLRsearch rates and ratios are aggregates of
both directions, based on the following assumptions:</t>

<t><list style="symbols">
  <t>Traffic transmitted by traffic generator and received by SUT/DUT
has the same packet rate in each direction,
in other words the offered load is symmetric.</t>
  <t>SUT/DUT packet processing capacity is the same in both directions,
resulting in the same packet loss under load.</t>
</list></t>

<t>MLRsearch can be applied even without those assumptions,
but in that case the aggregate loss ratio is less useful as a metric.</t>

<t>MLRsearch can be used for network transactions consisting of more than
just one packet, or anything else that has intended load as input
and loss ratio as output (duration as input is optional).
This text uses mostly packet-centric language.</t>

</section>
<section anchor="mlrsearch-overview" title="MLRsearch Overview">

<t>The main properties of MLRsearch:</t>

<t><list style="symbols">
  <t>MLRsearch is a duration aware multi-phase multi-rate search algorithm:
  <list style="symbols">
      <t>Initial Phase determines promising starting interval for the search.</t>
      <t>Intermediate Phases progress towards defined final search criteria.</t>
      <t>Final Phase executes measurements according to the final search
criteria.</t>
      <t>Final search criteria are defined by following inputs:
      <list style="symbols">
          <t>Target PLRs (e.g. 0.0 and 0.005 when searching for NDR and PDR).</t>
          <t>Final trial duration.</t>
          <t>Measurement resolution.</t>
        </list></t>
    </list></t>
  <t>Initial Phase:
  <list style="symbols">
      <t>Measure MRR over initial trial duration.</t>
      <t>Measured MRR is used as an input to the first intermediate phase.</t>
    </list></t>
  <t>Multiple Intermediate Phases:
  <list style="symbols">
      <t>Trial duration:
      <list style="symbols">
          <t>Start with initial trial duration in the first intermediate phase.</t>
          <t>Converge geometrically towards the final trial duration.</t>
        </list></t>
      <t>Track all previous trial measurement results:
      <list style="symbols">
          <t>Duration, offered load and loss ratio are tracked.</t>
          <t>Effective loss ratios are tracked.
          <list style="symbols">
              <t>While in practice, real loss ratios can decrease with increasing load,
effective loss ratios never decrease. This is achieved by sorting
results by load, and using the effective loss ratio of the previous load
if the current loss ratio is smaller than that.</t>
            </list></t>
          <t>The algorithm queries the results to find best lower and upper bounds.
          <list style="symbols">
              <t>Effective loss ratios are always used.</t>
            </list></t>
          <t>The phase ends if all target loss ratios have tight enough bounds.</t>
        </list></t>
      <t>Search:
      <list style="symbols">
          <t>Iterate over target loss ratios in increasing order.</t>
          <t>If both upper and lower bound are in measurement results for this duration,
apply bisect until the bounds are tight enough,
and continue with next loss ratio.</t>
          <t>If a bound is missing for this duration, but there exists a bound
from the previous duration (compatible with the other bound
at this duration), re-measure at the current duration.</t>
          <t>If a bound in one direction (upper or lower) is missing for this duration,
and the previous duration does not have a compatible bound,
compute the current &quot;interval size&quot; from the second tightest bound
in the other direction (lower or upper respectively)
for the current duration, and choose next offered load for external search.</t>
          <t>The logic guarantees that a measurement is never repeated with both
duration and offered load being the same.</t>
          <t>The logic guarantees that measurements for higher target loss ratio
iterations (still within the same phase duration) do not affect validity
and tightness of bounds for previous target loss ratio iterations
(at the same duration).</t>
        </list></t>
      <t>Use of internal and external searches:
      <list style="symbols">
          <t>External search:
          <list style="symbols">
              <t>It is a variant of &quot;exponential search&quot;.</t>
              <t>The &quot;interval size&quot; is multiplied by a configurable constant
(powers of two work well with the subsequent internal search).</t>
            </list></t>
          <t>Internal search:
          <list style="symbols">
              <t>A variant of binary search that measures at offered load between
the previously found bounds.</t>
              <t>The interval does not need to be split into exact halves,
if other split can get to the target width goal faster.
              <list style="symbols">
                  <t>The idea is to avoid returning interval narrower than the current
width goal. See sample implementation details, below.</t>
                </list></t>
            </list></t>
        </list></t>
    </list></t>
  <t>Final Phase:
  <list style="symbols">
      <t>Executed with the final test trial duration, and the final width
goal that determines resolution of the overall search.</t>
    </list></t>
  <t>Intermediate Phases together with the Final Phase are called
Non-Initial Phases.</t>
  <t>The returned bounds stay within prescribed min_rate and max_rate.
  <list style="symbols">
      <t>When returning min_rate or max_rate, the returned bounds may be invalid.
      <list style="symbols">
          <t>E.g. upper bound at max_rate may come from a measurement
with loss ratio still not higher than the target loss ratio.</t>
        </list></t>
    </list></t>
</list></t>

<t>The main benefits of MLRsearch vs. binary search include:</t>

<t><list style="symbols">
  <t>In general MLRsearch is likely to execute more trials overall, but
likely less trials at a set final trial duration.</t>
  <t>In well behaving cases, e.g. when results do not depend on trial
duration, it greatly reduces (&gt;50%) the overall duration compared to a
single PDR (or NDR) binary search over duration, while finding
multiple drop rates.</t>
  <t>In all cases MLRsearch yields the same or similar results to binary
search.</t>
  <t>Note: both binary search and MLRsearch are susceptible to reporting
non-repeatable results across multiple runs for very bad behaving
cases.</t>
</list></t>

<t>Caveats:</t>

<t><list style="symbols">
  <t>Worst case MLRsearch can take longer than a binary search, e.g. in case of
drastic changes in behaviour for trials at varying durations.
  <list style="symbols">
      <t>Re-measurement at higher duration can trigger a long external search.
That never happens in binary search, which uses the final duration
from the start.</t>
    </list></t>
</list></t>

</section>
<section anchor="sample-implementation" title="Sample Implementation">

<t>Following is a brief description of a sample MLRsearch implementation,
which is a simplified version of the existing implementation.</t>

<section anchor="input-parameters" title="Input Parameters">

<t><list style="numbers">
  <t><spanx style="strong">max_rate</spanx> - Maximum Transmit Rate (MTR) of packets to
be used by external traffic generator implementing MLRsearch,
limited by the actual Ethernet link(s) rate, NIC model or traffic
generator capabilities.</t>
  <t><spanx style="strong">min_rate</spanx> - minimum packet transmit rate to be used for
measurements. MLRsearch fails if lower transmit rate needs to be
used to meet search criteria.</t>
  <t><spanx style="strong">final_trial_duration</spanx> - required trial duration for final rate
measurements.</t>
  <t><spanx style="strong">initial_trial_duration</spanx> - trial duration for initial MLRsearch phase.</t>
  <t><spanx style="strong">final_relative_width</spanx> - required measurement resolution expressed as
(lower_bound, upper_bound) interval width relative to upper_bound.</t>
  <t><spanx style="strong">packet_loss_ratios</spanx> - list of maximum acceptable PLR search criteria.</t>
  <t><spanx style="strong">number_of_intermediate_phases</spanx> - number of phases between the initial
phase and the final phase. Impacts the overall MLRsearch duration.
Less phases are required for well behaving cases, more phases
may be needed to reduce the overall search duration for worse behaving cases.</t>
</list></t>

</section>
<section anchor="initial-phase" title="Initial Phase">

<t><list style="numbers">
  <t>First trial measures at configured maximum transmit rate (MTR) and
discovers maximum receive rate (MRR).
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = maximum_transmit_rate.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR = measured receive rate.
Received rate is computed as intended load multiplied by pass ratio
(which is one minus loss ratio). This is useful when loss ratio is computed
from a different metric than intended load. For example, intended load
can be in transactions (multiple packets each), but loss ratio is computed
on level of packets, not transactions.
If MRR is too close to MTR, MRR is set below MTR so that interval width
is equal to the width goal of the first intermediate phase.
If MRR is less than min_rate, min_rate is used.</t>
    </list></t>
  <t>Second trial measures at MRR and discovers MRR2.
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = MRR.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR2 = measured receive rate.
If MRR2 is less than min_rate, min_rate is used.
If loss ratio is less or equal to the smallest target loss ratio,
MRR2 is set to a value above MRR, so that interval width is equal
to the width goal of the first intermediate phase.
MRR2 could end up being equal to MTR (for example if both measurements so far
had zero loss), which was already measured, step 3 is skipped in that case.</t>
    </list></t>
  <t>Third trial measures at MRR2.
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = MRR2.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR3 = measured receive rate.
If MRR3 is less than min_rate, min_rate is used.
If step 3 is not skipped, the first trial measurement is forgotten.
This is done because in practice (if MRR2 is above MRR), external search
from MRR and MRR2 is likely to lead to a faster intermediate phase
than a bisect between MRR2 and MTR.</t>
    </list></t>
</list></t>

</section>
<section anchor="non-initial-phases" title="Non-Initial Phases">

<t><list style="numbers">
  <t>Main phase loop:
  <list style="numbers">
      <t>IN: trial_duration for the current phase. Set to
initial_trial_duration for the first intermediate phase; to
final_trial_duration for the final phase; or to the element of
interpolating geometric sequence for other intermediate phases.
For example with two intermediate phases, trial_duration of the
second intermediate phase is the geometric average of
initial_trial_duration and final_trial_duration.</t>
      <t>IN: relative_width_goal for the current phase. Set to
final_relative_width for the final phase; doubled for each
preceding phase. For example with two intermediate phases, the
first intermediate phase uses quadruple of final_relative_width
and the second intermediate phase uses double of
final_relative_width.</t>
      <t>IN: Measurement results from the previous phase (previous duration).</t>
      <t>Internal target ratio loop:
      <list style="numbers">
          <t>IN: Target loss ratio for this iteration of ratio loop.</t>
          <t>IN: Measurement results from all previous ratio loop iterations
of current phase (current duration).</t>
          <t>DO: According to the procedure described in point 2:
          <list style="numbers">
              <t>either exit the phase (by jumping to 1.5),</t>
              <t>or exit loop iteration (by continuing with next target loss ratio,
jumping to 1.4.1),</t>
              <t>or calculate new transmit rate to measure with.</t>
            </list></t>
          <t>DO: Perform the trial measurement at the new transmit rate and
current trial duration, compute its loss ratio.</t>
          <t>DO: Add the result and go to next iteration (1.4.1),
including the added trial result in 1.4.2.</t>
        </list></t>
      <t>OUT: Measurement results from this phase.</t>
      <t>OUT: In the final phase, bounds for each target loss ratio
are extracted and returned.
      <list style="numbers">
          <t>If a valid bound does not exist, use min_rate or max_rate.</t>
        </list></t>
    </list></t>
  <t>New transmit rate (or exit) calculation (for point 1.4.3):
  <list style="numbers">
      <t>If the previous duration has the best upper and lower bound,
select the middle point as the new transmit rate.
      <list style="numbers">
          <t>See 2.5.3. below for the exact splitting logic.</t>
          <t>This can be a no-op if interval is narrow enough already,
in that case continue with 2.2.</t>
          <t>Discussion, assuming the middle point is selected and measured:
          <list style="numbers">
              <t>Regardless of loss rate measured, the result becomes
either best upper or best lower bound at current duration.</t>
              <t>So this condition is satisfied at most once per iteration.</t>
              <t>This also explains why previous phase has double width goal:
              <list style="numbers">
                  <t>We avoid one more bisection at previous phase.</t>
                  <t>At most one bound (per iteration) is re-measured
with current duration.</t>
                  <t>Each re-measurement can trigger an external search.</t>
                  <t>Such surprising external searches are the main hurdle
in achieving low overal search durations.</t>
                  <t>Even without 1.1, there is at most one external search
per phase and target loss ratio.</t>
                  <t>But without 1.1 there can be two re-measurements,
each coming with a risk of triggering external search.</t>
                </list></t>
            </list></t>
        </list></t>
      <t>If the previous duration has one bound best, select its transmit rate.
In deterministic case this is the last measurement needed this iteration.</t>
      <t>If only upper bound exists in current duration results:
      <list style="numbers">
          <t>This can only happen for the smallest target loss ratio.</t>
          <t>If the upper bound was measured at min_rate,
exit the whole phase early (not investigating other target loss ratios).</t>
          <t>Select new transmit rate using external search:
          <list style="numbers">
              <t>For computing previous interval size, use:
              <list style="numbers">
                  <t>second tightest bound at current duration,</t>
                  <t>or tightest bound of previous duration,
if compatible and giving a more narrow interval,</t>
                  <t>or target interval width if none of the above is available.</t>
                  <t>In any case increase to target interval width if smaller.</t>
                </list></t>
              <t>Quadruple the interval width.</t>
              <t>Use min_rate if the new transmit rate is lower.</t>
            </list></t>
        </list></t>
      <t>If only lower bound exists in current duration results:
      <list style="numbers">
          <t>If the lower bound was measured at max_rate,
exit this iteration (continue with next lowest target loss ratio).</t>
          <t>Select new transmit rate using external search:
          <list style="numbers">
              <t>For computing previous interval size, use:
              <list style="numbers">
                  <t>second tightest bound at current duration,</t>
                  <t>or tightest bound of previous duration,
if compatible and giving a more narrow interval,</t>
                  <t>or target interval width if none of the above is available.</t>
                  <t>In any case increase to target interval width if smaller.</t>
                </list></t>
              <t>Quadruple the interval width.</t>
              <t>Use max_rate if the new transmit rate is higher.</t>
            </list></t>
        </list></t>
      <t>The only remaining option is both bounds in current duration results.
      <list style="numbers">
          <t>This can happen in two ways, depending on how the lower bound
was chosen.
          <list style="numbers">
              <t>It could have been selected for the current loss ratio,
e.g. in re-measurement (2.2) or in initial bisect (2.1).</t>
              <t>It could have been found as an upper bound for the previous smaller
target loss ratio, in which case it might be too low.</t>
              <t>The algorithm does not track which one is the case,
as the decision logic works well regardless.</t>
            </list></t>
          <t>Compute &quot;extending down&quot; candidate transmit rate exactly as in 2.3.</t>
          <t>Compute &quot;bisecting&quot; candidate transmit rate:
          <list style="numbers">
              <t>Compute the current interval width from the two bounds.</t>
              <t>Express the width as a (float) multiple of the target width goal
for this phase.</t>
              <t>If the multiple is not higher than one, it means the width goal
is met. Exit this iteration and continue with next higher
target loss ratio.</t>
              <t>If the multiple is two or less, use half of that
for new width if the lower subinterval.</t>
              <t>Round the multiple up to nearest even integer.</t>
              <t>Use half of that for new width if the lower subinterval.</t>
              <t>Example: If lower bound is 2.0 and upper bound is 5.0, and width
goal is 1.0, the new candidate transmit rate will be 4.0.
This can save a measurement when 4.0 has small loss.
Selecting the average (3.5) would never save a measurement,
giving more narrow bounds instead.</t>
            </list></t>
          <t>If either candidate computation want to exit the iteration,
do as bisecting candidate computation says.</t>
          <t>The remaining case is both candidates wanting to measure at some rate.
Use the higher rate. This prefers external search down narrow enough
interval, competing with perfectly sized lower bisect subinterval.</t>
        </list></t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="fdio-csit-implementation" title="FD.io CSIT Implementation">

<t>The only known working implementation of MLRsearch is in
the open-source code running in Linux Foundation
FD.io CSIT project <xref target="FDio-CSIT-MLRsearch"></xref> as part of
a Continuous Integration / Continuous Development (CI/CD) framework.</t>

<t>MLRsearch is also available as a Python package in <xref target="PyPI-MLRsearch"></xref>.</t>

<section anchor="additional-details" title="Additional details">

<t>This document so far has been describing a simplified version of
MLRsearch algorithm. The full algorithm as implemented in CSIT contains
additional logic, which makes some of the details (but not general
ideas) above incorrect. Here is a short description of the additional
logic as a list of principles, explaining their main differences from
(or additions to) the simplified description, but without detailing
their mutual interaction.</t>

<t><list style="numbers">
  <t>Logarithmic transmit rate.
  <list style="symbols">
      <t>In order to better fit the relative width goal, the interval
doubling and halving is done differently.</t>
      <t>For example, the middle of 2 and 8 is 4, not 5.</t>
    </list></t>
  <t>Timeout for bad cases.
  <list style="symbols">
      <t>The worst case for MLRsearch is when each phase converges to
intervals way different than the results of the previous phase.</t>
      <t>Rather than suffer total search time several times larger than pure
binary search, the implemented tests fail themselves when the
search takes too long (given by argument <spanx style="emph">timeout</spanx>).</t>
    </list></t>
  <t>Intended count.
  <list style="symbols">
      <t>The number of packets to send during the trial should be
just duration times intended load.
      <list style="symbols">
          <t>Times a coefficient, if loss is calculated from a different metric.</t>
        </list></t>
      <t>But in practice that does not work.
      <list style="symbols">
          <t>It could result in a fractional number of packets,</t>
          <t>so it has to be rounded in a way Traffic generator choses,</t>
          <t>which may depend on the number of traffic flows
and traffic generator worker threads.</t>
        </list></t>
    </list></t>
  <t>Attempted count. As the real number of intended packets is not known exactly,
most of the time the computation uses the number of packets traffic
generator reports as sent.</t>
  <t>Duration stretching.
  <list style="symbols">
      <t>In some cases, traffic generator may get overloaded,
causing it to take significantly longer (than duration) to send all packets.</t>
      <t>The implementation uses an explicit stop,
      <list style="symbols">
          <t>causing lower attempted count in those cases.</t>
        </list></t>
      <t>The implementation tolerates some small difference between
attempted count and intended count.
      <list style="symbols">
          <t>10 microseconds worth of traffic is sufficient for our tests.</t>
        </list></t>
      <t>If the difference is higher, the unsent packets are counted as lost.
      <list style="symbols">
          <t>This forces the search to avoid the regios of high duration stretching.</t>
          <t>The final bounds describe the performance of not just SUT,
but of the whole system, including the traffic generator.</t>
        </list></t>
    </list></t>
  <t>For result processing, we use lower bounds and ignore upper bounds.</t>
</list></t>

<section anchor="fdio-csit-input-parameters" title="FD.io CSIT Input Parameters">

<t><list style="numbers">
  <t><spanx style="strong">max_rate</spanx> - Typical values: 2 * 14.88 Mpps for 64B
10GE link rate, 2 * 18.75 Mpps for 64B 40GE NIC (specific model).</t>
  <t><spanx style="strong">min_rate</spanx> - Value: 2 * 9001 pps (we reserve 9000 pps
for latency measurements).</t>
  <t><spanx style="strong">final_trial_duration</spanx> - Value: 30.0 seconds.</t>
  <t><spanx style="strong">initial_trial_duration</spanx> - Value: 1.0 second.</t>
  <t><spanx style="strong">final_relative_width</spanx> - Value: 0.005 (0.5%).</t>
  <t><spanx style="strong">packet_loss_ratios</spanx> - Value: 0.0, 0.005 (0.0% for NDR, 0.5% for PDR).</t>
  <t><spanx style="strong">number_of_intermediate_phases</spanx> - Value: 2.
The value has been chosen based on limited experimentation to date.
More experimentation needed to arrive to clearer guidelines.</t>
  <t><spanx style="strong">timeout</spanx> - Limit for the overall search duration (for one search).
If MLRsearch oversteps this limit, it immediatelly declares the test failed,
to avoid wasting even more time on a misbehaving SUT.
Value: 600.0 (seconds).</t>
  <t><spanx style="strong">expansion_coefficient</spanx> - Width multiplier for external search.
Value: 4.0 (interval width is quadroupled).
Value of 2.0 is best for well-behaved SUTs, but value of 4.0 has been found
to decrease overall search time for worse-behaved SUT configurations,
contributing more to the overall set of different SUT configurations tested.</t>
</list></t>

</section>
</section>
<section anchor="example-mlrsearch-run" title="Example MLRsearch Run">

<t>The following list describes a search from a real test run in CSIT
(using the default input values as above).</t>

<t><list style="symbols">
  <t>Initial phase, trial duration 1.0 second.</t>
  <t>Measurement 1, intended load 18750000.0 pps (MTR),
measured loss ratio 0.7089514628479618 (valid upper bound for both NDR and PDR).</t>
  <t>Measurement 2, intended load 5457160.071600716 pps (MRR),
measured loss ratio 0.018650817320118702 (new tightest upper bounds).</t>
  <t>Measurement 3, intended load 5348832.933500009 pps (slightly less than MRR2
in preparation for first intermediate phase target interval width),
measured loss ratio 0.00964383362905351 (new tightest upper bounds).</t>
  <t>First intermediate phase starts, trial duration still 1.0 seconds.</t>
  <t>Measurement 4, intended load 4936605.579021453 pps (no lower bound,
performing external search downwards, for NDR),
measured loss ratio 0.0 (valid lower bound for both NDR and PDR).</t>
  <t>Measurement 5, intended load 5138587.208637197 pps (bisecting for NDR),
measured loss ratio 0.0 (new tightest lower bounds).</t>
  <t>Measurement 6, intended load 5242656.244044665 pps (bisecting),
measured loss ratio 0.013523745379347257 (new tightest upper bounds).</t>
  <t>Both intervals are narrow enough.</t>
  <t>Second intermediate phase starts, trial duration 5.477225575051661 seconds.</t>
  <t>Measurement 7, intended load 5190360.904111567 pps (initial bisect for NDR),
measured loss ratio 0.0023533920869969953 (NDR upper bound, PDR lower bound).</t>
  <t>Measurement 8, intended load 5138587.208637197 pps (re-measuring NDR lower bound),
measured loss ratio 1.2080222912800403e-06 (new tightest NDR upper bound).</t>
  <t>The two intervals have separate bounds from now on.</t>
  <t>Measurement 9, intended load 4936605.381062318 pps (external NDR search down),
measured loss ratio 0.0 (new valid NDR lower bound).</t>
  <t>Measurement 10, intended load 5036583.888432355 pps (NDR bisect),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>
  <t>Measurement 11, intended load 5087329.903232804 pps (NDR bisect),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>
  <t>NDR interval is narrow enough, PDR interval not ready yet.</t>
  <t>Measurement 12, intended load 5242656.244044665 pps (re-measuring PDR upper bound),
measured loss ratio 0.0101174866190136 (still valid PDR upper bound).</t>
  <t>Also PDR interval is narrow enough, with valid bounds for this duration.</t>
  <t>Final phase starts, trial duration 30.0 seconds.</t>
  <t>Measurement 13, intended load 5112894.3238511775 pps (initial bisect for NDR),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>
  <t>Measurement 14, intended load 5138587.208637197 (re-measuring NDR upper bound),
measured loss ratio 2.030389804256833e-06 (still valid PDR upper bound).</t>
  <t>NDR interval is narrow enough, PDR interval not yet.</t>
  <t>Measurement 15, intended load 5216443.04126728 pps (initial bisect for PDR),
measured loss ratio 0.005620871287975237 (new tightest PDR upper bound).</t>
  <t>Measurement 16, intended load 5190360.904111567 (re-measuring PDR lower bound),
measured loss ratio 0.0027629971184465604 (still valid PDR lower bound).</t>
  <t>PDR interval is also narrow enough.</t>
  <t>Returning bounds:</t>
  <t>NDR_LOWER = 5112894.3238511775 pps; NDR_UPPER = 5138587.208637197 pps;</t>
  <t>PDR_LOWER = 5190360.904111567 pps; PDR_UPPER = 5216443.04126728 pps.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>No requests of IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Benchmarking activities as described in this memo are limited to
technology characterization of a DUT/SUT using controlled stimuli in a
laboratory environment, with dedicated address space and the constraints
specified in the sections above.</t>

<t>The benchmarking network topology will be an independent test setup and
MUST NOT be connected to devices that may forward the test traffic into
a production network or misroute traffic to the test management network.</t>

<t>Further, benchmarking is performed on a &quot;black-box&quot; basis, relying
solely on measurements observable external to the DUT/SUT.</t>

<t>Special capabilities SHOULD NOT exist in the DUT/SUT specifically for
benchmarking purposes.Any implications for network security arising
from the DUT/SUT SHOULD be identical in the lab and in production
networks.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Many thanks to Alec Hothan of OPNFV NFVbench project for thorough
review and numerous useful comments and suggestions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2544;


    </references>

    <references title='Informative References'>

<reference anchor="FDio-CSIT-MLRsearch" target="https://docs.fd.io/csit/rls2101/report/introduction/methodology_data_plane_throughput/methodology_mlrsearch_tests.html">
  <front>
    <title>FD.io CSIT Test Methodology - MLRsearch</title>
    <author >
      <organization></organization>
    </author>
    <date year="2021" month="February"/>
  </front>
</reference>
<reference anchor="PyPI-MLRsearch" target="https://pypi.org/project/MLRsearch/0.4.0/">
  <front>
    <title>MLRsearch 0.4.0, Python Package Index</title>
    <author >
      <organization></organization>
    </author>
    <date year="2021" month="April"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAEp37GAAA+1dW3PbRpZ+x69AeWqqKC9F8SLqlsrWOna841rb8dpy8jA1
pQLJJoURCDAAKFn59Xu+c043ugFQtlOzT7uqxJZJdPfpc7914/j4OKrTOjNX
8bt9Vqe7zMRvi6qKPyZ1WsSfTFIub+N1UcYfkuWdqePr27LYb253+zoevHv7
seIHjqK/xMliUZp7msZ+GK2KZZ5saeZVmazr49TU6+PF9mFzvM1KeeR4PIlW
SU2PTMfTyfH4/Hh8GUXprryK63Jf1dPx+HI8jZLSJFdxsauih81V/JPJl7fb
pLxL8038WyF//ydBtYvuHq7iN3ltytzUx6+warRM6qs4zddFFC2LFT16Fe+r
46Rapmm0S69i+vlLvExy+tTESVkmj/EgXcdJlsWPpjqKaee3SXUb35rS0C7j
47gulvJLVZR1adaV/utxy/+I8cAVBtOv9pErXmZl1gkhuaIn7PcySB6Pkn19
W5RXUcw/x/p3TODTE+9G8X8VeVUnef2YFw/p8g/3vWD5XbJMzd3Bh4qStv4y
rZZE1ceqNtvKfVUWoL9ZpXVRug/NNkmzq3h7J/P9xxJDR8ti2w/er6P4Q5El
dy2gfi2T+q5offUnQbkvd5jGgyTKi3JLjHpvgLSPr19O56enV8RBRG/vi9ev
0uL45ac318eOOQXJdVJuDPHHbV3vqquTE+LYarRejdLiZFml9UmZVdPJeHJS
mh0R8iTN67JY7ZckGfnJ1hCxVkVWbB5viIeTm12W5OamdvIRPOFY/qY2VV2N
buttJiCI8D17/YpWjQFkfE1PxO+awcRcDu5nPMiXmSl98uHxw5uv7W33uEtH
hPmTXVn80yzrE/f8yXh0OhqfBOC4L2P+ckhLEDw5a4FkY0jKVuZLF5jTKDo+
PiZdUNVlsqyj6Po2rWJC635r8jqmpXdFZap4eZvkG8OC8Hcl2z+GcbUzy3Sd
Lkn4HvHVjlVO1KA0Vpg8zA7jxSMEK82hBpI4Nw/2qSTbFGVa324jkjFTlmaF
SZOqV9PpmEansdKrSB7roxFtl9g0WUXFOi5N9oilCBmLNE/KRzv0gZaiHZrj
itQkiUxZ82NrWppWzopkNYzTOnI4IFiLe5PFyY4+SmiCFfj63pQYVt+aZo5d
QZxHYsaf0kbrNMmiHaklM4yTfIWPc4UCjwNwQV3soW5Bj68ANSOLflXsZsBB
yTgYfHj78YgWwONLwhyBkvACdgj9mWSkmmn9eLXnQQRUujWj6Jfc0F4ZwjsD
ilTpJid0pPkSqK7ihSHgVg0nx8QYW9rMNv1DNxzVRY3pwf5udiwfbm1rqdfd
I40hPTowiSVHEi8LIny1K3Lo/pg3uCzy5Z4+zeuM2CcV0gL4VYFniEaV+X1P
X6dgxBGY2MSkgvJ4W5BKEbj6toPNC//VmI6YPMsM8zntgpjw931aGghCFYMF
VmDd969/jQfvTf1Ahix+vc9ZucS/pmW9T7L0D17saBgFolEV6/qBjKLSNN0S
NjAtP1xhacwKpRSzUqpG8eeKthY5WbPMZL7siMhkUB3xxAZV8WNqshXmqom3
8oJwa3aGtAOp1Ag00Y8yAmlBtDD0EeGZrdtqb1jQ4gwqKM7324UpMf+aVALm
rm+TmmytiYo9I4rYfmeYtjWrCxjukYfaJN2yqkhWK1qjkqccdknb01oVYyF+
IPtNM5Lmq50YkSFS2AhzRW5K0jQF0bI0blOEtghOwMIQE+QMPnEwyQB9gDns
TtMsrcERUHLbdLXKTETW/9qUxMmsjqLoefy6xIpV+gepRfwJgGjun2kiOCbx
2+TRlMfTeM3PFUKJB2INMOMy24NTSbMm+WP869sX70mTb6p4sCrqye/DGH8l
qyOWCzfj65efSA8SMs0XHe++o4lIJyVbEAljUrhHx7L0JtkRmk1S7aGhCI2L
R5KfeFAsa1NXRyPai3p9uhkMIv25dhukVQsSM5qSKLRnZsT8ot6JMR4xxytz
nxKDfSaTUYpxG7z6fH0EV61h5VxEgEAfxs9WPOIZ0YDYDOIDV0klIN6lRtjV
ja2T6o6WFgUsAJNKXRKr0HSj+NMeypWnpHmIdWi/pDIIHB1TAFfNdORZkL5g
MR1UGEtbJgaFQiLEVuyx0ER3wG8G41BjUggESXWVAtPEP+U+10UrXgW8nmQV
f5FbjRfr2s2SotFvk3LFsBDfFvsSc+BfFX0OtUG4MiSWwP0ofs2e0m5filmB
HBOOGZHMWLfkUlmV5OZltdrdsOAHWoaWeSZbjfdMOEz6LB58IsqN4hdVTL9Y
nbcjO2X1By8HJxh0plX3u5hQx+6YapmH25RwqtK2tdxHqrDRTmLfqyHmCRyI
PXbIKzdauxlGXDWy3NYATZMwv9klyUJbRw4MANuZkFl7rJgoANsqsj1/RPDW
ZlF84U0tb/OUbEMl4hYCR0hf3rGiWmTEhTTEUgJSIJ5uIAWfWAo+tbEsXwC5
iY9aWl9o6aGWPqCwxUdwKgCQbbBhklmNYlgwUDkzdYs4ZAxrMm2VMiLWo831
zmtSfiTJSJ+sHmkamoVkPK1uDbk2pL0hAgn5O0unexd+rCZoBS5+So9XpO/Y
1sHiNxacvWMEbPdFdm9NfHXCGocUT0YxDUx0TquL5imTvNqmNTM0zWjIPsVu
btoV+VOxoT8eeWqroMgSgRdpFkL1CfONajosAf4r06XInONQwkYzs4ipcBTN
IgECPUSqItlsSrMhT4QtGkPpAUTDTuBYGsI0PZMBj3iOfRa3lhsA15NMFZFr
mYD3Fy3MAV00A4JXZ+sGFFXKDo7Y7WTNHoIBInzO/xVUKHJySGAyPdSkIzOy
3OIIRHvs0GfI9AEnHaLQt9OHLeYqFqWp1GB3sYvTxq55AQA7v1fqCdPCumkL
NLgr44iyiUw42Nf9YTlmNpCB5St0k4fQqss9TUEPimKBbNEHCNdo7fjHeBDv
7urqxp/yWD5yQBzFJ52HRghxwWpP09NjTCwnet5CxJ4kk1O8QPdo471ZhPjg
eVK3Alp/FuknJDVhxVX8QrzwJUbcJ9meCdvIlZCiGUBgLKF/cvb57osUtFuT
6YfjT/yXMleQr3ObLlL4m2ZJGolRikmgJ2HVyZdqPk5ICb5LvqTb/bbZi7dm
1cCT1E6UaCoXiCAWyTKeijyILUwkiE0aYCB+lXpeRzxaAwxIBvByzcF4Cykd
IBQ5iehPqJIczj0RkGNRdoZBbGjzJuqgoIw9vjrd3JIHmIPoNOkDVDUBtt9B
cS3g70ARQLjY8+GAlFNU4o8Dahklz1J46bYJ/fQ7xSMerMP25DQVD4FkUmAl
zn/pjWBPRcQDkJqSZMQbL8aeIokeFrKOhnVAO5izItDMXtX+boaHp1av4JZG
sSpikopX01pEbD4ZdGIDmDrdoRtQt4nsKRovbfqR8yVbZUZdxU8TwI85AYcT
1ck/W1mO1phNHWF6+IASE5uB8EFsBgcwCRv+FcU7OcI6mapx5K3DLJ6YAjCK
/8ahoWYK4naoHb/7/OkayPt9X9TWmXZ+ujd54qnRBSye3SFJl3UVVP7gSY16
1Rl02PAwLBV52NlKHLxvNMbgGj/8UQ13TDx5XBnyjFbxYLeTJLDYvuCrNX0F
rkVcT5ILcVfDxD4OycdDuqIFO7SnaJWnQPJIRviqeF0W28PbDE1HvHi44Y9/
hFWQX58TZAD2hlH/bzTH28kNTNOtQeD4PL6Af0fc5n/O6HHxpCgzYh0XOg4u
YBwkLuyLI+PBZGq/f4J8cNscXv4sBcHHDQ3jn7/sSuFc+Dlpi36LnQSy74nl
X5XFjkkQD96/grEPhfBEQOuDbF/BSWYL2YgHLAUsqajGP0xJ8sd/eprjqJEH
Mmbi4MDjc7IxAL6elKNdE4J/vyCpiqDtNgaO/bY+Xgebg6c9GmGg8RAMBBxC
8QekKwkTHpo/fA+aYYwsonvQTGxAD6m+FWznRX7cwbifK3A4/xMYxzxdnH8r
xmnnNMH2K9qlB+MfvgPj1qP5qI61IP3dRyA9QDYmZk6GKJWrDFk0coMIrYeQ
LuFoY2vsUtfWn9e1rj8eOW4S62VNGU1GriL8tnhjcqRPirIf8SrU/RyPJOv1
x69TocF2QAdCxjdTIdBOGGi+SbVcw9FnrU6gZAE7kLdgdqP4kzFemqIS1RVP
Z260czNpmi05LBLzp0gPIqaQlIl1wDnl1TjhyNnkT6yODGWTS/2JJtlw9iuK
vqkO4hIR7WS7VnldlYX4KK05GQxFvTI1Z0VTZEU0aVaRq4xUmiS/6wK1kAUn
Vf2HjvzUr62JVE+k/SNO+wdIkNFDiaqZ8bGJqiqWaeLYLsHs5Gov6+iAJ2Wr
IIgZIxg1cag4Z+TgkdVzI+WlBbavHmdaccXLlDXZ+eTOVFGzMU4/G0hHarS4
w0lUS3fzxSz3GjgW210i1auI6L5KuwFeu+KlOXaLvQYxqtoYJZzQ0MqOTuCq
PgMz2oxoWFjiatQBGR/H0AHBCM490pUOft3OPaFsvS85J0Dy21TRIq6xcabA
FwTGBDsZW7NK2QgTMyM1xRlbZB3Yg0VFKvJ4vkJGCzVaL5JzUPfVr5AcS6vI
5vysk61AAXsI+3R3rV0xI3jkiZOAQAHy4HSlRIHNPiHZrY3pqU9UEJ2oV3SI
Ad+gnobgkFzy+qFQxmN8WEaGRhcFQVBtGUuclW9Kgn41NUCbVo10uas+h0nW
oiV+HHMN6IDBd4/9+1gyjyWiMU5ieunSyBZYKo97eCR8Dp6e/t4laamRsPmS
IIFJiPiUblMKvqRILHnLHlnQsirNn6V3pkWMKCjcNYEhEEV2pULOqXIbQTiP
xA9kingFboeXdOCnSKc+tOu9XBrYJo8cLS7gSURPrpQsuJ8ha5ZEOSBD7WBz
G5HNfUDomWQPySOzOfHmhtNRVUEsxMkDwo4vixnyJeDWtiHGKLit6fpRC1xq
W5VLKIwnzx+YN2VZwNE3WmxOc1ooRdFfB6rcrLlgRYyo06KIxWOFH2FIoehY
rxT7+rhYH0uZdalxaBXArmE5UTFLVbMieNu3kpaAKIw0onbeS1V3fzjpIYul
iRNakhDiMokNPiAfUSt8HDY1dVZFRaaJUTI0++2On7mK2MQL9v3MWZ93FKTT
8IQmPzW14pSFWkCxa7kYuSanKv6AiMVDUa5kYJBgQA3M5oi5NiHrdItnRAb6
LCX75WdguvnkIefAwQmSGO7AykkR8SlZMp4gNZsKWzGruRDhIXQYIQnDKySS
FG8lLMOsEXu6pALX+4zVSGw33V3fKUotRQq5Es3bk7hVrGQ3nLyE9UYgEv1z
X3GWTzfKdRAShJrbFUxWqdYA/YLUW8wfwHsB0T2g4SHta+6va5og9FnsqNgJ
B5Pryc01tfmidTGUCUgnCiDHS5I2ZBayJCeTszEtP/AXUh73qXnwuhvUV0ml
iOi1EyHS8NVl4rVncAGRfaFj7kjR3yVsbnklyHQ/j99IA0v8gR+3xo6TDcU2
Za5znS/sAJC+0eYA4yVBn0unn/UOeDaeYyM9AgWnzlqtKy03R+Z5zV8JOGLg
TRXaxmS5JEFig100bof1gNEE1Tdj26cCpiw4JNyNvmDaVtK25XLFbMnFDRuP
xqwa6O/xXJyOsCXGs5hHI53mdZ+vo9+982IEVJizva2LBMQReunDHBCxM6kd
SD1zP2/SaXg61Z4AzWQzBzsEIv0b+HfMPhzVWs+6h8ACUitm0l19AtfY3H8f
iFYxHV5cJnppTevGFKIvtCNNWKphgD4MkLJf3nGpgEzefVrsK31sGyIdVtNC
/soViQI13dYMEvct76Tkg4F99Zaq+yAe/Y29z7TxIYcERZDSr1gTqmNjeoso
w6Yns3flHIU8N4W41qwxiFeNGjX0xEqHi7Z8qgdBX0mTHBcWKuse9ybttdnA
YRgDm37UdVCCCQ1CULmBaraohBpsYllyTMrU5s4VQGJd1FrIVrjiQqsGUjXo
PkwZ9d8gGf7aoj05O6/9x516QkVm5N6EhZ5m3efarW2Z6k1tWAtLVbI7FxeD
HHVJv5nSwvNmrd4Wb03YsKkMYRNohuvys9fDZTlaEQLj/kg+GHIf5AfUaSb9
AQy9MKy3KzcKNfaCns73yo85rF1Y91GAE1vjQlthZbPkLWi0awPJb/Ml5aKo
q17hh3PvAWc53THgOK/m9h7NXhr1svwZkjpc8ghidqy4shGpZc22Xva3kYdV
9XggxChKocXR0xv1ENi/nVVhpGeJWSqJvd25chwbtgIFSBOA/cyZZaTonjVY
08yYq8D5iFHdKxjztiWcRRuQ/aFZUwQnezyyVFHj30abNmHcFvARmTMC9clt
FV9wGsAZY1/gsmID59uG47YtMeDr1Ko0NAom7YQldz/7jarB8osgwv/6yoHH
AdilJNkVXYtQlm92TgdSlPSLhOx7i4dlOZFo7rXoxBzGkWvvswoIl2tyWGWT
UwfOkrVh8aDQeQZe/bxZWxTU58q4tI6N3loUMs4o/hx+ceVUq/TbJbQBsquS
Kn1mvkgHW+qef9boYuC8zbOpyyhKOotFIF+nG4IYQrDUYxTOqgx2YFRJ0D0U
MUcID0axLjveL7RxuNmh5lCdgOcH9vTC302YdPOZo4IGaXEZ9wI6MH1pzx4l
F9kxTtfcR674cJrAS2FWhBbeRYG0yxJaIkM2wrex2jXJT8JxAGOod6dsIon0
TQH/Palqa188GFYm0Y416fMoTb0v88DzJ1SUrCJcnV3VgJsr9haSXHvFmaJW
YzRCjSTNELYbUjrwND3PXxzLn8X9XzVEVUevr6HHKld5hGFgmHjDkn9tgpvG
zbbOS5haFOe7G9DUBWGSQ3kLkR+ucKaPuzVp5fdFfhz471yHlgQc0GosIyC+
erTaAokZzsOt0I4vJWTsbJt84X+I5P6GoKOhjnsSDVb64FCdpXAppL8WxmaN
nN+KsMbvTAGL6zw8ZImMFtuVQCFHlt71ra+Emp4MqzOf6MloAt6FySkcq8Nw
N76vRi0J1HI4B8Jvcs3XZGFMjByjJCQ1hNQcAXimsrRm/4P2oA9zckKfYNOD
Lt3+yIIXZnWzMGSxJTVTIT/IEeKDkEf770XNS6+HZP9wYCT2WJdElsup2aNL
2A/+fT7+61HAmc62hSnu2BYTkKAdSPh51EIZO53NepL61k4lVOpsiLdC6phT
b7pHrCtVlga9ehbBWRU0Q0kK2PfNBQBA5wTqfYF2C3ZlQ/CS4OgGt1bvq6XZ
1a57mzsQBFike8X+s2WwSybLElzV1IH2uVhL7mVcsG4WUqGhTcQxekneVlJL
WvC3otS+zjhMRtXJHZyE3HUXJe1SAhOdOJgHcx/rqky4XGBPVjF7Y/liX4oD
5fiMLA3XXlypRUT8o3NT2fVJnDA1bJAwL202XFECgP3+1TV0n/hNt+T4m1zA
6VRDaLt726AkbG+XigJnnNNBnL/6JIr9TaDYkd91qRT26Cl0W+sBjp1VuYm1
Cp7YBtMMIwGJp+DjJFI0QvXRU9scN/BSwWiA9xdiYOQ4PiTIZ6PDLYomo/j5
c6vanj/HWb7DlfSgzZL9PJuXJAfFobqbN3agAC63P7bWGQmKzTffcm8hmlVc
p0+W5neD6igWBf7+zUtSWyuTxcwwvAwmaVZCPphPwaRg5ylvTm0Bb45PdDVt
ba77lxW7+BY2z4qJfZ/XryKuYajhZEh0EE4DP0W73DHHXorJNJepuwm+GUBk
5rphCbixLMbg6pmsVTtRBIERjtTGlBDS6BSzapKpb96e6WxKqtmk5pzmDYS2
xfiGnYkQwm1vzs5rUUjYA5d46ka7HtnEyj+OGpdK+0G8fmbvuVF0BoCEgDcw
nDeSMGBwUKrnBLgycbKE1mS9iKJVB/3nmEt6iG+K9Y2fc7vh/cu0XpexuD32
iIt/4pF2JxFN6HgJGqETiLmrwIB5fQR+pP0WdlcXkn5xxTHo1Gtk2ZbLCGYG
cWrAiMJ7YkR73LqQByhoqExrcqs4PL+NtcZrTlIGqUPW3jZKMStHhFA8RJMk
Enh7/RP6sG3CL12vEOOEjO/7qzhk5fjHuJ/HvREajLh+dNuOqMuFn+u4V79c
WReC59WPf/l8fdX06rSSPPo10so/Ng/5m+HHPrpufW360PyF1lv8AkwY/u0S
P7weOFOAJAwpNc4x2ieOmsSmlpbY/woTjXbhyFqyhLvYTdn0iYpxD6CS3kkt
dQ/D7zCT1qrSPKxODVrdMRUXBY8k33UYLiJxZnAGubE7Q/Yd/ckZr2/WNqNf
F0W8zJBxIb4nVhvaL+C8cmTF/Vq2rTxUOpgK9XbumNRg0YsS1cQ+mZ9vIBH3
GSi0JmjYBCapzbBOERJKWqojS5iIzzc7KaFPpv8r8kAT/0u4f/ok+wtypt+O
HRnTUzN1Lf9KJcmbQyO1Iyp2M+yqlSQBEnuUYUFoxZfDAwzhuAGT/DmG4KWX
3DpsOB2vmTcHPthxsG7ECn4FxwRBxo3gWyfslNyScuCuUm4ntZ7qA6pYcvTN
EWDITUnxjHd+l5IRXQWlaXY/SFWUB5jvf43Vpv8SXpt9A6/NvpfXGoxB0SjW
hh6Zu9WylOOqTVGTMuRprPbls9oLs0xw/s0rbfEVLpYlHQ8SKVvhitPNVhE4
4XHRfIbmeOZoSWH1cCGzrg3TuMBhvReeTjtYxc53czRs7N9x/Z2dm6wodpwX
pI97+KKdC1fv5xPLnUu193GOG3pImn5oZuhzmL3xzu36IZZWIg6MJASRcFTA
oBVwZQuHJa6WGjdtPzRYsohdYFy20rOHmgN7KPqeH7Yx5U7N4kcrE91xtrGl
AS+BA7cx/j560Qm69uGJAZ8K8UKH/kZSod9Awb5woB//q2K/yNR1hc3XCXYQ
V+5Y0Om/A40OaYcYRaJ2Uq+rco/5cLVDD8CtGtRhEvB0spEG630zMmpngtp3
feXHTvlOFhh06l/i9J6Omoy82jWxgk4IGznsHOFrqm6uBgJMNBNYDp5+BeCg
V6AZ3i2twGNbh3wTD9pFsSO7LOEJ6v9Fu3eFu7tWe25GsZlfaB++ZGZ61aw1
cYd4zZdUijq6JvnL/9xvdzrpZDQ/aioD2G6hQ8Jt8Dgt57q+SS7b9fsU7idY
63Q08Veb8Wru+BTfv9LJOtjyK1a06DkV9HyQM+6SLO5YHq1ldSdN8qbfwFGk
c+JXa6dIMbdr1nE8V/qsVl6XAUvLpgDQjBkPeZ2tuyOnktlZrVweQ+ciqmKQ
OAO0nNj1w3KTVp5bdabPv8nbSmfolwa5+fBQiTLhOjtfBeUOC0t5YOQJ11rc
xVRrBk1BilNtQz7c3ldwYN/+fYc0A+W+I8cVjD6uYzKPAyezI2djW60kTr/b
lktu9+jthBg645LB6vNRIL4URhdKqn7u8TaPatV0NB8RG0vsZJW8lN24ulZL
980GbYtOxNgFsp2ThK1jSNq68a7hX3HlzDaKqO8a8I/XRBm2WUyVaVSNUHi0
ryopeqEV0x188nfL3n9mHKmt5xhqlI/BASTLMcZzqT1hINeOrHIVKANVSR5V
itJvyXH1pP4mC4u/T4UwPGxSKs1hBD89WHHSF/Wogjs7l3JQwgniKNA9TAa+
1sV82WV8kcbD7WPb/oCV1L41wc1VsC1CzW9Gq6Ccc0DGSdxJdjbq1pyjYDRt
6IWDWDs4yOr5cHPDSNOKsgrGx1pTewJnst+f+UBNWCkIygJ5f0nA/pzqdTw0
eFdKs2enAUDagWyR7nYPdmlDi8M+3FMmsvGgabd21q0KVycd+LPfXTwZTYba
DpRWHs1NX6Dg/wCzXi6yW2T0HyZN+tO+9hfVNVV8+SxHgNJq2F6Q1SwJg7Ob
SUzou2MnV1Dfg0rniT6l4hp+gRANrTJLvZseAqX1Jm+d7dIebInI+BYBCpQC
K2rzpIGv5Hy5tZzm8avB2puFAleLIcPOSRYbpwl5Gik4Nf3CB9MWvncm+PEh
QLTv3wjh4tqGMM4pklt5tH+Pj6UMYL3S/B63/2wk/NFjKp02PN9d+ySo73ob
+z5BCfUqn05jf4OdfkvqoOuFTWlH7fQ2bfUp0GFb5QDH4SjkEdtc1uFlMlNe
txk7POm93N7IWk/tlgV92NZBhcNjO5e0Rq22ucqOA38I9n2SZqhRdHQRCs56
T4JthmSH8eD82j4a2pL/dpFQ7TfWNCGLA/2z78pon2qX3EhAwJa5GEVFxDdw
3yUiyuD++A6D2y6ODoMHAc6gtx3zoVfCjjwR+3/W/j/B2raF5ynWlq4CG5Og
GYeZu8Qtv9xcJCdc8Kh0bkiw8QSnj3qMgdoB+Ljo1kseq6F2xOjlrbdEh5ZQ
NPuBdMgdRKOAFd/UmmnmrtmF4ZMY6vO28zqHolnbu9Hyogbkc/NNI9yXLRlC
TSfSV5OjkC49gEirn5y18E2ZhctxrxI6AKobgQMOe1UfWAg2EB3acFgKZCge
2p6w3z/vYjg+h6ATgYHVR8CcIVo0WFqZZcrtFtIkizbLSmqyzdUFnl55qSH2
M2gQoe2qeMifgQdWekoxYECOq4jduBxIM8w8++smU7873xycJ9RQL3uapFsC
5lJTYMewH1N2oteYeBUQPq82WGdFQrGsK/CpBui0WAbIdKmpdqwwc8bATaiZ
eL9zjgjFPWLEn7kPUWcddNGaGsB3TcWB5n130dITzOcBfNoLMJCITnhCmOQH
bpNsLahJ6g4moIacmmtkvtovLJG8BUknfWS5Cdbc7yQlk/BZZj6iiLGbQF+e
iRb0Yfn+9c+BTc7TXklprrHZtPGpHgULbvWqCOix9KP6iVf54ZwzPTLBI1Yp
H5IOPmBMEn46GocGxenVSo4L+JqLi980orkyjEkZTiAOgEtWaY59MBvNj0jI
ocmkYaw7f6gm1J761tQZCL4S1MvvEfo0W9DsVxwJ4dAH9Ftzx6Z68o55vTVX
fCTTaYQDU1VkYLzEnjTdWoO21DoDmzM3vuL1Na/pHRDhw9x+xEU/n/WYqwop
fys02fHd5lXbg2ItGGaA/MSPuh+8BVO7oBIXfhpWj/CpXK5LrFDArtFfYu/G
+nY/njPqdznA0It92/3YQdctVEcecQMNGeljufWW4FsZd2Eu6eu3pEy+kENI
BJelPCD0Xvv47z3X/f9Dbo3ju1SjBAf8oJZgDJH/36jGOvG/eIXGiGIntvnl
m5OXr47knDp2E5wfthkg54uJ5tYb83d6Yz5B//fwnv5/SEnwxcpdGKEd6u1r
86U0zeLFll7z9uJX9nYqetA5myxcud7zFQLWTsMMWqpIHYBxaW+FjZIGODbI
thrO15kIq6pBUtjjAVpOYFC0TTpCkz8uDROXNderIHG3nKZd5LKNdr+m5rR1
9UjcAUas7UFrLpcf2uyb6pe0lNyRbbhBfzMMcITcsJ0UrSzS7+yh0ANCmmds
1ka2h2ZenX/PjZQsEYleK4pK7tuCvBSg1jvv30gztzjzUTvpX6xRUV6r9nEN
eY2xHQZud6QKab/ImPZ8S2N2r32vKzkvpi1GuHqbFwz6ibykLSFQatMXGHwq
fT9zzqlfp1tT6K2T6GNeunqsHCd4aBqX8UggCWwMOFslCRF7TUXlipt2NxVf
1t70RLmefVuVaB/ybHyZ5+iZdd5KtccUsbw9wB6awfUslZGkIP5RBdc17kjX
CjStrmRGtycQcnMq2lHx1Zac/Xt7AZCrk9olWSTENyaKDMhS4Y5ucjXLjcjx
81oQ+/yIG0Pe2OauJW588vDbc+cqLmZCaaS5dEwqPe7OPAGFbyMI3szQ6npT
m/KcaVzxoSd3CdFQGm6rqnU37IHuNQX4J7mOobmZhg++WPdflKWu6YKWpj6V
QKfaOzk6+x7akRUOmklFhnuI7fXtPAPY6LrTE83hWzODVVuP/rmIANe2rRo3
DLuSA6d3O3NjV3LpDDkc0g78gkR5u6sdNXFFujBzsDFHDEtZ9b7FUGpwwkBL
KlqdfXAzBxeey+Fa53uv6O22bsuRBlyDBV6qufHYHjzHta2m5gsFGj3F2n1p
eyvaOAAq4bUj8Q7OMrYchm4ceY+GpBvuoGA3Ob+9IuebYeVkw4AlsTmdaHmc
y+GyEU8mWr4Db56LDXgxQ4qrzoqdI7YFQQ9ph6SRuhcaGNt6rbVGXWR8glrt
nHi2jUkJj961F7F3ZLYEHEtNxqSDcXiEs1MVuAlXWjUcyK8ocFeDcZfMvrSX
2cR6UJhtbgOMS6yIDtvnfNuOf2UcAyGNsCTkDTjsa9AiS2Unq87smTzh4g2O
jOMNArRIo2FabGMRKcVi9cuDF2m03gUA1med9enztfO5F/vwbQJ6J5X3dgxV
gO3LBdG5/rqwh4K8a2zIa+EuEz+akrt+iDERSYRn+MkrC93bbzjVcf24wzUR
0vdYXZFtJUKfji4u4ne7nZTKz05/4prz+D9/5nMXeuiCn7wYnc+DJ+NTPIYD
GQN3LyIfzTjqO3bxK1aVRS/H40mMiQYPbEoNbq6iD8f4EOtjASj2fPkYdEAe
fe2whC4yw3UkyrtfPwmhgyZuzNcOPOgAuetkMB7N/3r09JGEZsCwGTX+q70Y
BR/O5V9yPco3HkmwKNWGQ71fq3HC9YpydwWUPWgjr9TxtQi/IUtaVfnSv9YD
zSkCitb0PMYyQ6ahjDd78p4zHCAdRReA23oQgPAtVnTpvUPnDrjxAa6hfxT5
jR96ceczLteTDA5vhNM/6VbxgttPVmaZIfshsocsCLwi1fpOWTwkcjiKMyRy
AjKVl9wkuK3AHX3A7dIYqFg+G4OpBspVBOMlNkuYIgeaNnHjeSm89d/YQ3Yd
/OXBs/46P7ITg27nMbewFUhvr46ax9k1pgGI2HmfeirkmKEnUuHaNokO3G32
Nv3RZGIVLe46lRZ9GC3uTIg/dXMOvbZXa3E8RjpUKiCC1qJFddaZjY/WnUhv
wiX1hqhTc0weG3zcU+TOoXtzMxGHWs1FfYmFXl1Cdm7klSn73AaP0aC5vEXf
eKh3/4hu5CAOwSCh3LtxSFuLWienfL0R3ls0aZ2OIB16Pic1B0Zi9YdjMEBe
T58zqYTz8cXlfHJ6Nr04Pb88m1zEA2lBamfOOWcT3q8UwjFtwzE/nZ9PzggM
/Ik/FJyPT4EznlyczccXk/PZdDyhnYyn8YCrJ7YI5VuoDgyzDgyz04uL2XR0
OZsxTi4FhirDdO7kMfwvtChHsXjw8k6S5vzbge7P3grSU3sbX56dzi5ms7Pp
5Xg+m0++trXXh1bmg6BVh0nk+PfEN0shfk7b+Dm9nJ2djeej+fnleDo5nc8E
P3nRbu9Sf6WnRskZNr4QamhNzVM4sPzl53O/ib/mHdpOZhfzi/PRdHxxNjuf
XJ4L7E2G8pugCSjgu0UdAM46AExPp2fzs9H09HR8enp2Nm8B8CSbz+bT2Tkh
/Pxydno+nZ9/jRd+KvgWKpsySJq0r2Q1+frCg53FBxhmPjo9P59O53PSGPPJ
2dnkEOOcd5F/OZ6RcF+OTyeTyfxMkd8q2H0DBcbT2Xw2uwQRLy/pP2JB3LEa
vBGDD9h7tOmQ5uIbecOVGsEe71uTHgJyglnG0+n0cjK9GI9PxzNzPD5r0asF
8pG9ccJ1lzPVuEhpX3nkukdhQ3K0buXtfV0ektfZxWR8Np2RuuZ9OZEEGJ5Y
fp31RRjbqOjYmHEHwUT9+cWM/PqL0xmRUHkfEwntv0Pqvrp6x8SRhSADcUnc
R2sTUU7/xavjs4MdpMKOzb0s/AJInIZ6NHUH9K5V7FcaAWd+aDHTU3qErOT5
6QWJ7iXplDN7A5KQtT0PoHuBDP2Hp/fHNRCvE7nnPrPm1pgnFUwYI7Vw07XW
E5Kwy9MREfWCfj8/n/9ZrfK9HNYxjF0F0lUe30Ii8p9n49nFJfHodH5Gtl90
x9eo9L0M2Md6XYM5nZydns5GpLKnZ+fTi4PI/fAVlT0/I7ScE63OL89hxlrY
7ttQAFnXknasSVcgvkVVsz05J/fq8pycRxKv+Rnphg6226zQFgeuYnWs60d3
648IxZXQ6ebtL7/9jMPY/dz7Az/z+cMHfabHLv0gIHgT9djWH/gRN08PKbkY
+ebF+xeo3lUUL9tDM9H7go/2cwqfgiM8I7eImCXht37sDAheLY+09D1fdIGI
JTgrwypha7ZyJ6eN/HE9P14QKS/tXt4mfO6h1Jf4yh0k7vUacrsywrqCX7ZJ
tKJwNuWMdpRRfMQprUeiw31aFjkXwvWud/JwlpyYt+/DrXZ4WZ49Z8U3l5VJ
itd5Nlff23vh3HsIEYHpZUjBWxrd7cfFTjZiewL4qLokz7lc07xDEodh+L0e
73/hd3sQBLn0RHEALO9AlWvMkkf7Vqsmj+DSnjlhMEHaTt+x7mBBujmtKFKv
m7SfvWoMM2yTPNnYXuNaC7Sv5W0Dw3B7KJmLTy9pmyR+xm/rPF4UX54hm5NW
Q/t2gqgqMsOvN2xdlb9AVk3ee+wuZRFw7JuzougTUJ9kwY0p8ae//fL57SvG
EzdwWrJYtghe84w7UgLY7TteRy/yR05Wgw+Ymv611ZXl7kQa7CPXemRXUSgW
fAFbXnPeUgEhztPUtUeHSKcWUXuxRLGCeFYwTmLzDo2GiCbl7acvMrOM/1ZI
J9E6/uUD3itA//NeXJleTGvBd7VHKPGRKuUXS++3pkS5T69WwIsM5BJmvLJ2
v9mgqZo7+/ktzAuiXfQ//+MilsaCAAA=

-->

</rfc>

