<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.19 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2544 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2544.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-bmwg-mlrsearch-01" category="info">

  <front>
    <title>Multiple Loss Ratio Search for Packet Throughput (MLRsearch)</title>

    <author initials="M." surname="Konstantynowicz" fullname="Maciek Konstantynowicz" role="editor">
      <organization>Cisco Systems</organization>
      <address>
        <email>mkonstan@cisco.com</email>
      </address>
    </author>
    <author initials="V." surname="Polak" fullname="Vratko Polak" role="editor">
      <organization>Cisco Systems</organization>
      <address>
        <email>vrpolak@cisco.com</email>
      </address>
    </author>

    <date year="2021" month="July" day="09"/>

    <area>ops</area>
    <workgroup>Benchmarking Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes changes to <xref target="RFC2544"></xref>, specifically to packet
throughput search methodology, by defining a new search algorithm
referred to as Multiple Loss Ratio search (MLRsearch for short). Instead
of relying on binary search with pre-set starting offered load, it
proposes a novel approach discovering the starting point in the initial
phase, and then searching for packet throughput based on defined packet
loss ratio (PLR) input criteria and defined final trial duration time.
One of the key design principles behind MLRsearch is minimizing the
total test duration and searching for multiple packet throughput rates
(each with a corresponding PLR) concurrently, instead of doing it
sequentially.</t>

<t>The main motivation behind MLRsearch is the new set of challenges and
requirements posed by NFV (Network Function Virtualization),
specifically software based implementations of NFV data planes. Using
<xref target="RFC2544"></xref> in the experience of the authors yields often not repetitive
and not replicable end results due to a large number of factors that are
out of scope for this draft. MLRsearch aims to address this challenge
in a simple way of getting the same result sooner, so more repetitions
can be done to describe the replicability.</t>



    </abstract>


  </front>

  <middle>


<section anchor="terminology" title="Terminology">

<t><list style="symbols">
  <t>Frame size: size of an Ethernet Layer-2 frame on the wire, including
any VLAN tags (dot1q, dot1ad) and Ethernet FCS, but excluding Ethernet
preamble and inter-frame gap. Measured in bytes (octets).</t>
  <t>Packet size: same as frame size, both terms used interchangeably.</t>
  <t>Device Under Test (DUT): In software networking, &quot;device&quot; denotes a
specific piece of software tasked with packet processing. Such device
is surrounded with other software components (such as operating system
kernel). It is not possible to run devices without also running the
other components, and hardware resources are shared between both. For
purposes of testing, the whole set of hardware and software components
is called &quot;system under test&quot; (SUT). As SUT is the part of the whole
test setup performance of which can be measured by <xref target="RFC2544"></xref> methods,
this document uses SUT instead of <xref target="RFC2544"></xref> DUT. Device under test
(DUT) can be re-introduced when analysing test results using whitebox
techniques, but this document sticks to blackbox testing.</t>
  <t>System Under Test (SUT): System under test (SUT) is a part of the
whole test setup whose performance is to be benchmarked. The complete
test setup contains other parts, whose performance is either already
established, or not affecting the benchmarking result.</t>
  <t>Bi-directional throughput tests: involve packets/frames flowing in
both transmit and receive directions over every tested interface of
SUT/DUT. Packet flow metrics are measured per direction, and can be
reported as aggregate for both directions and/or separately
for each measured direction. In most cases bi-directional tests
use the same (symmetric) load in both directions.</t>
  <t>Uni-directional throughput tests: involve packets/frames flowing in
only one direction, i.e. either transmit or receive direction, over
every tested interface of SUT/DUT. Packet flow metrics are measured
and are reported for measured direction.</t>
  <t>Packet Loss Ratio (PLR): ratio of packets received relative to packets
transmitted over the test trial duration, calculated using formula:
PLR = ( pkts_transmitted - pkts_received ) / pkts_transmitted.
For bi-directional throughput tests aggregate PLR is calculated based
on the aggregate number of packets transmitted and received.</t>
  <t>Effective loss ratio: A corrected value of measured packet loss ratio
chosen to avoid difficulties if SUT exhibits decreasing loss
with increasing load. Maximum of packet loss ratios measured at the same
duration on all loads smaller than (and including) the current one.</t>
  <t>Target loss ratio: A packet loss ratio value acting as an imput for search.
The search is finding tight enough lower and upper bound in intended load,
so that the lower bound has smaller or equal loss ratio, and upper bound
has strictly larger loss ratio. For the tighterst upper bound,
the effective loss ratio is the same as packet loss ratio.
For the tightest lower bound, the effective loss ratio can be higher
than the packet loss ratio, but still not larger than the target loss ratio.</t>
  <t>Packet Throughput Rate: maximum packet offered load DUT/SUT forwards
within the specified Packet Loss Ratio (PLR). In many cases the rate
depends on the frame size processed by DUT/SUT. Hence packet
throughput rate MUST be quoted with specific frame size as received by
DUT/SUT during the measurement. For bi-directional tests, packet
throughput rate should be reported as aggregate for both directions.
Measured in packets-per-second (pps) or frames-per-second (fps),
equivalent metrics.</t>
  <t>Bandwidth Throughput Rate: a secondary metric calculated from packet
throughput rate using formula: bw_rate = pkt_rate * (frame_size +
L1_overhead) * 8, where L1_overhead for Ethernet includes preamble (8
octets) and inter-frame gap (12 octets). For bi-directional tests,
bandwidth throughput rate should be reported as aggregate for both
directions. Expressed in bits-per-second (bps).</t>
  <t>Non Drop Rate (NDR): maximum packet/bandwith throughput rate sustained
by DUT/SUT at PLR equal zero (zero packet loss) specific to tested
frame size(s). MUST be quoted with specific packet size as received by
DUT/SUT during the measurement. Packet NDR measured in
packets-per-second (or fps), bandwidth NDR expressed in
bits-per-second (bps).</t>
  <t>Partial Drop Rate (PDR): maximum packet/bandwith throughput rate
sustained by DUT/SUT at PLR greater than zero (non-zero packet loss)
specific to tested frame size(s). MUST be quoted with specific packet
size as received by DUT/SUT during the measurement. Packet PDR
measured in packets-per-second (or fps), bandwidth PDR expressed in
bits-per-second (bps).</t>
  <t>Maximum Receive Rate (MRR): packet/bandwidth rate regardless of PLR
sustained by DUT/SUT under specified Maximum Transmit Rate (MTR)
packet load offered by traffic generator. MUST be quoted with both
specific packet size and MTR as received by DUT/SUT during the
measurement. Packet MRR measured in packets-per-second (or fps),
bandwidth MRR expressed in bits-per-second (bps).</t>
  <t>Trial: a single measurement step. See <xref target="RFC2544"></xref> section 23.</t>
  <t>Trial duration: amount of time over which packets are transmitted
in a single measurement step.</t>
</list></t>

</section>
<section anchor="mlrsearch-background" title="MLRsearch Background">

<t>Multiple Loss Ratio search (MLRsearch) is a packet throughput search
algorithm suitable for deterministic systems (as opposed to
probabilistic systems). MLRsearch discovers multiple packet throughput
rates in a single search, each rate is associated with a distinct
Packet Loss Ratio (PLR) criterion.</t>

<t>For cases when multiple rates need to be found, this property makes
MLRsearch more efficient in terms of time execution, compared to
traditional throughput search algorithms that discover a single packet
rate per defined search criteria (e.g. a binary search specified by
<xref target="RFC2544"></xref>). MLRsearch reduces execution time even further by relying on
shorter trial durations of intermediate steps, with only the final
measurements conducted at the specified final trial duration. This
results in the shorter overall search execution time when compared to a
traditional binary search, while guaranteeing the same results for
deterministic systems.</t>

<t>In practice two rates with distinct PLRs are commonly used for packet
throughput measurements of NFV systems: Non Drop Rate (NDR) with PLR=0
and Partial Drop Rate (PDR) with PLR&gt;0. The rest of this document
describes MLRsearch with NDR and PDR pair as an example.</t>

<t>Similarly to other throughput search approaches like binary search,
MLRsearch is effective for SUTs/DUTs with PLR curve that is
non-decreasing with growing offered load. It may not be as
effective for SUTs/DUTs with abnormal PLR curves, although
it will always converge to some value.</t>

<t>MLRsearch relies on traffic generator to qualify the received packet
stream as error-free, and invalidate the results if any disqualifying
errors are present e.g. out-of-sequence frames.</t>

<t>MLRsearch can be applied to both uni-directional and bi-directional
throughput tests.</t>

<t>For bi-directional tests, MLRsearch rates and ratios are aggregates of
both directions, based on the following assumptions:</t>

<t><list style="symbols">
  <t>Traffic transmitted by traffic generator and received by SUT/DUT
has the same packet rate in each direction,
in other words the offered load is symmetric.</t>
  <t>SUT/DUT packet processing capacity is the same in both directions,
resulting in the same packet loss under load.</t>
</list></t>

<t>MLRsearch can be applied even without those assumptions,
but in that case the aggregate loss ratio is less useful as a metric.</t>

<t>MLRsearch can be used for network transactions consisting of more than
just one packet, or anything else that has intended load as input
and loss ratio as output (duration as input is optional).
This text uses mostly packet-centric language.</t>

</section>
<section anchor="mlrsearch-overview" title="MLRsearch Overview">

<t>The main properties of MLRsearch:</t>

<t><list style="symbols">
  <t>MLRsearch is a duration aware multi-phase multi-rate search algorithm:
  <list style="symbols">
      <t>Initial Phase determines promising starting interval for the search.</t>
      <t>Intermediate Phases progress towards defined final search criteria.</t>
      <t>Final Phase executes measurements according to the final search
criteria.</t>
      <t>Final search criteria are defined by following inputs:
      <list style="symbols">
          <t>Target PLRs (e.g. 0.0 and 0.005 when searching for NDR and PDR).</t>
          <t>Final trial duration.</t>
          <t>Measurement resolution.</t>
        </list></t>
    </list></t>
  <t>Initial Phase:
  <list style="symbols">
      <t>Measure MRR over initial trial duration.</t>
      <t>Measured MRR is used as an input to the first intermediate phase.</t>
    </list></t>
  <t>Multiple Intermediate Phases:
  <list style="symbols">
      <t>Trial duration:
      <list style="symbols">
          <t>Start with initial trial duration in the first intermediate phase.</t>
          <t>Converge geometrically towards the final trial duration.</t>
        </list></t>
      <t>Track all previous trial measurement results:
      <list style="symbols">
          <t>Duration, offered load and loss ratio are tracked.</t>
          <t>Effective loss ratios are tracked.
          <list style="symbols">
              <t>While in practice, real loss ratios can decrease with increasing load,
effective loss ratios never decrease. This is achieved by sorting
results by load, and using the effective loss ratio of the previous load
if the current loss ratio is smaller than that.</t>
            </list></t>
          <t>The algorithm queries the results to find best lower and upper bounds.
          <list style="symbols">
              <t>Effective loss ratios are always used.</t>
            </list></t>
          <t>The phase ends if all target loss ratios have tight enough bounds.</t>
        </list></t>
      <t>Search:
      <list style="symbols">
          <t>Iterate over target loss ratios in increasing order.</t>
          <t>If both upper and lower bound are in measurement results for this duration,
apply bisect until the bounds are tight enough,
and continue with next loss ratio.</t>
          <t>If a bound is missing for this duration, but there exists a bound
from the previous duration (compatible with the other bound
at this duration), re-measure at the current duration.</t>
          <t>If a bound in one direction (upper or lower) is missing for this duration,
and the previous duration does not have a compatible bound,
compute the current &quot;interval size&quot; from the second tightest bound
in the other direction (lower or upper respectively)
for the current duration, and choose next offered load for external search.</t>
          <t>The logic guarantees that a measurement is never repeated with both
duration and offered load being the same.</t>
          <t>The logic guarantees that measurements for higher target loss ratio
iterations (still within the same phase duration) do not affect validity
and tightness of bounds for previous target loss ratio iterations
(at the same duration).</t>
        </list></t>
      <t>Use of internal and external searches:
      <list style="symbols">
          <t>External search:
          <list style="symbols">
              <t>It is a variant of &quot;exponential search&quot;.</t>
              <t>The &quot;interval size&quot; is multiplied by a configurable constant
(powers of two work well with the subsequent internal search).</t>
            </list></t>
          <t>Internal search:
          <list style="symbols">
              <t>A variant of binary search that measures at offered load between
the previously found bounds.</t>
              <t>The interval does not need to be split into exact halves,
if other split can get to the target width goal faster.
              <list style="symbols">
                  <t>The idea is to avoid returning interval narrower than the current
width goal. See sample implementation details, below.</t>
                </list></t>
            </list></t>
        </list></t>
    </list></t>
  <t>Final Phase:
  <list style="symbols">
      <t>Executed with the final test trial duration, and the final width
goal that determines resolution of the overall search.</t>
    </list></t>
  <t>Intermediate Phases together with the Final Phase are called
Non-Initial Phases.</t>
  <t>The returned bounds stay within prescribed min_rate and max_rate.
  <list style="symbols">
      <t>When returning min_rate or max_rate, the returned bounds may be invalid.
      <list style="symbols">
          <t>E.g. upper bound at max_rate may come from a measurement
with loss ratio still not higher than the target loss ratio.</t>
        </list></t>
    </list></t>
</list></t>

<t>The main benefits of MLRsearch vs. binary search include:</t>

<t><list style="symbols">
  <t>In general MLRsearch is likely to execute more trials overall, but
likely less trials at a set final trial duration.</t>
  <t>In well behaving cases, e.g. when results do not depend on trial
duration, it greatly reduces (&gt;50%) the overall duration compared to a
single PDR (or NDR) binary search over duration, while finding
multiple drop rates.</t>
  <t>In all cases MLRsearch yields the same or similar results to binary
search.</t>
  <t>Note: both binary search and MLRsearch are susceptible to reporting
non-repeatable results across multiple runs for very bad behaving
cases.</t>
</list></t>

<t>Caveats:</t>

<t><list style="symbols">
  <t>Worst case MLRsearch can take longer than a binary search, e.g. in case of
drastic changes in behaviour for trials at varying durations.
  <list style="symbols">
      <t>Re-measurement at higher duration can trigger a long external search.
That never happens in binary search, which uses the final duration
from the start.</t>
    </list></t>
</list></t>

</section>
<section anchor="sample-implementation" title="Sample Implementation">

<t>Following is a brief description of a sample MLRsearch implementation,
which is a simplified version of the existing implementation.</t>

<section anchor="input-parameters" title="Input Parameters">

<t><list style="numbers">
  <t><spanx style="strong">max_rate</spanx> - Maximum Transmit Rate (MTR) of packets to
be used by external traffic generator implementing MLRsearch,
limited by the actual Ethernet link(s) rate, NIC model or traffic
generator capabilities.</t>
  <t><spanx style="strong">min_rate</spanx> - minimum packet transmit rate to be used for
measurements. MLRsearch fails if lower transmit rate needs to be
used to meet search criteria.</t>
  <t><spanx style="strong">final_trial_duration</spanx> - required trial duration for final rate
measurements.</t>
  <t><spanx style="strong">initial_trial_duration</spanx> - trial duration for initial MLRsearch phase.</t>
  <t><spanx style="strong">final_relative_width</spanx> - required measurement resolution expressed as
(lower_bound, upper_bound) interval width relative to upper_bound.</t>
  <t><spanx style="strong">packet_loss_ratios</spanx> - list of maximum acceptable PLR search criteria.</t>
  <t><spanx style="strong">number_of_intermediate_phases</spanx> - number of phases between the initial
phase and the final phase. Impacts the overall MLRsearch duration.
Less phases are required for well behaving cases, more phases
may be needed to reduce the overall search duration for worse behaving cases.</t>
</list></t>

</section>
<section anchor="initial-phase" title="Initial Phase">

<t><list style="numbers">
  <t>First trial measures at configured maximum transmit rate (MTR) and
discovers maximum receive rate (MRR).
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = maximum_transmit_rate.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR = measured receive rate.
Received rate is computed as intended load multiplied by pass ratio
(which is one minus loss ratio). This is useful when loss ratio is computed
from a different metric than intended load. For example, intended load
can be in transactions (multiple packets each), but loss ratio is computed
on level of packets, not transactions.</t>
      <t>Example: If MTR is 10 transactions per second, and each transaction has
10 packets, and receive rate is 90 packets per second, then loss rate
is 10%, and MRR is computed to be 9 transactions per second.</t>
    </list>
If MRR is too close to MTR, MRR is set below MTR so that interval width
is equal to the width goal of the first intermediate phase.
If MRR is less than min_rate, min_rate is used.</t>
  <t>Second trial measures at MRR and discovers MRR2.
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = MRR.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR2 = measured receive rate.
If MRR2 is less than min_rate, min_rate is used.
If loss ratio is less or equal to the smallest target loss ratio,
MRR2 is set to a value above MRR, so that interval width is equal
to the width goal of the first intermediate phase.
MRR2 could end up being equal to MTR (for example if both measurements so far
had zero loss), which was already measured, step 3 is skipped in that case.</t>
    </list></t>
  <t>Third trial measures at MRR2.
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = MRR2.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR3 = measured receive rate.
If MRR3 is less than min_rate, min_rate is used.
If step 3 is not skipped, the first trial measurement is forgotten.
This is done because in practice (if MRR2 is above MRR), external search
from MRR and MRR2 is likely to lead to a faster intermediate phase
than a bisect between MRR2 and MTR.</t>
    </list></t>
</list></t>

</section>
<section anchor="non-initial-phases" title="Non-Initial Phases">

<t><list style="numbers">
  <t>Main phase loop:
  <list style="numbers">
      <t>IN: trial_duration for the current phase. Set to
initial_trial_duration for the first intermediate phase; to
final_trial_duration for the final phase; or to the element of
interpolating geometric sequence for other intermediate phases.
For example with two intermediate phases, trial_duration of the
second intermediate phase is the geometric average of
initial_trial_duration and final_trial_duration.</t>
      <t>IN: relative_width_goal for the current phase. Set to
final_relative_width for the final phase; doubled for each
preceding phase. For example with two intermediate phases, the
first intermediate phase uses quadruple of final_relative_width
and the second intermediate phase uses double of
final_relative_width.</t>
      <t>IN: Measurement results from the previous phase (previous duration).</t>
      <t>Internal target ratio loop:
      <list style="numbers">
          <t>IN: Target loss ratio for this iteration of ratio loop.</t>
          <t>IN: Measurement results from all previous ratio loop iterations
of current phase (current duration).</t>
          <t>DO: According to the procedure described in point 2:
          <list style="numbers">
              <t>either exit the phase (by jumping to 1.5),</t>
              <t>or exit loop iteration (by continuing with next target loss ratio,
jumping to 1.4.1),</t>
              <t>or calculate new transmit rate to measure with.</t>
            </list></t>
          <t>DO: Perform the trial measurement at the new transmit rate and
current trial duration, compute its loss ratio.</t>
          <t>DO: Add the result and go to next iteration (1.4.1),
including the added trial result in 1.4.2.</t>
        </list></t>
      <t>OUT: Measurement results from this phase.</t>
      <t>OUT: In the final phase, bounds for each target loss ratio
are extracted and returned.
      <list style="numbers">
          <t>If a valid bound does not exist, use min_rate or max_rate.</t>
        </list></t>
    </list></t>
  <t>New transmit rate (or exit) calculation (for point 1.4.3):
  <list style="numbers">
      <t>If the previous duration has the best upper and lower bound,
select the middle point as the new transmit rate.
      <list style="numbers">
          <t>See 2.5.3. below for the exact splitting logic.</t>
          <t>This can be a no-op if interval is narrow enough already,
in that case continue with 2.2.</t>
          <t>Discussion, assuming the middle point is selected and measured:
          <list style="numbers">
              <t>Regardless of loss rate measured, the result becomes
either best upper or best lower bound at current duration.</t>
              <t>So this condition is satisfied at most once per iteration.</t>
              <t>This also explains why previous phase has double width goal:
              <list style="numbers">
                  <t>We avoid one more bisection at previous phase.</t>
                  <t>At most one bound (per iteration) is re-measured
with current duration.</t>
                  <t>Each re-measurement can trigger an external search.</t>
                  <t>Such surprising external searches are the main hurdle
in achieving low overal search durations.</t>
                  <t>Even without 1.1, there is at most one external search
per phase and target loss ratio.</t>
                  <t>But without 1.1 there can be two re-measurements,
each coming with a risk of triggering external search.</t>
                </list></t>
            </list></t>
        </list></t>
      <t>If the previous duration has one bound best, select its transmit rate.
In deterministic case this is the last measurement needed this iteration.</t>
      <t>If only upper bound exists in current duration results:
      <list style="numbers">
          <t>This can only happen for the smallest target loss ratio.</t>
          <t>If the upper bound was measured at min_rate,
exit the whole phase early (not investigating other target loss ratios).</t>
          <t>Select new transmit rate using external search:
          <list style="numbers">
              <t>For computing previous interval size, use:
              <list style="numbers">
                  <t>second tightest bound at current duration,</t>
                  <t>or tightest bound of previous duration,
if compatible and giving a more narrow interval,</t>
                  <t>or target interval width if none of the above is available.</t>
                  <t>In any case increase to target interval width if smaller.</t>
                </list></t>
              <t>Quadruple the interval width.</t>
              <t>Use min_rate if the new transmit rate is lower.</t>
            </list></t>
        </list></t>
      <t>If only lower bound exists in current duration results:
      <list style="numbers">
          <t>If the lower bound was measured at max_rate,
exit this iteration (continue with next lowest target loss ratio).</t>
          <t>Select new transmit rate using external search:
          <list style="numbers">
              <t>For computing previous interval size, use:
              <list style="numbers">
                  <t>second tightest bound at current duration,</t>
                  <t>or tightest bound of previous duration,
if compatible and giving a more narrow interval,</t>
                  <t>or target interval width if none of the above is available.</t>
                  <t>In any case increase to target interval width if smaller.</t>
                </list></t>
              <t>Quadruple the interval width.</t>
              <t>Use max_rate if the new transmit rate is higher.</t>
            </list></t>
        </list></t>
      <t>The only remaining option is both bounds in current duration results.
      <list style="numbers">
          <t>This can happen in two ways, depending on how the lower bound
was chosen.
          <list style="numbers">
              <t>It could have been selected for the current loss ratio,
e.g. in re-measurement (2.2) or in initial bisect (2.1).</t>
              <t>It could have been found as an upper bound for the previous smaller
target loss ratio, in which case it might be too low.</t>
              <t>The algorithm does not track which one is the case,
as the decision logic works well regardless.</t>
            </list></t>
          <t>Compute &quot;extending down&quot; candidate transmit rate exactly as in 2.3.</t>
          <t>Compute &quot;bisecting&quot; candidate transmit rate:
          <list style="numbers">
              <t>Compute the current interval width from the two bounds.</t>
              <t>Express the width as a (float) multiple of the target width goal
for this phase.</t>
              <t>If the multiple is not higher than one, it means the width goal
is met. Exit this iteration and continue with next higher
target loss ratio.</t>
              <t>If the multiple is two or less, use half of that
for new width if the lower subinterval.</t>
              <t>Round the multiple up to nearest even integer.</t>
              <t>Use half of that for new width if the lower subinterval.</t>
              <t>Example: If lower bound is 2.0 and upper bound is 5.0, and width
goal is 1.0, the new candidate transmit rate will be 4.0.
This can save a measurement when 4.0 has small loss.
Selecting the average (3.5) would never save a measurement,
giving more narrow bounds instead.</t>
            </list></t>
          <t>If either candidate computation want to exit the iteration,
do as bisecting candidate computation says.</t>
          <t>The remaining case is both candidates wanting to measure at some rate.
Use the higher rate. This prefers external search down narrow enough
interval, competing with perfectly sized lower bisect subinterval.</t>
        </list></t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="fdio-csit-implementation" title="FD.io CSIT Implementation">

<t>The only known working implementation of MLRsearch is in
the open-source code running in Linux Foundation
FD.io CSIT project <xref target="FDio-CSIT-MLRsearch"></xref> as part of
a Continuous Integration / Continuous Development (CI/CD) framework.</t>

<t>MLRsearch is also available as a Python package in <xref target="PyPI-MLRsearch"></xref>.</t>

<section anchor="additional-details" title="Additional details">

<t>This document so far has been describing a simplified version of
MLRsearch algorithm. The full algorithm as implemented in CSIT contains
additional logic, which makes some of the details (but not general
ideas) above incorrect. Here is a short description of the additional
logic as a list of principles, explaining their main differences from
(or additions to) the simplified description, but without detailing
their mutual interaction.</t>

<t><list style="numbers">
  <t>Logarithmic transmit rate.
  <list style="symbols">
      <t>In order to better fit the relative width goal, the interval
doubling and halving is done differently.</t>
      <t>For example, the middle of 2 and 8 is 4, not 5.</t>
    </list></t>
  <t>Timeout for bad cases.
  <list style="symbols">
      <t>The worst case for MLRsearch is when each phase converges to
intervals way different than the results of the previous phase.</t>
      <t>Rather than suffer total search time several times larger than pure
binary search, the implemented tests fail themselves when the
search takes too long (given by argument <spanx style="emph">timeout</spanx>).</t>
    </list></t>
  <t>Intended count.
  <list style="symbols">
      <t>The number of packets to send during the trial should be equal to
the intended load multiplied by the duration.
      <list style="symbols">
          <t>Also multiplied by a coefficient, if loss ratio is calculated
from a different metric.
          <list style="symbols">
              <t>Example: If a successful transaction uses 10 packets,
load is given in transactions per second, byt loss ratio is calculated
from packets, the coefficient to get intended count of packets is 10.</t>
            </list></t>
        </list></t>
      <t>But in practice that does not work.
      <list style="symbols">
          <t>It could result in a fractional number of packets,</t>
          <t>so it has to be rounded in a way traffic generator chooses,</t>
          <t>which may depend on the number of traffic flows
and traffic generator worker threads.</t>
        </list></t>
    </list></t>
  <t>Attempted count. As the real number of intended packets is not known exactly,
the computation uses the number of packets traffic generator reports as sent.
Unless overriden by the next point.</t>
  <t>Duration stretching.
  <list style="symbols">
      <t>In some cases, traffic generator may get overloaded,
causing it to take significantly longer (than duration) to send all packets.</t>
      <t>The implementation uses an explicit stop,
      <list style="symbols">
          <t>causing lower attempted count in those cases.</t>
        </list></t>
      <t>The implementation tolerates some small difference between
attempted count and intended count.
      <list style="symbols">
          <t>10 microseconds worth of traffic is sufficient for our tests.</t>
        </list></t>
      <t>If the difference is higher, the unsent packets are counted as lost.
      <list style="symbols">
          <t>This forces the search to avoid the regions of high duration stretching.</t>
          <t>The final bounds describe the performance of not just SUT,
but of the whole system, including the traffic generator.</t>
        </list></t>
    </list></t>
  <t>Excess packets.
  <list style="symbols">
      <t>In some test (e.g. using TCP flows) Traffic generator reacts to packet loss
by retransmission. Usually, such packet loss is already affecting loss ratio.
If a test also wants to treat retransmissions due to heavily delayed packets
also as a failure, this is once again visible as a mismatch between
the intended count and the attempted count.</t>
      <t>The CSIT implementation simply looks at absolute value of the difference,
so it offes the same small tolerance before it start marking a &quot;loss&quot;.</t>
    </list></t>
  <t>For result processing, we use lower bounds and ignore upper bounds.</t>
</list></t>

<section anchor="fdio-csit-input-parameters" title="FD.io CSIT Input Parameters">

<t><list style="numbers">
  <t><spanx style="strong">max_rate</spanx> - Typical values: 2 * 14.88 Mpps for 64B
10GE link rate, 2 * 18.75 Mpps for 64B 40GE NIC (specific model).</t>
  <t><spanx style="strong">min_rate</spanx> - Value: 2 * 9001 pps (we reserve 9000 pps
for latency measurements).</t>
  <t><spanx style="strong">final_trial_duration</spanx> - Value: 30.0 seconds.</t>
  <t><spanx style="strong">initial_trial_duration</spanx> - Value: 1.0 second.</t>
  <t><spanx style="strong">final_relative_width</spanx> - Value: 0.005 (0.5%).</t>
  <t><spanx style="strong">packet_loss_ratios</spanx> - Value: 0.0, 0.005 (0.0% for NDR, 0.5% for PDR).</t>
  <t><spanx style="strong">number_of_intermediate_phases</spanx> - Value: 2.
The value has been chosen based on limited experimentation to date.
More experimentation needed to arrive to clearer guidelines.</t>
  <t><spanx style="strong">timeout</spanx> - Limit for the overall search duration (for one search).
If MLRsearch oversteps this limit, it immediatelly declares the test failed,
to avoid wasting even more time on a misbehaving SUT.
Value: 600.0 (seconds).</t>
  <t><spanx style="strong">expansion_coefficient</spanx> - Width multiplier for external search.
Value: 4.0 (interval width is quadroupled).
Value of 2.0 is best for well-behaved SUTs, but value of 4.0 has been found
to decrease overall search time for worse-behaved SUT configurations,
contributing more to the overall set of different SUT configurations tested.</t>
</list></t>

</section>
</section>
<section anchor="example-mlrsearch-run" title="Example MLRsearch Run">

<t>The following list describes a search from a real test run in CSIT
(using the default input values as above).</t>

<t><list style="symbols">
  <t>Initial phase, trial duration 1.0 second.</t>
  <t>Measurement 1, intended load 18750000.0 pps (MTR),
measured loss ratio 0.7089514628479618 (valid upper bound for both NDR and PDR).</t>
  <t>Measurement 2, intended load 5457160.071600716 pps (MRR),
measured loss ratio 0.018650817320118702 (new tightest upper bounds).</t>
  <t>Measurement 3, intended load 5348832.933500009 pps (slightly less than MRR2
in preparation for first intermediate phase target interval width),
measured loss ratio 0.00964383362905351 (new tightest upper bounds).</t>
  <t>First intermediate phase starts, trial duration still 1.0 seconds.</t>
  <t>Measurement 4, intended load 4936605.579021453 pps (no lower bound,
performing external search downwards, for NDR),
measured loss ratio 0.0 (valid lower bound for both NDR and PDR).</t>
  <t>Measurement 5, intended load 5138587.208637197 pps (bisecting for NDR),
measured loss ratio 0.0 (new tightest lower bounds).</t>
  <t>Measurement 6, intended load 5242656.244044665 pps (bisecting),
measured loss ratio 0.013523745379347257 (new tightest upper bounds).</t>
  <t>Both intervals are narrow enough.</t>
  <t>Second intermediate phase starts, trial duration 5.477225575051661 seconds.</t>
  <t>Measurement 7, intended load 5190360.904111567 pps (initial bisect for NDR),
measured loss ratio 0.0023533920869969953 (NDR upper bound, PDR lower bound).</t>
  <t>Measurement 8, intended load 5138587.208637197 pps (re-measuring NDR lower bound),
measured loss ratio 1.2080222912800403e-06 (new tightest NDR upper bound).</t>
  <t>The two intervals have separate bounds from now on.</t>
  <t>Measurement 9, intended load 4936605.381062318 pps (external NDR search down),
measured loss ratio 0.0 (new valid NDR lower bound).</t>
  <t>Measurement 10, intended load 5036583.888432355 pps (NDR bisect),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>
  <t>Measurement 11, intended load 5087329.903232804 pps (NDR bisect),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>
  <t>NDR interval is narrow enough, PDR interval not ready yet.</t>
  <t>Measurement 12, intended load 5242656.244044665 pps (re-measuring PDR upper bound),
measured loss ratio 0.0101174866190136 (still valid PDR upper bound).</t>
  <t>Also PDR interval is narrow enough, with valid bounds for this duration.</t>
  <t>Final phase starts, trial duration 30.0 seconds.</t>
  <t>Measurement 13, intended load 5112894.3238511775 pps (initial bisect for NDR),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>
  <t>Measurement 14, intended load 5138587.208637197 (re-measuring NDR upper bound),
measured loss ratio 2.030389804256833e-06 (still valid PDR upper bound).</t>
  <t>NDR interval is narrow enough, PDR interval not yet.</t>
  <t>Measurement 15, intended load 5216443.04126728 pps (initial bisect for PDR),
measured loss ratio 0.005620871287975237 (new tightest PDR upper bound).</t>
  <t>Measurement 16, intended load 5190360.904111567 (re-measuring PDR lower bound),
measured loss ratio 0.0027629971184465604 (still valid PDR lower bound).</t>
  <t>PDR interval is also narrow enough.</t>
  <t>Returning bounds:</t>
  <t>NDR_LOWER = 5112894.3238511775 pps; NDR_UPPER = 5138587.208637197 pps;</t>
  <t>PDR_LOWER = 5190360.904111567 pps; PDR_UPPER = 5216443.04126728 pps.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>No requests of IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Benchmarking activities as described in this memo are limited to
technology characterization of a DUT/SUT using controlled stimuli in a
laboratory environment, with dedicated address space and the constraints
specified in the sections above.</t>

<t>The benchmarking network topology will be an independent test setup and
MUST NOT be connected to devices that may forward the test traffic into
a production network or misroute traffic to the test management network.</t>

<t>Further, benchmarking is performed on a &quot;black-box&quot; basis, relying
solely on measurements observable external to the DUT/SUT.</t>

<t>Special capabilities SHOULD NOT exist in the DUT/SUT specifically for
benchmarking purposes.Any implications for network security arising
from the DUT/SUT SHOULD be identical in the lab and in production
networks.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Many thanks to Alec Hothan of OPNFV NFVbench project for thorough
review and numerous useful comments and suggestions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2544;


    </references>

    <references title='Informative References'>

<reference anchor="FDio-CSIT-MLRsearch" target="https://docs.fd.io/csit/rls2101/report/introduction/methodology_data_plane_throughput/methodology_mlrsearch_tests.html">
  <front>
    <title>FD.io CSIT Test Methodology - MLRsearch</title>
    <author >
      <organization></organization>
    </author>
    <date year="2021" month="February"/>
  </front>
</reference>
<reference anchor="PyPI-MLRsearch" target="https://pypi.org/project/MLRsearch/0.4.0/">
  <front>
    <title>MLRsearch 0.4.0, Python Package Index</title>
    <author >
      <organization></organization>
    </author>
    <date year="2021" month="April"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAHZ97GAAA+19WY/bSJbuO38F4UYDSl+lrJRyL/TgurxMG2O7PF6qHhqN
BCWFlOykSBWXTKt+/T3fOSeCESSVtgs9T3MTVXZaYkScOPsWwePj46hO68xc
x++arE53mYnfFlUVf0zqtIg/maRc3sbroow/JMs7U8efb8ui2dzumjoevXv7
seIHjqK/xMliUZp7msZ+GK2KZZ5saeZVmazr49TU6+PF9mFzvM1KeeR4ehKt
kpoemU1nJ8fTi+PpVRSlu/I6rsumqmfT6dV0FiWlSa7jYldFD5vr+GeTL2+3
SXmX5pv4t0L+/k+CahfdPVzHb/LalLmpj19i1WiZ1Ndxmq+LKFoWK3r0Om6q
46Rapmm0S69j+vlLvExy+tTESVkm+3iUruMky+K9qY5i2vltUt3Gt6Y0tMv4
OK6LpfxSFWVdmnWl/9pv+R8xHrjGYPrVPnLNy6zMOiEkV/SE/V4GyeNR0tS3
RXkdxfxzrH/HBD498W4S/1eRV3WS1/u8eEiXf7jvBcvvkmVq7g4+VJS09Rdp
tSSq7qvabCv3VVmA/maV1kXpPjTbJM2u4+2dzPd/lxg6WRbbYfB+ncQfiiy5
6wD1a5nUd0Xnqz8Jyn25wzQeJFFelFti1HsDpH18/WJ2dnp6TRxE9Pa+eP0y
LY5ffHrz+dgxpyC5TsqNIf64retddf3sGXFsNVmvJmnxbFml9bMyq2Yn05Nn
pdkRIZ+leV0Wq2ZJkpE/2xoi1qrIis3+hng4udllSW5uaicfwROO5W9qU9XV
5LbeZgKCCN+T1y9p1RhAxp/pifhdO5iYy8H9hAf5MjOjTz7sP7z51t52+106
Icw/25XFv8yyfuaefzadnE6mzwJw3JcxfzmmJQienLVAsjEkZSvztQ/MaRQd
Hx+TLqjqMlnWUfT5Nq1iQmuzNXkd09K7ojJVvLxN8o1hQfiHku2f47jamWW6
TpckfHt8tWOVE7UojRUmD7PjeLGHYKU51EAS5+bBPpVkm6JM69ttRDJmytKs
MGlSDWo6HdPqNFZ6FcljfTSh7RKbJquoWMelyfZYipCxSPOk3NuhD7QU7dAc
V6QmSWTKmh9b09K0clYkq3Gc1pHDAcFa3JssTnb0UUITrMDX96bEsPrWtHPs
CuI8EjP+lDZap0kW7UgtmXGc5Ct8nCsUeByAC+piD3ULenwFqBlZ9KtiNwMO
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

-->

</rfc>

