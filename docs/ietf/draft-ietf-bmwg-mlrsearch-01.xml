<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.19 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2544 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2544.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-bmwg-mlrsearch-01" category="info">

  <front>
    <title>Multiple Loss Ratio Search for Packet Throughput (MLRsearch)</title>

    <author initials="M." surname="Konstantynowicz" fullname="Maciek Konstantynowicz" role="editor">
      <organization>Cisco Systems</organization>
      <address>
        <email>mkonstan@cisco.com</email>
      </address>
    </author>
    <author initials="V." surname="Polak" fullname="Vratko Polak" role="editor">
      <organization>Cisco Systems</organization>
      <address>
        <email>vrpolak@cisco.com</email>
      </address>
    </author>

    <date year="2021" month="July" day="09"/>

    <area>ops</area>
    <workgroup>Benchmarking Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes changes to <xref target="RFC2544"></xref>, specifically to packet
throughput search methodology, by defining a new search algorithm
referred to as Multiple Loss Ratio search (MLRsearch for short). Instead
of relying on binary search with pre-set starting offered load, it
proposes a novel approach discovering the starting point in the initial
phase, and then searching for packet throughput based on defined packet
loss ratio (PLR) input criteria and defined final trial duration time.
One of the key design principles behind MLRsearch is minimizing the
total test duration and searching for multiple packet throughput rates
(each with a corresponding PLR) concurrently, instead of doing it
sequentially.</t>

<t>The main motivation behind MLRsearch is the new set of challenges and
requirements posed by NFV (Network Function Virtualization),
specifically software based implementations of NFV data planes. Using
<xref target="RFC2544"></xref> in the experience of the authors yields often not repetitive
and not replicable end results due to a large number of factors that are
out of scope for this draft. MLRsearch aims to address this challenge
in a simple way of getting the same result sooner, so more repetitions
can be done to describe the replicability.</t>



    </abstract>


  </front>

  <middle>


<section anchor="terminology" title="Terminology">

<t><list style="symbols">
  <t>Frame size: size of an Ethernet Layer-2 frame on the wire, including
any VLAN tags (dot1q, dot1ad) and Ethernet FCS, but excluding Ethernet
preamble and inter-frame gap. Measured in bytes (octets).</t>
  <t>Packet size: same as frame size, both terms used interchangeably.</t>
  <t>Device Under Test (DUT): In software networking, &quot;device&quot; denotes a
specific piece of software tasked with packet processing. Such device
is surrounded with other software components (such as operating system
kernel). It is not possible to run devices without also running the
other components, and hardware resources are shared between both. For
purposes of testing, the whole set of hardware and software components
is called &quot;system under test&quot; (SUT). As SUT is the part of the whole
test setup performance of which can be measured by <xref target="RFC2544"></xref> methods,
this document uses SUT instead of <xref target="RFC2544"></xref> DUT. Device under test
(DUT) can be re-introduced when analysing test results using whitebox
techniques, but this document sticks to blackbox testing.</t>
  <t>System Under Test (SUT): System under test (SUT) is a part of the
whole test setup whose performance is to be benchmarked. The complete
test setup contains other parts, whose performance is either already
established, or not affecting the benchmarking result.</t>
  <t>Bi-directional throughput tests: involve packets/frames flowing in
both transmit and receive directions over every tested interface of
SUT/DUT. Packet flow metrics are measured per direction, and can be
reported as aggregate for both directions and/or separately
for each measured direction. In most cases bi-directional tests
use the same (symmetric) load in both directions.</t>
  <t>Uni-directional throughput tests: involve packets/frames flowing in
only one direction, i.e. either transmit or receive direction, over
every tested interface of SUT/DUT. Packet flow metrics are measured
and are reported for measured direction.</t>
  <t>Packet Loss Ratio (PLR): ratio of packets received relative to packets
transmitted over the test trial duration, calculated using formula:
PLR = ( pkts_transmitted - pkts_received ) / pkts_transmitted.
For bi-directional throughput tests aggregate PLR is calculated based
on the aggregate number of packets transmitted and received.</t>
  <t>Effective loss ratio: A corrected value of measured packet loss ratio
chosen to avoid difficulties if SUT exhibits decreasing loss
with increasing load. Maximum of packet loss ratios measured at the same
duration on all loads smaller than (and including) the current one.</t>
  <t>Target loss ratio: A packet loss ratio value acting as an imput for search.
The search is finding tight enough lower and upper bound in intended load,
so that the lower bound has smaller or equal loss ratio, and upper bound
has strictly larger loss ratio. For the tighterst upper bound,
the effective loss ratio is the same as packet loss ratio.
For the tightest lower bound, the effective loss ratio can be higher
than the packet loss ratio, but still not larger than the target loss ratio.</t>
  <t>Packet Throughput Rate: maximum packet offered load DUT/SUT forwards
within the specified Packet Loss Ratio (PLR). In many cases the rate
depends on the frame size processed by DUT/SUT. Hence packet
throughput rate MUST be quoted with specific frame size as received by
DUT/SUT during the measurement. For bi-directional tests, packet
throughput rate should be reported as aggregate for both directions.
Measured in packets-per-second (pps) or frames-per-second (fps),
equivalent metrics.</t>
  <t>Bandwidth Throughput Rate: a secondary metric calculated from packet
throughput rate using formula: bw_rate = pkt_rate * (frame_size +
L1_overhead) * 8, where L1_overhead for Ethernet includes preamble (8
octets) and inter-frame gap (12 octets). For bi-directional tests,
bandwidth throughput rate should be reported as aggregate for both
directions. Expressed in bits-per-second (bps).</t>
  <t>Non Drop Rate (NDR): maximum packet/bandwith throughput rate sustained
by DUT/SUT at PLR equal zero (zero packet loss) specific to tested
frame size(s). MUST be quoted with specific packet size as received by
DUT/SUT during the measurement. Packet NDR measured in
packets-per-second (or fps), bandwidth NDR expressed in
bits-per-second (bps).</t>
  <t>Partial Drop Rate (PDR): maximum packet/bandwith throughput rate
sustained by DUT/SUT at PLR greater than zero (non-zero packet loss)
specific to tested frame size(s). MUST be quoted with specific packet
size as received by DUT/SUT during the measurement. Packet PDR
measured in packets-per-second (or fps), bandwidth PDR expressed in
bits-per-second (bps).</t>
  <t>Maximum Receive Rate (MRR): packet/bandwidth rate regardless of PLR
sustained by DUT/SUT under specified Maximum Transmit Rate (MTR)
packet load offered by traffic generator. MUST be quoted with both
specific packet size and MTR as received by DUT/SUT during the
measurement. Packet MRR measured in packets-per-second (or fps),
bandwidth MRR expressed in bits-per-second (bps).</t>
  <t>Trial: a single measurement step. See <xref target="RFC2544"></xref> section 23.</t>
  <t>Trial duration: amount of time over which packets are transmitted
in a single measurement step.</t>
</list></t>

</section>
<section anchor="mlrsearch-background" title="MLRsearch Background">

<t>Multiple Loss Ratio search (MLRsearch) is a packet throughput search
algorithm suitable for deterministic systems (as opposed to
probabilistic systems). MLRsearch discovers multiple packet throughput
rates in a single search, each rate is associated with a distinct
Packet Loss Ratio (PLR) criterion.</t>

<t>For cases when multiple rates need to be found, this property makes
MLRsearch more efficient in terms of time execution, compared to
traditional throughput search algorithms that discover a single packet
rate per defined search criteria (e.g. a binary search specified by
<xref target="RFC2544"></xref>). MLRsearch reduces execution time even further by relying on
shorter trial durations of intermediate steps, with only the final
measurements conducted at the specified final trial duration. This
results in the shorter overall search execution time when compared to a
traditional binary search, while guaranteeing the same results for
deterministic systems.</t>

<t>In practice two rates with distinct PLRs are commonly used for packet
throughput measurements of NFV systems: Non Drop Rate (NDR) with PLR=0
and Partial Drop Rate (PDR) with PLR&gt;0. The rest of this document
describes MLRsearch with NDR and PDR pair as an example.</t>

<t>Similarly to other throughput search approaches like binary search,
MLRsearch is effective for SUTs/DUTs with PLR curve that is
non-decreasing with growing offered load. It may not be as
effective for SUTs/DUTs with abnormal PLR curves, although
it will always converge to some value.</t>

<t>MLRsearch relies on traffic generator to qualify the received packet
stream as error-free, and invalidate the results if any disqualifying
errors are present e.g. out-of-sequence frames.</t>

<t>MLRsearch can be applied to both uni-directional and bi-directional
throughput tests.</t>

<t>For bi-directional tests, MLRsearch rates and ratios are aggregates of
both directions, based on the following assumptions:</t>

<t><list style="symbols">
  <t>Traffic transmitted by traffic generator and received by SUT/DUT
has the same packet rate in each direction,
in other words the offered load is symmetric.</t>
  <t>SUT/DUT packet processing capacity is the same in both directions,
resulting in the same packet loss under load.</t>
</list></t>

<t>MLRsearch can be applied even without those assumptions,
but in that case the aggregate loss ratio is less useful as a metric.</t>

<t>MLRsearch can be used for network transactions consisting of more than
just one packet, or anything else that has intended load as input
and loss ratio as output (duration as input is optional).
This text uses mostly packet-centric language.</t>

</section>
<section anchor="mlrsearch-overview" title="MLRsearch Overview">

<t>The main properties of MLRsearch:</t>

<t><list style="symbols">
  <t>MLRsearch is a duration aware multi-phase multi-rate search algorithm:
  <list style="symbols">
      <t>Initial Phase determines promising starting interval for the search.</t>
      <t>Intermediate Phases progress towards defined final search criteria.</t>
      <t>Final Phase executes measurements according to the final search
criteria.</t>
      <t>Final search criteria are defined by following inputs:
      <list style="symbols">
          <t>Target PLRs (e.g. 0.0 and 0.005 when searching for NDR and PDR).</t>
          <t>Final trial duration.</t>
          <t>Measurement resolution.</t>
        </list></t>
    </list></t>
  <t>Initial Phase:
  <list style="symbols">
      <t>Measure MRR over initial trial duration.</t>
      <t>Measured MRR is used as an input to the first intermediate phase.</t>
    </list></t>
  <t>Multiple Intermediate Phases:
  <list style="symbols">
      <t>Trial duration:
      <list style="symbols">
          <t>Start with initial trial duration in the first intermediate phase.</t>
          <t>Converge geometrically towards the final trial duration.</t>
        </list></t>
      <t>Track all previous trial measurement results:
      <list style="symbols">
          <t>Duration, offered load and loss ratio are tracked.</t>
          <t>Effective loss ratios are tracked.
          <list style="symbols">
              <t>While in practice, real loss ratios can decrease with increasing load,
effective loss ratios never decrease. This is achieved by sorting
results by load, and using the effective loss ratio of the previous load
if the current loss ratio is smaller than that.</t>
            </list></t>
          <t>The algorithm queries the results to find best lower and upper bounds.
          <list style="symbols">
              <t>Effective loss ratios are always used.</t>
            </list></t>
          <t>The phase ends if all target loss ratios have tight enough bounds.</t>
        </list></t>
      <t>Search:
      <list style="symbols">
          <t>Iterate over target loss ratios in increasing order.</t>
          <t>If both upper and lower bound are in measurement results for this duration,
apply bisect until the bounds are tight enough,
and continue with next loss ratio.</t>
          <t>If a bound is missing for this duration, but there exists a bound
from the previous duration (compatible with the other bound
at this duration), re-measure at the current duration.</t>
          <t>If a bound in one direction (upper or lower) is missing for this duration,
and the previous duration does not have a compatible bound,
compute the current &quot;interval size&quot; from the second tightest bound
in the other direction (lower or upper respectively)
for the current duration, and choose next offered load for external search.</t>
          <t>The logic guarantees that a measurement is never repeated with both
duration and offered load being the same.</t>
          <t>The logic guarantees that measurements for higher target loss ratio
iterations (still within the same phase duration) do not affect validity
and tightness of bounds for previous target loss ratio iterations
(at the same duration).</t>
        </list></t>
      <t>Use of internal and external searches:
      <list style="symbols">
          <t>External search:
          <list style="symbols">
              <t>It is a variant of &quot;exponential search&quot;.</t>
              <t>The &quot;interval size&quot; is multiplied by a configurable constant
(powers of two work well with the subsequent internal search).</t>
            </list></t>
          <t>Internal search:
          <list style="symbols">
              <t>A variant of binary search that measures at offered load between
the previously found bounds.</t>
              <t>The interval does not need to be split into exact halves,
if other split can get to the target width goal faster.
              <list style="symbols">
                  <t>The idea is to avoid returning interval narrower than the current
width goal. See sample implementation details, below.</t>
                </list></t>
            </list></t>
        </list></t>
    </list></t>
  <t>Final Phase:
  <list style="symbols">
      <t>Executed with the final test trial duration, and the final width
goal that determines resolution of the overall search.</t>
    </list></t>
  <t>Intermediate Phases together with the Final Phase are called
Non-Initial Phases.</t>
  <t>The returned bounds stay within prescribed min_rate and max_rate.
  <list style="symbols">
      <t>When returning min_rate or max_rate, the returned bounds may be invalid.
      <list style="symbols">
          <t>E.g. upper bound at max_rate may come from a measurement
with loss ratio still not higher than the target loss ratio.</t>
        </list></t>
    </list></t>
</list></t>

<t>The main benefits of MLRsearch vs. binary search include:</t>

<t><list style="symbols">
  <t>In general MLRsearch is likely to execute more trials overall, but
likely less trials at a set final trial duration.</t>
  <t>In well behaving cases, e.g. when results do not depend on trial
duration, it greatly reduces (&gt;50%) the overall duration compared to a
single PDR (or NDR) binary search over duration, while finding
multiple drop rates.</t>
  <t>In all cases MLRsearch yields the same or similar results to binary
search.</t>
  <t>Note: both binary search and MLRsearch are susceptible to reporting
non-repeatable results across multiple runs for very bad behaving
cases.</t>
</list></t>

<t>Caveats:</t>

<t><list style="symbols">
  <t>Worst case MLRsearch can take longer than a binary search, e.g. in case of
drastic changes in behaviour for trials at varying durations.
  <list style="symbols">
      <t>Re-measurement at higher duration can trigger a long external search.
That never happens in binary search, which uses the final duration
from the start.</t>
    </list></t>
</list></t>

</section>
<section anchor="sample-implementation" title="Sample Implementation">

<t>Following is a brief description of a sample MLRsearch implementation,
which is a simplified version of the existing implementation.</t>

<section anchor="input-parameters" title="Input Parameters">

<t><list style="numbers">
  <t><spanx style="strong">max_rate</spanx> - Maximum Transmit Rate (MTR) of packets to
be used by external traffic generator implementing MLRsearch,
limited by the actual Ethernet link(s) rate, NIC model or traffic
generator capabilities.</t>
  <t><spanx style="strong">min_rate</spanx> - minimum packet transmit rate to be used for
measurements. MLRsearch fails if lower transmit rate needs to be
used to meet search criteria.</t>
  <t><spanx style="strong">final_trial_duration</spanx> - required trial duration for final rate
measurements.</t>
  <t><spanx style="strong">initial_trial_duration</spanx> - trial duration for initial MLRsearch phase.</t>
  <t><spanx style="strong">final_relative_width</spanx> - required measurement resolution expressed as
(lower_bound, upper_bound) interval width relative to upper_bound.</t>
  <t><spanx style="strong">packet_loss_ratios</spanx> - list of maximum acceptable PLR search criteria.</t>
  <t><spanx style="strong">number_of_intermediate_phases</spanx> - number of phases between the initial
phase and the final phase. Impacts the overall MLRsearch duration.
Less phases are required for well behaving cases, more phases
may be needed to reduce the overall search duration for worse behaving cases.</t>
</list></t>

</section>
<section anchor="initial-phase" title="Initial Phase">

<t><list style="numbers">
  <t>First trial measures at configured maximum transmit rate (MTR) and
discovers maximum receive rate (MRR).
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = maximum_transmit_rate.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR = measured receive rate.
Received rate is computed as intended load multiplied by pass ratio
(which is one minus loss ratio). This is useful when loss ratio is computed
from a different metric than intended load. For example, intended load
can be in transactions (multiple packets each), but loss ratio is computed
on level of packets, not transactions.
If MRR is too close to MTR, MRR is set below MTR so that interval width
is equal to the width goal of the first intermediate phase.
If MRR is less than min_rate, min_rate is used.</t>
    </list></t>
  <t>Second trial measures at MRR and discovers MRR2.
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = MRR.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR2 = measured receive rate.
If MRR2 is less than min_rate, min_rate is used.
If loss ratio is less or equal to the smallest target loss ratio,
MRR2 is set to a value above MRR, so that interval width is equal
to the width goal of the first intermediate phase.
MRR2 could end up being equal to MTR (for example if both measurements so far
had zero loss), which was already measured, step 3 is skipped in that case.</t>
    </list></t>
  <t>Third trial measures at MRR2.
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = MRR2.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR3 = measured receive rate.
If MRR3 is less than min_rate, min_rate is used.
If step 3 is not skipped, the first trial measurement is forgotten.
This is done because in practice (if MRR2 is above MRR), external search
from MRR and MRR2 is likely to lead to a faster intermediate phase
than a bisect between MRR2 and MTR.</t>
    </list></t>
</list></t>

</section>
<section anchor="non-initial-phases" title="Non-Initial Phases">

<t><list style="numbers">
  <t>Main phase loop:
  <list style="numbers">
      <t>IN: trial_duration for the current phase. Set to
initial_trial_duration for the first intermediate phase; to
final_trial_duration for the final phase; or to the element of
interpolating geometric sequence for other intermediate phases.
For example with two intermediate phases, trial_duration of the
second intermediate phase is the geometric average of
initial_trial_duration and final_trial_duration.</t>
      <t>IN: relative_width_goal for the current phase. Set to
final_relative_width for the final phase; doubled for each
preceding phase. For example with two intermediate phases, the
first intermediate phase uses quadruple of final_relative_width
and the second intermediate phase uses double of
final_relative_width.</t>
      <t>IN: Measurement results from the previous phase (previous duration).</t>
      <t>Internal target ratio loop:
      <list style="numbers">
          <t>IN: Target loss ratio for this iteration of ratio loop.</t>
          <t>IN: Measurement results from all previous ratio loop iterations
of current phase (current duration).</t>
          <t>DO: According to the procedure described in point 2:
          <list style="numbers">
              <t>either exit the phase (by jumping to 1.5),</t>
              <t>or exit loop iteration (by continuing with next target loss ratio,
jumping to 1.4.1),</t>
              <t>or calculate new transmit rate to measure with.</t>
            </list></t>
          <t>DO: Perform the trial measurement at the new transmit rate and
current trial duration, compute its loss ratio.</t>
          <t>DO: Add the result and go to next iteration (1.4.1),
including the added trial result in 1.4.2.</t>
        </list></t>
      <t>OUT: Measurement results from this phase.</t>
      <t>OUT: In the final phase, bounds for each target loss ratio
are extracted and returned.
      <list style="numbers">
          <t>If a valid bound does not exist, use min_rate or max_rate.</t>
        </list></t>
    </list></t>
  <t>New transmit rate (or exit) calculation (for point 1.4.3):
  <list style="numbers">
      <t>If the previous duration has the best upper and lower bound,
select the middle point as the new transmit rate.
      <list style="numbers">
          <t>See 2.5.3. below for the exact splitting logic.</t>
          <t>This can be a no-op if interval is narrow enough already,
in that case continue with 2.2.</t>
          <t>Discussion, assuming the middle point is selected and measured:
          <list style="numbers">
              <t>Regardless of loss rate measured, the result becomes
either best upper or best lower bound at current duration.</t>
              <t>So this condition is satisfied at most once per iteration.</t>
              <t>This also explains why previous phase has double width goal:
              <list style="numbers">
                  <t>We avoid one more bisection at previous phase.</t>
                  <t>At most one bound (per iteration) is re-measured
with current duration.</t>
                  <t>Each re-measurement can trigger an external search.</t>
                  <t>Such surprising external searches are the main hurdle
in achieving low overal search durations.</t>
                  <t>Even without 1.1, there is at most one external search
per phase and target loss ratio.</t>
                  <t>But without 1.1 there can be two re-measurements,
each coming with a risk of triggering external search.</t>
                </list></t>
            </list></t>
        </list></t>
      <t>If the previous duration has one bound best, select its transmit rate.
In deterministic case this is the last measurement needed this iteration.</t>
      <t>If only upper bound exists in current duration results:
      <list style="numbers">
          <t>This can only happen for the smallest target loss ratio.</t>
          <t>If the upper bound was measured at min_rate,
exit the whole phase early (not investigating other target loss ratios).</t>
          <t>Select new transmit rate using external search:
          <list style="numbers">
              <t>For computing previous interval size, use:
              <list style="numbers">
                  <t>second tightest bound at current duration,</t>
                  <t>or tightest bound of previous duration,
if compatible and giving a more narrow interval,</t>
                  <t>or target interval width if none of the above is available.</t>
                  <t>In any case increase to target interval width if smaller.</t>
                </list></t>
              <t>Quadruple the interval width.</t>
              <t>Use min_rate if the new transmit rate is lower.</t>
            </list></t>
        </list></t>
      <t>If only lower bound exists in current duration results:
      <list style="numbers">
          <t>If the lower bound was measured at max_rate,
exit this iteration (continue with next lowest target loss ratio).</t>
          <t>Select new transmit rate using external search:
          <list style="numbers">
              <t>For computing previous interval size, use:
              <list style="numbers">
                  <t>second tightest bound at current duration,</t>
                  <t>or tightest bound of previous duration,
if compatible and giving a more narrow interval,</t>
                  <t>or target interval width if none of the above is available.</t>
                  <t>In any case increase to target interval width if smaller.</t>
                </list></t>
              <t>Quadruple the interval width.</t>
              <t>Use max_rate if the new transmit rate is higher.</t>
            </list></t>
        </list></t>
      <t>The only remaining option is both bounds in current duration results.
      <list style="numbers">
          <t>This can happen in two ways, depending on how the lower bound
was chosen.
          <list style="numbers">
              <t>It could have been selected for the current loss ratio,
e.g. in re-measurement (2.2) or in initial bisect (2.1).</t>
              <t>It could have been found as an upper bound for the previous smaller
target loss ratio, in which case it might be too low.</t>
              <t>The algorithm does not track which one is the case,
as the decision logic works well regardless.</t>
            </list></t>
          <t>Compute &quot;extending down&quot; candidate transmit rate exactly as in 2.3.</t>
          <t>Compute &quot;bisecting&quot; candidate transmit rate:
          <list style="numbers">
              <t>Compute the current interval width from the two bounds.</t>
              <t>Express the width as a (float) multiple of the target width goal
for this phase.</t>
              <t>If the multiple is not higher than one, it means the width goal
is met. Exit this iteration and continue with next higher
target loss ratio.</t>
              <t>If the multiple is two or less, use half of that
for new width if the lower subinterval.</t>
              <t>Round the multiple up to nearest even integer.</t>
              <t>Use half of that for new width if the lower subinterval.</t>
              <t>Example: If lower bound is 2.0 and upper bound is 5.0, and width
goal is 1.0, the new candidate transmit rate will be 4.0.
This can save a measurement when 4.0 has small loss.
Selecting the average (3.5) would never save a measurement,
giving more narrow bounds instead.</t>
            </list></t>
          <t>If either candidate computation want to exit the iteration,
do as bisecting candidate computation says.</t>
          <t>The remaining case is both candidates wanting to measure at some rate.
Use the higher rate. This prefers external search down narrow enough
interval, competing with perfectly sized lower bisect subinterval.</t>
        </list></t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="fdio-csit-implementation" title="FD.io CSIT Implementation">

<t>The only known working implementation of MLRsearch is in
the open-source code running in Linux Foundation
FD.io CSIT project <xref target="FDio-CSIT-MLRsearch"></xref> as part of
a Continuous Integration / Continuous Development (CI/CD) framework.</t>

<t>MLRsearch is also available as a Python package in <xref target="PyPI-MLRsearch"></xref>.</t>

<section anchor="additional-details" title="Additional details">

<t>This document so far has been describing a simplified version of
MLRsearch algorithm. The full algorithm as implemented in CSIT contains
additional logic, which makes some of the details (but not general
ideas) above incorrect. Here is a short description of the additional
logic as a list of principles, explaining their main differences from
(or additions to) the simplified description, but without detailing
their mutual interaction.</t>

<t><list style="numbers">
  <t>Logarithmic transmit rate.
  <list style="symbols">
      <t>In order to better fit the relative width goal, the interval
doubling and halving is done differently.</t>
      <t>For example, the middle of 2 and 8 is 4, not 5.</t>
    </list></t>
  <t>Timeout for bad cases.
  <list style="symbols">
      <t>The worst case for MLRsearch is when each phase converges to
intervals way different than the results of the previous phase.</t>
      <t>Rather than suffer total search time several times larger than pure
binary search, the implemented tests fail themselves when the
search takes too long (given by argument <spanx style="emph">timeout</spanx>).</t>
    </list></t>
  <t>Intended count.
  <list style="symbols">
      <t>The number of packets to send during the trial should be
just duration times intended load.
      <list style="symbols">
          <t>Times a coefficient, if loss is calculated from a different metric.</t>
        </list></t>
      <t>But in practice that does not work.
      <list style="symbols">
          <t>It could result in a fractional number of packets,</t>
          <t>so it has to be rounded in a way Traffic generator choses,</t>
          <t>which may depend on the number of traffic flows
and traffic generator worker threads.</t>
        </list></t>
    </list></t>
  <t>Attempted count. As the real number of intended packets is not known exactly,
most of the time the computation uses the number of packets traffic
generator reports as sent.</t>
  <t>Duration stretching.
  <list style="symbols">
      <t>In some cases, traffic generator may get overloaded,
causing it to take significantly longer (than duration) to send all packets.</t>
      <t>The implementation uses an explicit stop,
      <list style="symbols">
          <t>causing lower attempted count in those cases.</t>
        </list></t>
      <t>The implementation tolerates some small difference between
attempted count and intended count.
      <list style="symbols">
          <t>10 microseconds worth of traffic is sufficient for our tests.</t>
        </list></t>
      <t>If the difference is higher, the unsent packets are counted as lost.
      <list style="symbols">
          <t>This forces the search to avoid the regios of high duration stretching.</t>
          <t>The final bounds describe the performance of not just SUT,
but of the whole system, including the traffic generator.</t>
        </list></t>
    </list></t>
  <t>For result processing, we use lower bounds and ignore upper bounds.</t>
</list></t>

<section anchor="fdio-csit-input-parameters" title="FD.io CSIT Input Parameters">

<t><list style="numbers">
  <t><spanx style="strong">max_rate</spanx> - Typical values: 2 * 14.88 Mpps for 64B
10GE link rate, 2 * 18.75 Mpps for 64B 40GE NIC (specific model).</t>
  <t><spanx style="strong">min_rate</spanx> - Value: 2 * 9001 pps (we reserve 9000 pps
for latency measurements).</t>
  <t><spanx style="strong">final_trial_duration</spanx> - Value: 30.0 seconds.</t>
  <t><spanx style="strong">initial_trial_duration</spanx> - Value: 1.0 second.</t>
  <t><spanx style="strong">final_relative_width</spanx> - Value: 0.005 (0.5%).</t>
  <t><spanx style="strong">packet_loss_ratios</spanx> - Value: [0.0, 0.005] (0.0% for NDR, 0.5% for PDR).</t>
  <t><spanx style="strong">number_of_intermediate_phases</spanx> - Value: 2.
The value has been chosen based on limited experimentation to date.
More experimentation needed to arrive to clearer guidelines.</t>
  <t><spanx style="strong">timeout</spanx> - Limit for the overall search duration (for one search).
If MLRsearch oversteps this limit, it immediatelly declares the test failed,
to avoid wasting even more time on a misbehaving SUT.
Value: 600.0 (seconds).</t>
  <t><spanx style="strong">expansion_coefficient</spanx> - Width multiplier for external search.
Value: 4.0 (interval width is quadroupled).
Value of 2.0 is best for well-behaved SUTs, but value of 4.0 has been found
to decrease overall search time for worse-behaved SUT configurations,
contributing more to the overall set of different SUT configurations tested.</t>
</list></t>

</section>
</section>
<section anchor="example-mlrsearch-run" title="Example MLRsearch Run">

<t>The following paragraph describes a search from a real test run in CSIT
(using the default input values as above).</t>

<t>Initial phase, trial duration 1.0 second.
Measurement 1, intended load 18750000.0 pps (MTR),
measured loss ratio 0.7119081057477241 (valid upper bound for both NDR and PDR).
Measurement 2, intended load 5401723.017230173 pps (MRR),
measured loss ratio 0.010390901229743172 (new tightest upper bound).
Measurement 3, intended load 5294496.330163686 pps (less than MRR2
in preparation for first intermediate phase target interval width),
measured loss ratio 0.007513876977877202 (new tightest upper bound).
First intermetiate phase, trial duration still 1.0 seconds.
No lower bound, performing external search downwards (for NDR).
Measurement 4, intended load 4886456.624565395 pps,
measured loss ratio 0.0 (valid lower bound for both NDR and PDR).
Measurement 5, intended load 5086386.405520674 pps (bisecting for NDR),
measured loss ratio 0.0 (new tightest lower bound).
Measurement 6, intended load 5189398.246215419 pps (bisecting),
measured loss ratio 3.266290551864358e-05 (upper bound for NDR, lower for PDR).
Both intervals are narrow enough.
Second intermetiate phase, trial duration 5.477225575051661 seconds.
Measurement 7, intended load 5137634.153224899 pps (initial bisect for NDR),
measured loss ratio 0.0 (tightest lower bound for NDR, PDR bounds unaffected).
Measurement 8, intended load 5189398.246215419 pps (re-measuring NDR upper bound,
also acts as re-measurement of lower PDR bound),
measured loss ratio 4.837549970571864e-05 (still valid in both bound roles).
NDR interval is narrow enough, PDR interval not yet.
Measurement 9, intended load 5294496.330163686 pps (re-measuring PDR upper bound,
initial bisect may be more effective, but the current implementation
does not detect this specific case),
measured loss ratio 0.008363321451307953 (still valid upper PDR bound).
Measurement 10, intended load 5241683.886915101 pps (bisecting for PDR),
measured loss ratio 0.0039100678984514015 (new tightest PDR lower bound,
NDR bounds are now distinct).
Also PDR interval is narrow enough now.
Final phase, trial duration 30.0 seconds.
Measurement 11, intended load 5163451.332630311 pps (initial bisect for NDR),
measured loss ratio 0.0 (new tightest NDR lower bound).
Measurement 12, intended load 5189398.246215419 pps (re-measuring NDR upped bound),
measured loss ratio 0.00013782910428206878 (still valid NDR upper bound).
NDR interval is narrow enough.
Measurement 13, intended load 5268023.927731358 pps (initial bisect for PDR),
measured loss ratio 0.0062636747811010765 (new tightest PDR upper bound).
Measurement 14, intended load 5241683.886915101 pps (re-measuring PDR lower bound),
measured loss ratio 0.003923765160377893 (still valid PDR lower bound).
PDR interval is also narrow enough.
Returning bounds:
NDR_LOWER = 5163451.332630311 pps; NDR_UPPER = 5189398.246215419 pps;
PDR_LOWER = 5241683.886915101 pps; PDR_UPPER = 5268023.927731358 pps.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>No requests of IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Benchmarking activities as described in this memo are limited to
technology characterization of a DUT/SUT using controlled stimuli in a
laboratory environment, with dedicated address space and the constraints
specified in the sections above.</t>

<t>The benchmarking network topology will be an independent test setup and
MUST NOT be connected to devices that may forward the test traffic into
a production network or misroute traffic to the test management network.</t>

<t>Further, benchmarking is performed on a &quot;black-box&quot; basis, relying
solely on measurements observable external to the DUT/SUT.</t>

<t>Special capabilities SHOULD NOT exist in the DUT/SUT specifically for
benchmarking purposes.  Any implications for network security arising
from the DUT/SUT SHOULD be identical in the lab and in production
networks.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Many thanks to Alec Hothan of OPNFV NFVbench project for thorough
review and numerous useful comments and suggestions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2544;
&RFC8174;


    </references>

    <references title='Informative References'>

<reference anchor="FDio-CSIT-MLRsearch" target="https://docs.fd.io/csit/rls2101/report/introduction/methodology_data_plane_throughput/methodology_mlrsearch_tests.html">
  <front>
    <title>FD.io CSIT Test Methodology - MLRsearch</title>
    <author >
      <organization></organization>
    </author>
    <date year="2021" month="February"/>
  </front>
</reference>
<reference anchor="PyPI-MLRsearch" target="https://pypi.org/project/MLRsearch/0.4.0/">
  <front>
    <title>MLRsearch 0.4.0, Python Package Index</title>
    <author >
      <organization></organization>
    </author>
    <date year="2021" month="April"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAAdb7GAAA+1dW3PbRpZ+x69AeWqqKC9F86J7Klvr2PGOa23Ha9nJw9SU
CiSbFEYgwACgZOXX7/nOOX0DQcVJzT7tqiqORKK7T5/7rRvHx8dJm7eFuUrf
74o23xYmfVc1Tfopa/MqvTZZvbhNV1WdfswWd6ZNP9/W1W59u9216eD9u08N
P3CU/CXN5vPa3NM09sNkWS3KbEMzL+ts1R7npl0dzzcP6+NNUcsjx+NJssxa
emQ6nk6Ox+fH48skybf1VdrWu6adjseX42mS1Sa7Sqttkzysr9IfTLm43WT1
XV6u018q+f9/ElTb5O7hKn1btqYuTXv8Gqsmi6y9SvNyVSXJolrSo1fprjnO
mkWeJ9v8KqWfv6SLrKRPTZrVdfaYDvJVmhVF+miao5R2fps1t+mtqQ3tMj1O
22ohvzRV3dZm1ehfjxv+I8UDVxhMv9pHrniZpVllhOSGnrDfyyB5PMl27W1V
XyUp/xzr/1MCn554P0r/qyqbNivbx7J6yBe/ue8Fy++zRW7uDj5U1bT1V3mz
IKo+Nq3ZNO6rugL9zTJvq9p9aDZZXlylmzuZ7z8WGDpaVJt+8H4epR+rIrvr
APVznbV3VeerPwnKfb3FNAEkSVnVG2LUewOkfXrzanp6cqK/XkzO6dcEpA+e
efM6r45fXb/9fOz4VPDdZvXaEKvctu22uXrxgpi3Ga2Wo7x6sWjy9kVdNNPJ
ePKiNlui6Yu8bOtquVuQkJQvNobotqyKav14Q+yc3WyLrDQ3rROV6AnH/Tet
adpmdNtuCgFB5PDZm9e0agog08/0RPreDyY+c3A/40Gh+Ezpk4+PH9/+3t62
j9t8RER4sa2rf5pF+8I9/2I8OhmNX0TguC9T/nJISxA8JSuEbG1I4Jbm6z4w
J0lyfHxMaqFp62zRJsnn27xJCa27jSnblJbeVo1p0sVtVq4Ny8TflYL/GKbN
1izyVb4gOXzEV1vWPolHaaowBZgdpvNHyFheQiNkaWke7FNZsa7qvL3dJCRu
pq7NEpNmTa/S0zFevbH+a0g026MRbZc4Nlsm1SqtTfGIpQgZ87zM6kc79IGW
oh2a44Y0JklP3fJjK1qaVi6qbDlM8zZxOCBYq3tTpNmWPspogiVY/N7UGNbe
Gj/HtiLOI4njT2mjbZ4VyZY0lBmmWbnEx6VCgccBuKAuDVA3p8eXgJqRRb8q
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
MchRl/SbqS08b1fqbfHWhA19ZQibQDPcPj8HPVyWoxUhMO6P5IMh90F+QJsX
0h/A0AvDBrtyo1Bjr+jpcqf8WMLaxXUfBTizNS60FTY2S96BRrs2kPw2X3Mu
irrqFX449x5xltMdA47zWm7v0eylUS8rnCFr4yWPIGbHiisbkVrW7OrlcBtl
XFVPB0KMqhZaHD290QCB/dtZVkZ6lpilsjTYnSvHsWGrUIA0EdjPnFlGiu6Z
x5pmxlwFLkSM6l7BWLAt4SzagOwPzZoiOMXjkaWKGv8u2rQJ47aCj8icEalP
bqv4ioMBzhiHAldUazjfNhy3bYkRX+dWpaFRMOsmLLn7OWxUjZafRxH+768c
eRyAXUqS+6JrEcryzc7pQIqSYZGQfW/xsCwnEs2DFp2Uwzhy7UNWAeFKTQ6r
bHLqwFmyLiwBFDrPIKif+7VFQX1pjEvr2OitQyHjjOKP8RdXTrVKv11GGyC7
KqnSZ+ardLDl7vlnXhcD512ezV1GUdJZLALlKl8TxBCChZ6ocFZlsAWjSoLu
oUo5QngwinXZ8W6ujcN+h5pDdQJeHtjTy3A3cdItZI4GGqTDZdwL6MAMpb14
lFzknnH6zH3kig+nCYIUZkNo4V1USLssoCUKZCNCG6tdk/wkHAcwhnp3yiaS
SF9X8N+zprX2JYBhaTLtWJM+j9q0u7qMPH9CRc0qwtXZVQ24udJgIcm1N5wp
6jRGI9TI8gJhuyGlA08z8PzFsfxR3P+lJ6o6en0NPVa5yiMMA8PEG5b8qw9u
vJttnZc4tSjO935A01aESQ7lLURhuMKZPu7WpJU/VOVx5L9zHVoScECrsYyA
+OrRagskZjgPt0Q7vpSQsbNN9pX/EMn9BUGHp457Eg1W+uBQnaV4KaS/5sZm
jZzfirAm7EwBi+s8PGSBjBbblUghJ5be7W2ohHxPhtWZT/Rk+IB3bkoKx9o4
3E3vm1FHArUczoHw21LzNUUcEyPHKAlJDSE1RwCeaSyt2f+gPejDnJzQJ9j0
oEu3P7LghVndzA1ZbEnNNMgPcoT4IOTR/ntR89LrIdk/HBhJA9YlkeVyavHo
EvaDfz8d//Uo4kxn2+IUd2qLCUjQDiT8POqgjJ1Ov56kvrVTCZU6G+ItkTrm
1JvuEetKlcWjV88iOKuCZihJAYe+uQAA6JxAfajQbsGubAxeFh3d4NbqXbMw
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

-->

</rfc>

