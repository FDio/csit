<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.19 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2544 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2544.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-bmwg-mlrsearch-01" category="info">

  <front>
    <title>Multiple Loss Ratio Search for Packet Throughput (MLRsearch)</title>

    <author initials="M." surname="Konstantynowicz" fullname="Maciek Konstantynowicz" role="editor">
      <organization>Cisco Systems</organization>
      <address>
        <email>mkonstan@cisco.com</email>
      </address>
    </author>
    <author initials="V." surname="Polak" fullname="Vratko Polak" role="editor">
      <organization>Cisco Systems</organization>
      <address>
        <email>vrpolak@cisco.com</email>
      </address>
    </author>

    <date year="2021" month="July" day="12"/>

    <area>ops</area>
    <workgroup>Benchmarking Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes changes to <xref target="RFC2544"></xref>, specifically to packet
throughput search methodology, by defining a new search algorithm
referred to as Multiple Loss Ratio search (MLRsearch for short). Instead
of relying on binary search with pre-set starting offered load, it
proposes a novel approach discovering the starting point in the initial
phase, and then searching for packet throughput based on defined packet
loss ratio (PLR) input criteria and defined final trial duration time.
One of the key design principles behind MLRsearch is minimizing the
total test duration and searching for multiple packet throughput rates
(each with a corresponding PLR) concurrently, instead of doing it
sequentially.</t>

<t>The main motivation behind MLRsearch is the new set of challenges and
requirements posed by NFV (Network Function Virtualization),
specifically software based implementations of NFV data planes. Using
<xref target="RFC2544"></xref> in the experience of the authors yields often not repetitive
and not replicable end results due to a large number of factors that are
out of scope for this draft. MLRsearch aims to address this challenge
in a simple way of getting the same result sooner, so more repetitions
can be done to describe the replicability.</t>



    </abstract>


  </front>

  <middle>


<section anchor="terminology" title="Terminology">

<t><list style="symbols">
  <t>Frame size: size of an Ethernet Layer-2 frame on the wire, including
any VLAN tags (dot1q, dot1ad) and Ethernet FCS, but excluding Ethernet
preamble and inter-frame gap. Measured in bytes (octets).</t>
  <t>Packet size: same as frame size, both terms used interchangeably.</t>
  <t>Device Under Test (DUT): In software networking, &quot;device&quot; denotes a
specific piece of software tasked with packet processing. Such device
is surrounded with other software components (such as operating system
kernel). It is not possible to run devices without also running the
other components, and hardware resources are shared between both. For
purposes of testing, the whole set of hardware and software components
is called &quot;system under test&quot; (SUT). As SUT is the part of the whole
test setup performance of which can be measured by <xref target="RFC2544"></xref> methods,
this document uses SUT instead of <xref target="RFC2544"></xref> DUT. Device under test
(DUT) can be re-introduced when analysing test results using whitebox
techniques, but this document sticks to blackbox testing.</t>
  <t>System Under Test (SUT): System under test (SUT) is a part of the
whole test setup whose performance is to be benchmarked. The complete
test setup contains other parts, whose performance is either already
established, or not affecting the benchmarking result.</t>
  <t>Bi-directional throughput tests: involve packets/frames flowing in
both transmit and receive directions over every tested interface of
SUT/DUT. Packet flow metrics are measured per direction, and can be
reported as aggregate for both directions and/or separately
for each measured direction. In most cases bi-directional tests
use the same (symmetric) load in both directions.</t>
  <t>Uni-directional throughput tests: involve packets/frames flowing in
only one direction, i.e. either transmit or receive direction, over
every tested interface of SUT/DUT. Packet flow metrics are measured
and are reported for measured direction.</t>
  <t>Packet Loss Ratio (PLR): ratio of packets received relative to packets
transmitted over the test trial duration, calculated using formula:
PLR = ( pkts_transmitted - pkts_received ) / pkts_transmitted.
For bi-directional throughput tests aggregate PLR is calculated based
on the aggregate number of packets transmitted and received.</t>
  <t>Effective loss ratio: A corrected value of measured packet loss ratio
chosen to avoid difficulties if SUT exhibits decreasing loss
with increasing load. Maximum of packet loss ratios measured at the same
duration on all loads smaller than (and including) the current one.</t>
  <t>Target loss ratio: A packet loss ratio value acting as an imput for search.
The search is finding tight enough lower and upper bound in intended load,
so that the lower bound has smaller or equal loss ratio, and upper bound
has strictly larger loss ratio. For the tighterst upper bound,
the effective loss ratio is the same as packet loss ratio.
For the tightest lower bound, the effective loss ratio can be higher
than the packet loss ratio, but still not larger than the target loss ratio.</t>
  <t>Packet Throughput Rate: maximum packet offered load DUT/SUT forwards
within the specified Packet Loss Ratio (PLR). In many cases the rate
depends on the frame size processed by DUT/SUT. Hence packet
throughput rate MUST be quoted with specific frame size as received by
DUT/SUT during the measurement. For bi-directional tests, packet
throughput rate should be reported as aggregate for both directions.
Measured in packets-per-second (pps) or frames-per-second (fps),
equivalent metrics.</t>
  <t>Bandwidth Throughput Rate: a secondary metric calculated from packet
throughput rate using formula: bw_rate = pkt_rate * (frame_size +
L1_overhead) * 8, where L1_overhead for Ethernet includes preamble (8
octets) and inter-frame gap (12 octets). For bi-directional tests,
bandwidth throughput rate should be reported as aggregate for both
directions. Expressed in bits-per-second (bps).</t>
  <t>Non Drop Rate (NDR): maximum packet/bandwith throughput rate sustained
by DUT/SUT at PLR equal zero (zero packet loss) specific to tested
frame size(s). MUST be quoted with specific packet size as received by
DUT/SUT during the measurement. Packet NDR measured in
packets-per-second (or fps), bandwidth NDR expressed in
bits-per-second (bps).</t>
  <t>Partial Drop Rate (PDR): maximum packet/bandwith throughput rate
sustained by DUT/SUT at PLR greater than zero (non-zero packet loss)
specific to tested frame size(s). MUST be quoted with specific packet
size as received by DUT/SUT during the measurement. Packet PDR
measured in packets-per-second (or fps), bandwidth PDR expressed in
bits-per-second (bps).</t>
  <t>Maximum Receive Rate (MRR): packet/bandwidth rate regardless of PLR
sustained by DUT/SUT under specified Maximum Transmit Rate (MTR)
packet load offered by traffic generator. MUST be quoted with both
specific packet size and MTR as received by DUT/SUT during the
measurement. Packet MRR measured in packets-per-second (or fps),
bandwidth MRR expressed in bits-per-second (bps).</t>
  <t>Trial: a single measurement step. See <xref target="RFC2544"></xref> section 23.</t>
  <t>Trial duration: amount of time over which packets are transmitted
in a single measurement step.</t>
</list></t>

</section>
<section anchor="mlrsearch-background" title="MLRsearch Background">

<t>Multiple Loss Ratio search (MLRsearch) is a packet throughput search
algorithm suitable for deterministic systems (as opposed to
probabilistic systems). MLRsearch discovers multiple packet throughput
rates in a single search, each rate is associated with a distinct
Packet Loss Ratio (PLR) criterion.</t>

<t>For cases when multiple rates need to be found, this property makes
MLRsearch more efficient in terms of time execution, compared to
traditional throughput search algorithms that discover a single packet
rate per defined search criteria (e.g. a binary search specified by
<xref target="RFC2544"></xref>). MLRsearch reduces execution time even further by relying on
shorter trial durations of intermediate steps, with only the final
measurements conducted at the specified final trial duration. This
results in the shorter overall search execution time when compared to a
traditional binary search, while guaranteeing the same results for
deterministic systems.</t>

<t>In practice two rates with distinct PLRs are commonly used for packet
throughput measurements of NFV systems: Non Drop Rate (NDR) with PLR=0
and Partial Drop Rate (PDR) with PLR&gt;0. The rest of this document
describes MLRsearch with NDR and PDR pair as an example.</t>

<t>Similarly to other throughput search approaches like binary search,
MLRsearch is effective for SUTs/DUTs with PLR curve that is
non-decreasing with growing offered load. It may not be as
effective for SUTs/DUTs with abnormal PLR curves, although
it will always converge to some value.</t>

<t>MLRsearch relies on traffic generator to qualify the received packet
stream as error-free, and invalidate the results if any disqualifying
errors are present e.g. out-of-sequence frames.</t>

<t>MLRsearch can be applied to both uni-directional and bi-directional
throughput tests.</t>

<t>For bi-directional tests, MLRsearch rates and ratios are aggregates of
both directions, based on the following assumptions:</t>

<t><list style="symbols">
  <t>Traffic transmitted by traffic generator and received by SUT/DUT
has the same packet rate in each direction,
in other words the offered load is symmetric.</t>
  <t>SUT/DUT packet processing capacity is the same in both directions,
resulting in the same packet loss under load.</t>
</list></t>

<t>MLRsearch can be applied even without those assumptions,
but in that case the aggregate loss ratio is less useful as a metric.</t>

<t>MLRsearch can be used for network transactions consisting of more than
just one packet, or anything else that has intended load as input
and loss ratio as output (duration as input is optional).
This text uses mostly packet-centric language.</t>

</section>
<section anchor="mlrsearch-overview" title="MLRsearch Overview">

<t>The main properties of MLRsearch:</t>

<t><list style="symbols">
  <t>MLRsearch is a duration aware multi-phase multi-rate search algorithm:
  <list style="symbols">
      <t>Initial Phase determines promising starting interval for the search.</t>
      <t>Intermediate Phases progress towards defined final search criteria.</t>
      <t>Final Phase executes measurements according to the final search
criteria.</t>
      <t>Final search criteria are defined by following inputs:
      <list style="symbols">
          <t>Target PLRs (e.g. 0.0 and 0.005 when searching for NDR and PDR).</t>
          <t>Final trial duration.</t>
          <t>Measurement resolution.</t>
        </list></t>
    </list></t>
  <t>Initial Phase:
  <list style="symbols">
      <t>Measure MRR over initial trial duration.</t>
      <t>Measured MRR is used as an input to the first intermediate phase.</t>
    </list></t>
  <t>Multiple Intermediate Phases:
  <list style="symbols">
      <t>Trial duration:
      <list style="symbols">
          <t>Start with initial trial duration in the first intermediate phase.</t>
          <t>Converge geometrically towards the final trial duration.</t>
        </list></t>
      <t>Track all previous trial measurement results:
      <list style="symbols">
          <t>Duration, offered load and loss ratio are tracked.</t>
          <t>Effective loss ratios are tracked.
          <list style="symbols">
              <t>While in practice, real loss ratios can decrease with increasing load,
effective loss ratios never decrease. This is achieved by sorting
results by load, and using the effective loss ratio of the previous load
if the current loss ratio is smaller than that.</t>
            </list></t>
          <t>The algorithm queries the results to find best lower and upper bounds.
          <list style="symbols">
              <t>Effective loss ratios are always used.</t>
            </list></t>
          <t>The phase ends if all target loss ratios have tight enough bounds.</t>
        </list></t>
      <t>Search:
      <list style="symbols">
          <t>Iterate over target loss ratios in increasing order.</t>
          <t>If both upper and lower bound are in measurement results for this duration,
apply bisect until the bounds are tight enough,
and continue with next loss ratio.</t>
          <t>If a bound is missing for this duration, but there exists a bound
from the previous duration (compatible with the other bound
at this duration), re-measure at the current duration.</t>
          <t>If a bound in one direction (upper or lower) is missing for this duration,
and the previous duration does not have a compatible bound,
compute the current &quot;interval size&quot; from the second tightest bound
in the other direction (lower or upper respectively)
for the current duration, and choose next offered load for external search.</t>
          <t>The logic guarantees that a measurement is never repeated with both
duration and offered load being the same.</t>
          <t>The logic guarantees that measurements for higher target loss ratio
iterations (still within the same phase duration) do not affect validity
and tightness of bounds for previous target loss ratio iterations
(at the same duration).</t>
        </list></t>
      <t>Use of internal and external searches:
      <list style="symbols">
          <t>External search:
          <list style="symbols">
              <t>It is a variant of &quot;exponential search&quot;.</t>
              <t>The &quot;interval size&quot; is multiplied by a configurable constant
(powers of two work well with the subsequent internal search).</t>
            </list></t>
          <t>Internal search:
          <list style="symbols">
              <t>A variant of binary search that measures at offered load between
the previously found bounds.</t>
              <t>The interval does not need to be split into exact halves,
if other split can get to the target width goal faster.
              <list style="symbols">
                  <t>The idea is to avoid returning interval narrower than the current
width goal. See sample implementation details, below.</t>
                </list></t>
            </list></t>
        </list></t>
    </list></t>
  <t>Final Phase:
  <list style="symbols">
      <t>Executed with the final test trial duration, and the final width
goal that determines resolution of the overall search.</t>
    </list></t>
  <t>Intermediate Phases together with the Final Phase are called
Non-Initial Phases.</t>
  <t>The returned bounds stay within prescribed min_rate and max_rate.
  <list style="symbols">
      <t>When returning min_rate or max_rate, the returned bounds may be invalid.
      <list style="symbols">
          <t>E.g. upper bound at max_rate may come from a measurement
with loss ratio still not higher than the target loss ratio.</t>
        </list></t>
    </list></t>
</list></t>

<t>The main benefits of MLRsearch vs. binary search include:</t>

<t><list style="symbols">
  <t>In general MLRsearch is likely to execute more trials overall, but
likely less trials at a set final trial duration.</t>
  <t>In well behaving cases, e.g. when results do not depend on trial
duration, it greatly reduces (&gt;50%) the overall duration compared to a
single PDR (or NDR) binary search over duration, while finding
multiple drop rates.</t>
  <t>In all cases MLRsearch yields the same or similar results to binary
search.</t>
  <t>Note: both binary search and MLRsearch are susceptible to reporting
non-repeatable results across multiple runs for very bad behaving
cases.</t>
</list></t>

<t>Caveats:</t>

<t><list style="symbols">
  <t>Worst case MLRsearch can take longer than a binary search, e.g. in case of
drastic changes in behaviour for trials at varying durations.
  <list style="symbols">
      <t>Re-measurement at higher duration can trigger a long external search.
That never happens in binary search, which uses the final duration
from the start.</t>
    </list></t>
</list></t>

</section>
<section anchor="sample-implementation" title="Sample Implementation">

<t>Following is a brief description of a sample MLRsearch implementation,
which is a simplified version of the existing implementation.</t>

<section anchor="input-parameters" title="Input Parameters">

<t><list style="numbers">
  <t><spanx style="strong">max_rate</spanx> - Maximum Transmit Rate (MTR) of packets to
be used by external traffic generator implementing MLRsearch,
limited by the actual Ethernet link(s) rate, NIC model or traffic
generator capabilities.</t>
  <t><spanx style="strong">min_rate</spanx> - minimum packet transmit rate to be used for
measurements. MLRsearch fails if lower transmit rate needs to be
used to meet search criteria.</t>
  <t><spanx style="strong">final_trial_duration</spanx> - required trial duration for final rate
measurements.</t>
  <t><spanx style="strong">initial_trial_duration</spanx> - trial duration for initial MLRsearch phase.</t>
  <t><spanx style="strong">final_relative_width</spanx> - required measurement resolution expressed as
(lower_bound, upper_bound) interval width relative to upper_bound.</t>
  <t><spanx style="strong">packet_loss_ratios</spanx> - list of maximum acceptable PLR search criteria.</t>
  <t><spanx style="strong">number_of_intermediate_phases</spanx> - number of phases between the initial
phase and the final phase. Impacts the overall MLRsearch duration.
Less phases are required for well behaving cases, more phases
may be needed to reduce the overall search duration for worse behaving cases.</t>
</list></t>

</section>
<section anchor="initial-phase" title="Initial Phase">

<t><list style="numbers">
  <t>First trial measures at configured maximum transmit rate (MTR) and
discovers maximum receive rate (MRR).
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = maximum_transmit_rate.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR = measured receive rate.
Received rate is computed as intended load multiplied by pass ratio
(which is one minus loss ratio). This is useful when loss ratio is computed
from a different metric than intended load. For example, intended load
can be in transactions (multiple packets each), but loss ratio is computed
on level of packets, not transactions.</t>
      <t>Example: If MTR is 10 transactions per second, and each transaction has
10 packets, and receive rate is 90 packets per second, then loss rate
is 10%, and MRR is computed to be 9 transactions per second.</t>
    </list>
If MRR is too close to MTR, MRR is set below MTR so that interval width
is equal to the width goal of the first intermediate phase.
If MRR is less than min_rate, min_rate is used.</t>
  <t>Second trial measures at MRR and discovers MRR2.
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = MRR.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR2 = measured receive rate.
If MRR2 is less than min_rate, min_rate is used.
If loss ratio is less or equal to the smallest target loss ratio,
MRR2 is set to a value above MRR, so that interval width is equal
to the width goal of the first intermediate phase.
MRR2 could end up being equal to MTR (for example if both measurements so far
had zero loss), which was already measured, step 3 is skipped in that case.</t>
    </list></t>
  <t>Third trial measures at MRR2.
  <list style="symbols">
      <t>IN: trial_duration = initial_trial_duration.</t>
      <t>IN: offered_transmit_rate = MRR2.</t>
      <t>DO: single trial.</t>
      <t>OUT: measured loss ratio.</t>
      <t>OUT: MRR3 = measured receive rate.
If MRR3 is less than min_rate, min_rate is used.
If step 3 is not skipped, the first trial measurement is forgotten.
This is done because in practice (if MRR2 is above MRR), external search
from MRR and MRR2 is likely to lead to a faster intermediate phase
than a bisect between MRR2 and MTR.</t>
    </list></t>
</list></t>

</section>
<section anchor="non-initial-phases" title="Non-Initial Phases">

<t><list style="numbers">
  <t>Main phase loop:
  <list style="numbers">
      <t>IN: trial_duration for the current phase. Set to
initial_trial_duration for the first intermediate phase; to
final_trial_duration for the final phase; or to the element of
interpolating geometric sequence for other intermediate phases.
For example with two intermediate phases, trial_duration of the
second intermediate phase is the geometric average of
initial_trial_duration and final_trial_duration.</t>
      <t>IN: relative_width_goal for the current phase. Set to
final_relative_width for the final phase; doubled for each
preceding phase. For example with two intermediate phases, the
first intermediate phase uses quadruple of final_relative_width
and the second intermediate phase uses double of
final_relative_width.</t>
      <t>IN: Measurement results from the previous phase (previous duration).</t>
      <t>Internal target ratio loop:
      <list style="numbers">
          <t>IN: Target loss ratio for this iteration of ratio loop.</t>
          <t>IN: Measurement results from all previous ratio loop iterations
of current phase (current duration).</t>
          <t>DO: According to the procedure described in point 2:
          <list style="numbers">
              <t>either exit the phase (by jumping to 1.5),</t>
              <t>or exit loop iteration (by continuing with next target loss ratio,
jumping to 1.4.1),</t>
              <t>or calculate new transmit rate to measure with.</t>
            </list></t>
          <t>DO: Perform the trial measurement at the new transmit rate and
current trial duration, compute its loss ratio.</t>
          <t>DO: Add the result and go to next iteration (1.4.1),
including the added trial result in 1.4.2.</t>
        </list></t>
      <t>OUT: Measurement results from this phase.</t>
      <t>OUT: In the final phase, bounds for each target loss ratio
are extracted and returned.
      <list style="numbers">
          <t>If a valid bound does not exist, use min_rate or max_rate.</t>
        </list></t>
    </list></t>
  <t>New transmit rate (or exit) calculation (for point 1.4.3):
  <list style="numbers">
      <t>If the previous duration has the best upper and lower bound,
select the middle point as the new transmit rate.
      <list style="numbers">
          <t>See 2.5.3. below for the exact splitting logic.</t>
          <t>This can be a no-op if interval is narrow enough already,
in that case continue with 2.2.</t>
          <t>Discussion, assuming the middle point is selected and measured:
          <list style="numbers">
              <t>Regardless of loss rate measured, the result becomes
either best upper or best lower bound at current duration.</t>
              <t>So this condition is satisfied at most once per iteration.</t>
              <t>This also explains why previous phase has double width goal:
              <list style="numbers">
                  <t>We avoid one more bisection at previous phase.</t>
                  <t>At most one bound (per iteration) is re-measured
with current duration.</t>
                  <t>Each re-measurement can trigger an external search.</t>
                  <t>Such surprising external searches are the main hurdle
in achieving low overal search durations.</t>
                  <t>Even without 1.1, there is at most one external search
per phase and target loss ratio.</t>
                  <t>But without 1.1 there can be two re-measurements,
each coming with a risk of triggering external search.</t>
                </list></t>
            </list></t>
        </list></t>
      <t>If the previous duration has one bound best, select its transmit rate.
In deterministic case this is the last measurement needed this iteration.</t>
      <t>If only upper bound exists in current duration results:
      <list style="numbers">
          <t>This can only happen for the smallest target loss ratio.</t>
          <t>If the upper bound was measured at min_rate,
exit the whole phase early (not investigating other target loss ratios).</t>
          <t>Select new transmit rate using external search:
          <list style="numbers">
              <t>For computing previous interval size, use:
              <list style="numbers">
                  <t>second tightest bound at current duration,</t>
                  <t>or tightest bound of previous duration,
if compatible and giving a more narrow interval,</t>
                  <t>or target interval width if none of the above is available.</t>
                  <t>In any case increase to target interval width if smaller.</t>
                </list></t>
              <t>Quadruple the interval width.</t>
              <t>Use min_rate if the new transmit rate is lower.</t>
            </list></t>
        </list></t>
      <t>If only lower bound exists in current duration results:
      <list style="numbers">
          <t>If the lower bound was measured at max_rate,
exit this iteration (continue with next lowest target loss ratio).</t>
          <t>Select new transmit rate using external search:
          <list style="numbers">
              <t>For computing previous interval size, use:
              <list style="numbers">
                  <t>second tightest bound at current duration,</t>
                  <t>or tightest bound of previous duration,
if compatible and giving a more narrow interval,</t>
                  <t>or target interval width if none of the above is available.</t>
                  <t>In any case increase to target interval width if smaller.</t>
                </list></t>
              <t>Quadruple the interval width.</t>
              <t>Use max_rate if the new transmit rate is higher.</t>
            </list></t>
        </list></t>
      <t>The only remaining option is both bounds in current duration results.
      <list style="numbers">
          <t>This can happen in two ways, depending on how the lower bound
was chosen.
          <list style="numbers">
              <t>It could have been selected for the current loss ratio,
e.g. in re-measurement (2.2) or in initial bisect (2.1).</t>
              <t>It could have been found as an upper bound for the previous smaller
target loss ratio, in which case it might be too low.</t>
              <t>The algorithm does not track which one is the case,
as the decision logic works well regardless.</t>
            </list></t>
          <t>Compute &quot;extending down&quot; candidate transmit rate exactly as in 2.3.</t>
          <t>Compute &quot;bisecting&quot; candidate transmit rate:
          <list style="numbers">
              <t>Compute the current interval width from the two bounds.</t>
              <t>Express the width as a (float) multiple of the target width goal
for this phase.</t>
              <t>If the multiple is not higher than one, it means the width goal
is met. Exit this iteration and continue with next higher
target loss ratio.</t>
              <t>If the multiple is two or less, use half of that
for new width if the lower subinterval.</t>
              <t>Round the multiple up to nearest even integer.</t>
              <t>Use half of that for new width if the lower subinterval.</t>
              <t>Example: If lower bound is 2.0 and upper bound is 5.0, and width
goal is 1.0, the new candidate transmit rate will be 4.0.
This can save a measurement when 4.0 has small loss.
Selecting the average (3.5) would never save a measurement,
giving more narrow bounds instead.</t>
            </list></t>
          <t>If either candidate computation want to exit the iteration,
do as bisecting candidate computation says.</t>
          <t>The remaining case is both candidates wanting to measure at some rate.
Use the higher rate. This prefers external search down narrow enough
interval, competing with perfectly sized lower bisect subinterval.</t>
        </list></t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="fdio-csit-implementation" title="FD.io CSIT Implementation">

<t>The only known working implementation of MLRsearch is in
the open-source code running in Linux Foundation
FD.io CSIT project <xref target="FDio-CSIT-MLRsearch"></xref> as part of
a Continuous Integration / Continuous Development (CI/CD) framework.</t>

<t>MLRsearch is also available as a Python package in <xref target="PyPI-MLRsearch"></xref>.</t>

<section anchor="additional-details" title="Additional details">

<t>This document so far has been describing a simplified version of
MLRsearch algorithm. The full algorithm as implemented in CSIT contains
additional logic, which makes some of the details (but not general
ideas) above incorrect. Here is a short description of the additional
logic as a list of principles, explaining their main differences from
(or additions to) the simplified description, but without detailing
their mutual interaction.</t>

<t><list style="numbers">
  <t>Logarithmic transmit rate.
  <list style="symbols">
      <t>In order to better fit the relative width goal, the interval
doubling and halving is done differently.</t>
      <t>For example, the middle of 2 and 8 is 4, not 5.</t>
    </list></t>
  <t>Timeout for bad cases.
  <list style="symbols">
      <t>The worst case for MLRsearch is when each phase converges to
intervals way different than the results of the previous phase.</t>
      <t>Rather than suffer total search time several times larger than pure
binary search, the implemented tests fail themselves when the
search takes too long (given by argument <spanx style="emph">timeout</spanx>).</t>
    </list></t>
  <t>Intended count.
  <list style="symbols">
      <t>The number of packets to send during the trial should be equal to
the intended load multiplied by the duration.
      <list style="symbols">
          <t>Also multiplied by a coefficient, if loss ratio is calculated
from a different metric.
          <list style="symbols">
              <t>Example: If a successful transaction uses 10 packets,
load is given in transactions per second, byt loss ratio is calculated
from packets, the coefficient to get intended count of packets is 10.</t>
            </list></t>
        </list></t>
      <t>But in practice that does not work.
      <list style="symbols">
          <t>It could result in a fractional number of packets,</t>
          <t>so it has to be rounded in a way traffic generator chooses,</t>
          <t>which may depend on the number of traffic flows
and traffic generator worker threads.</t>
        </list></t>
    </list></t>
  <t>Attempted count. As the real number of intended packets is not known exactly,
the computation uses the number of packets traffic generator reports as sent.
Unless overriden by the next point.</t>
  <t>Duration stretching.
  <list style="symbols">
      <t>In some cases, traffic generator may get overloaded,
causing it to take significantly longer (than duration) to send all packets.</t>
      <t>The implementation uses an explicit stop,
      <list style="symbols">
          <t>causing lower attempted count in those cases.</t>
        </list></t>
      <t>The implementation tolerates some small difference between
attempted count and intended count.
      <list style="symbols">
          <t>10 microseconds worth of traffic is sufficient for our tests.</t>
        </list></t>
      <t>If the difference is higher, the unsent packets are counted as lost.
      <list style="symbols">
          <t>This forces the search to avoid the regions of high duration stretching.</t>
          <t>The final bounds describe the performance of not just SUT,
but of the whole system, including the traffic generator.</t>
        </list></t>
    </list></t>
  <t>Excess packets.
  <list style="symbols">
      <t>In some test (e.g. using TCP flows) Traffic generator reacts to packet loss
by retransmission. Usually, such packet loss is already affecting loss ratio.
If a test also wants to treat retransmissions due to heavily delayed packets
also as a failure, this is once again visible as a mismatch between
the intended count and the attempted count.</t>
      <t>The CSIT implementation simply looks at absolute value of the difference,
so it offes the same small tolerance before it start marking a &quot;loss&quot;.</t>
    </list></t>
  <t>For result processing, we use lower bounds and ignore upper bounds.</t>
</list></t>

<section anchor="fdio-csit-input-parameters" title="FD.io CSIT Input Parameters">

<t><list style="numbers">
  <t><spanx style="strong">max_rate</spanx> - Typical values: 2 * 14.88 Mpps for 64B
10GE link rate, 2 * 18.75 Mpps for 64B 40GE NIC (specific model).</t>
  <t><spanx style="strong">min_rate</spanx> - Value: 2 * 9001 pps (we reserve 9000 pps
for latency measurements).</t>
  <t><spanx style="strong">final_trial_duration</spanx> - Value: 30.0 seconds.</t>
  <t><spanx style="strong">initial_trial_duration</spanx> - Value: 1.0 second.</t>
  <t><spanx style="strong">final_relative_width</spanx> - Value: 0.005 (0.5%).</t>
  <t><spanx style="strong">packet_loss_ratios</spanx> - Value: 0.0, 0.005 (0.0% for NDR, 0.5% for PDR).</t>
  <t><spanx style="strong">number_of_intermediate_phases</spanx> - Value: 2.
The value has been chosen based on limited experimentation to date.
More experimentation needed to arrive to clearer guidelines.</t>
  <t><spanx style="strong">timeout</spanx> - Limit for the overall search duration (for one search).
If MLRsearch oversteps this limit, it immediatelly declares the test failed,
to avoid wasting even more time on a misbehaving SUT.
Value: 600.0 (seconds).</t>
  <t><spanx style="strong">expansion_coefficient</spanx> - Width multiplier for external search.
Value: 4.0 (interval width is quadroupled).
Value of 2.0 is best for well-behaved SUTs, but value of 4.0 has been found
to decrease overall search time for worse-behaved SUT configurations,
contributing more to the overall set of different SUT configurations tested.</t>
</list></t>

</section>
</section>
<section anchor="example-mlrsearch-run" title="Example MLRsearch Run">

<t>The following list describes a search from a real test run in CSIT
(using the default input values as above).</t>

<t><list style="symbols">
  <t>Initial phase, trial duration 1.0 second.</t>
  <t>Measurement 1, intended load 18750000.0 pps (MTR),
measured loss ratio 0.7089514628479618 (valid upper bound for both NDR and PDR).</t>
  <t>Measurement 2, intended load 5457160.071600716 pps (MRR),
measured loss ratio 0.018650817320118702 (new tightest upper bounds).</t>
  <t>Measurement 3, intended load 5348832.933500009 pps (slightly less than MRR2
in preparation for first intermediate phase target interval width),
measured loss ratio 0.00964383362905351 (new tightest upper bounds).</t>
  <t>First intermediate phase starts, trial duration still 1.0 seconds.</t>
  <t>Measurement 4, intended load 4936605.579021453 pps (no lower bound,
performing external search downwards, for NDR),
measured loss ratio 0.0 (valid lower bound for both NDR and PDR).</t>
  <t>Measurement 5, intended load 5138587.208637197 pps (bisecting for NDR),
measured loss ratio 0.0 (new tightest lower bounds).</t>
  <t>Measurement 6, intended load 5242656.244044665 pps (bisecting),
measured loss ratio 0.013523745379347257 (new tightest upper bounds).</t>
  <t>Both intervals are narrow enough.</t>
  <t>Second intermediate phase starts, trial duration 5.477225575051661 seconds.</t>
  <t>Measurement 7, intended load 5190360.904111567 pps (initial bisect for NDR),
measured loss ratio 0.0023533920869969953 (NDR upper bound, PDR lower bound).</t>
  <t>Measurement 8, intended load 5138587.208637197 pps (re-measuring NDR lower bound),
measured loss ratio 1.2080222912800403e-06 (new tightest NDR upper bound).</t>
  <t>The two intervals have separate bounds from now on.</t>
  <t>Measurement 9, intended load 4936605.381062318 pps (external NDR search down),
measured loss ratio 0.0 (new valid NDR lower bound).</t>
  <t>Measurement 10, intended load 5036583.888432355 pps (NDR bisect),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>
  <t>Measurement 11, intended load 5087329.903232804 pps (NDR bisect),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>
  <t>NDR interval is narrow enough, PDR interval not ready yet.</t>
  <t>Measurement 12, intended load 5242656.244044665 pps (re-measuring PDR upper bound),
measured loss ratio 0.0101174866190136 (still valid PDR upper bound).</t>
  <t>Also PDR interval is narrow enough, with valid bounds for this duration.</t>
  <t>Final phase starts, trial duration 30.0 seconds.</t>
  <t>Measurement 13, intended load 5112894.3238511775 pps (initial bisect for NDR),
measured loss ratio 0.0 (new tightest NDR lower bound).</t>
  <t>Measurement 14, intended load 5138587.208637197 (re-measuring NDR upper bound),
measured loss ratio 2.030389804256833e-06 (still valid PDR upper bound).</t>
  <t>NDR interval is narrow enough, PDR interval not yet.</t>
  <t>Measurement 15, intended load 5216443.04126728 pps (initial bisect for PDR),
measured loss ratio 0.005620871287975237 (new tightest PDR upper bound).</t>
  <t>Measurement 16, intended load 5190360.904111567 (re-measuring PDR lower bound),
measured loss ratio 0.0027629971184465604 (still valid PDR lower bound).</t>
  <t>PDR interval is also narrow enough.</t>
  <t>Returning bounds:</t>
  <t>NDR_LOWER = 5112894.3238511775 pps; NDR_UPPER = 5138587.208637197 pps;</t>
  <t>PDR_LOWER = 5190360.904111567 pps; PDR_UPPER = 5216443.04126728 pps.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>No requests of IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Benchmarking activities as described in this memo are limited to
technology characterization of a DUT/SUT using controlled stimuli in a
laboratory environment, with dedicated address space and the constraints
specified in the sections above.</t>

<t>The benchmarking network topology will be an independent test setup and
MUST NOT be connected to devices that may forward the test traffic into
a production network or misroute traffic to the test management network.</t>

<t>Further, benchmarking is performed on a &quot;black-box&quot; basis, relying
solely on measurements observable external to the DUT/SUT.</t>

<t>Special capabilities SHOULD NOT exist in the DUT/SUT specifically for
benchmarking purposes.Any implications for network security arising
from the DUT/SUT SHOULD be identical in the lab and in production
networks.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Many thanks to Alec Hothan of OPNFV NFVbench project for thorough
review and numerous useful comments and suggestions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2544;


    </references>

    <references title='Informative References'>

<reference anchor="FDio-CSIT-MLRsearch" target="https://docs.fd.io/csit/rls2101/report/introduction/methodology_data_plane_throughput/methodology_mlrsearch_tests.html">
  <front>
    <title>FD.io CSIT Test Methodology - MLRsearch</title>
    <author >
      <organization></organization>
    </author>
    <date year="2021" month="February"/>
  </front>
</reference>
<reference anchor="PyPI-MLRsearch" target="https://pypi.org/project/MLRsearch/0.4.0/">
  <front>
    <title>MLRsearch 0.4.0, Python Package Index</title>
    <author >
      <organization></organization>
    </author>
    <date year="2021" month="April"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIANt97GAAA+19WY/bSJbuO38F4UYDSl+lrCWVW6EH1+Vl2hjb5fFS9dBo
JCgppGQnRapIKtOqX3/Pd86JYARJpe1Cz9PcRJWdlhgRJ86+RfD09DSq0zoz
1/G7fVanu8zEb4uqij8mdVrEn0xSLm/jdVHGH5Llnanjz7dlsd/c7vZ1PHj3
9mPFD5xEf4mTxaI09zSN/TBaFcs82dLMqzJZ16epqdeni+3D5nSblfLI6XgS
rZKaHpmOp5PT8cXpZBpF6a68jutyX9XT8fhqPI2S0iTXcbGroofNdfyzyZe3
26S8S/NN/Fshf/8nQbWL7h6u4zd5bcrc1KcvsWq0TOrrOM3XRRQtixU9eh3v
q9OkWqZptEuvY/r5S7xMcvrUxElZJod4kK7jJMvig6lOYtr5bVLdxremNLTL
+DSui6X8UhVlXZp1pf86bPkfMR64xmD61T5yzcuszDohJFf0hP1eBsnjUbKv
b4vyOor551T/jgl8euLdKP6vIq/qJK8PefGQLv9w3wuW3yXL1Nwdfagoaesv
0mpJVD1UtdlW7quyAP3NKq2L0n1otkmaXcfbO5nv/y4xdLQstv3g/TqKPxRZ
ctcC6tcyqe+K1ld/EpT7codpPEiivCi3xKj3Bkj7+PrFdH52dk0cRPT2vnj9
Mi1OX3x68/nUMacguU7KjSH+uK3rXXX97BlxbDVar0Zp8WxZpfWzMqumk/Hk
WWl2RMhnaV6XxWq/JMnIn20NEWtVZMXmcEM8nNzssiQ3N7WTj+AJx/I3tanq
anRbbzMBQYTvyeuXtGoMIOPP9ET8rhlMzOXgfsKDfJmZ0icfDh/efGtvu8Mu
HRHmn+3K4l9mWT9zzz8bj85G42cBOO7LmL8c0hIET85aINkYkrKV+doF5iyK
Tk9PSRdUdZks6yj6fJtWMaF1vzV5HdPSu6IyVby8TfKNYUH4h5Ltn8O42pll
uk6XJHwHfLVjlRM1KI0VJg+zw3hxgGClOdRAEufmwT6VZJuiTOvbbUQyZsrS
rDBpUvVqOh3T6DRWehXJY30you0SmyarqFjHpckOWIqQsUjzpDzYoQ+0FO3Q
nFakJklkypofW9PStHJWJKthnNaRwwHBWtybLE529FFCE6zA1/emxLD61jRz
7AriPBIz/pQ2WqdJFu1ILZlhnOQrfJwrFHgcgAvqYg91C3p8BagZWfSrYjcD
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

-->

</rfc>

