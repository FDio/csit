<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.37 (Ruby 3.1.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

<!ENTITY RFC1242 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1242.xml">
<!ENTITY RFC2285 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2285.xml">
<!ENTITY RFC2544 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2544.xml">
<!ENTITY RFC9004 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9004.xml">
]>


<rfc ipr="trust200902" docName="draft-ietf-bmwg-mlrsearch-04" category="info" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="MLRsearch">Multiple Loss Ratio Search</title>

    <author initials="M." surname="Konstantynowicz" fullname="Maciek Konstantynowicz">
      <organization>Cisco Systems</organization>
      <address>
        <email>mkonstan@cisco.com</email>
      </address>
    </author>
    <author initials="V." surname="Polak" fullname="Vratko Polak">
      <organization>Cisco Systems</organization>
      <address>
        <email>vrpolak@cisco.com</email>
      </address>
    </author>

    <date year="2023" month="July" day="10"/>

    <area>ops</area>
    <workgroup>Benchmarking Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 50?>

<t>This document proposes improvements to <xref target="RFC2544"></xref> throughput search by
defining a new methodology called Multiple Loss Ratio search
(MLRsearch). The main objectives for MLRsearch are to minimize the
total test duration, search for multiple loss ratios and improve
results repeatibility and comparability.</t>

<t>The main motivation behind MLRsearch is the new set of challenges and
requirements posed by testing Network Function Virtualization
(NFV) systems and other software based network data planes.</t>

<t>MLRsearch offers several ways to address these challenges, giving user
configuration options to select their preferred way.</t>



    </abstract>



  </front>

  <middle>


<?line 65?>


<section anchor="purpose-and-scope"><name>Purpose and Scope</name>

<t>The purpose of this document is to describe Multiple Loss Ratio search
(MLRsearch), a throughput search methodology optimized for software
DUTs.</t>

<t>Applying vanilla <xref target="RFC2544"></xref> throughput bisection to software DUTs
results in a number of problems:</t>

<t><list style="symbols">
  <t>Binary search takes too long as most of trials are done far from the
eventually found throughput.</t>
  <t>The required final trial duration (and pauses between trials) also
prolong the overall search duration.</t>
  <t>Software DUTs show noisy trial results (noisy neighbor problem),
leading to big spread of possible discovered throughput values.</t>
  <t>Throughput requires loss of exactly zero packets, but the industry
frequently allows for small but non-zero losses.</t>
  <t>The definition of throughput is not clear when trial results are
inconsistent.</t>
</list></t>

<t>MLRsearch aims to address these problems by applying the following set
of enhancements:</t>

<t><list style="symbols">
  <t>Allow searching for multiple search goals, with differing goal loss ratios.
  <list style="symbols">
      <t>Each trial result can affect any search goal in principle
(trial reuse).</t>
    </list></t>
  <t>Multiple preceding targets for each search goal, earlier ones need
to spend less time on trials.
  <list style="symbols">
      <t>Earlier targets also aim at lesser precision.</t>
      <t>Use Forwarding Rate (FR) at maximum offered load
<xref target="RFC2285"></xref> (section 3.6.2) to initialize the initial targets.</t>
    </list></t>
  <t>Take care when dealing with inconsistent trial results.
  <list style="symbols">
      <t>Loss ratios goals are handled in an order that minimizes the chance
of interference from later trials to earlier goals.</t>
    </list></t>
  <t>Apply several load selection heuristics to save even more time
by trying hard to avoid unnecessarily narrow bounds.</t>
</list></t>

<t>MLRsearch configuration options are flexible enough to
support both conservative settings (unconditionally compliant with <xref target="RFC2544"></xref>,
but longer search duration and worse repeatability) and aggressive
settings (shorter search duration and better repeatability but not
compliant with <xref target="RFC2544"></xref>).</t>

<t>No part of <xref target="RFC2544"></xref> is intended to be obsoleted by this document.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>When a subsection is defining a term, the first paragraph
acts as a definition. Other paragraphs are treated as a description,
they provide additional details without being needed to define the term.</t>

<t>Definitions should form a directed acyclic graph of dependencies.
If a section contains subsections, the section definition
may depend on the subsection definitions.
Otherwise, any definition may depend on preceding definitions.
In other words, if the section definition were to come after subsections,
there would be no forward dependencies for people reading just definitions
from start to finish.</t>

<t>Descriptions provide motivations and explanations,
they frequently reference terms defined only later.
Motivations in section descriptions are the reason
why section text comes before subsection text.</t>

<section anchor="general-notions"><name>General notions</name>

<t>General notions are the terms defined in this section.</t>

<t>It is useful to define the following notions
before delving into MLRsearch architecture,
as the notions appear in multiple places
with no place being special enough to host definition.</t>

<section anchor="general-and-specific-quantities"><name>General and specific quantities</name>

<t>General quantity is a quantity that may appear multiple times
in MLRsearch specification, perhaps each time in a different role.
The quantity when appearing in a single role is called
a specific quantity.</t>

<t>It is useful to define the general quantity,
so definitions of specific quantities may refer to it.
We say a specific quantity is based on a general quantity,
if the specific quantity definition refers to and
relies on the general quantity definition.</t>

<t>It is natural to name specific quantities by adding an adjective
(or a noun) to the name of the general quantity.
But existing RFCs typically explicitly define a term acting
in a specific role, so the RFC name directly refers to a specific
quantity, while the corresponding general quantity
is defined only implicitly.
Therefore this documents defines general quantities explicitly,
even if the same term already appears in an RFC.</t>

<t>In practice, it is required to know which unit of measurement
is used to accompany a numeric value of each quantity.
The choice of a particular unit of measurement is not important
for MLRsearch specification though, so specific units
mentioned in this document are just examples or recommendations,
not requirements.</t>

<t>When reporting, it is REQUIRED to state the units used.</t>

</section>
<section anchor="composite"><name>Composite</name>

<t>A composite is a set of named attributes.
Each attribute is either a specific quantity or a composite.</t>

<t>MLRsearch specification frequently groups multiple specific quantities
into a composite. Description of such a composite brings an insight
to motivations why this or other terms are defined as they are.
Such insight will be harder to communicate
with the specific quantities alone.</t>

<t>Also, it simplifies naming of specific quantities, as they usually can
share a noun or adjective referring to their common composite.
Most of relations between composites and their specific quantities
can be described using plain English.</t>

<t>Perhaps the only exception involves referring to specific quantities
as attributes. For example if there is a composite called &#39;target&#39;,
and one of its specific quantities is &#39;target width&#39; defined using
a general quantity &#39;width&#39;, we can say &#39;width is one of target attributes&#39;.</t>

</section>
<section anchor="sut"><name>SUT</name>

<t>As defined in RFC 2285:
The collective set of network devices to which stimulus is offered
as a single entity and response measured.</t>

<t>While RFC 2544 mostly refers to DUT as a single
(network interconnecting) device, section 19 makes it clear
multiple DUTs can be treated as a single system,
so most of RFC 2544 also applies to testing SUT.</t>

<t>MLRsearch specification only refers to SUT (not DUT),
even if it consists of just a single device.</t>

</section>
<section anchor="trial"><name>Trial</name>

<t>A trial is the part of test described in RFC 2544 section 23.</t>

<t>When traffic has been sent and SUT response has been observed,
we say the trial has been performed, or the trial has been measured.
Before that happens, multiple possibilities for upcoming trial
may be under consideration.</t>

</section>
<section anchor="load"><name>Load</name>

<t>Intended, constant load for a trial, usually in frames per second.</t>

<t>Load is the general quantity implied by Constant Load of RFC 1242,
Data Rate of RFC 2544 and Intended Load of RFC 2285.
All three specify this value applies to one (input or output) interface,
so we can talk about unidirectional load also
when bidirectional or multi-port traffic is applied.</t>

<t>MLRsearch does not rely on this distinction, it works also if
the load values correspond to an aggregate rate
(sum over all SUT tested input or output interface unidirectional loads),
as long as all loads share the same semantics.</t>

<t>Several RFCs define useful quantities based on Offered Load
(instead of Intended Load), but MLRsearch specification
works only with (intended) load. Those useful quantities
still serve as motivations for few specific quantities used in MLRsearch
specification.</t>

<t>MLRsearch assumes load values are always positive.
For some (but not all) specific quantities based on load,
zero may be a valid value.</t>

</section>
<section anchor="duration"><name>Duration</name>

<t>Intended duration of the traffic for a trial, usually in seconds.</t>

<t>This general quantity does not include any preparation nor waiting
described in section 23 of RFC 2544.
Section 24 of RFC 2544 places additional restrictions on duration,
but those restriction apply only to some of the specific quantities based
on duration.</t>

<t>Duration is always positive in MLRsearch.</t>

</section>
<section anchor="duration-sum"><name>Duration sum</name>

<t>For a specific set of trials, this is the sum of their durations.</t>

<t>Some of specific quantities based on duration sum are derived quantities,
without a specific set of trials to sum their durations.</t>

<t>Duration sum is never negative in MLRsearch.</t>

</section>
<section anchor="width"><name>Width</name>

<t>General quantity defined for an ordered pair (lower and higher)
of load values, which describes a distance between the two values.</t>

<t>The motivation for the name comes from binary search.
The binary search tries to approximate an unknown value
by repeatedly bisecting an interval of possible values,
until the interval becomes narrow enough.
Width of the interval is a specific quantity
and the termination condition compares that
to another specific quantity acting as the threshold.
The threshold value does not have a specific interval associated,
but corresponds to a &#39;size&#39; of the compared interval.
As size is a word already used in definition of frame size,
a more natural word describing interval is width.</t>

<t>The MLRsearch specification does use (analogues of) upper bound
and lower bound, but does not actually need to talk about intervals.
Still, the intervals are implicitly there, so width is the natural name.</t>

<t>Actually, there are two popular options for defining width.
Absolute width is based on load, the value is the higher load
minus the lower load.
Relative width is dimensionless, the value is the absolute width
divided by the higher load. As intended loads for trials are positive,
relative width is between 0.0 and 1.0 (both including).</t>

<t>Relative width as a threshold value may be useful for users
who do not presume what is the typical performance of SUT,
but absolute width may be a more familiar concept.</t>

<t>MLRsearch specification does not prescribe which width has to be used,
but widths MUST be either all absolute or all relative,
and it MUST be clear from report which option was used
(it is implied from the unit of measurement of any width value).</t>

</section>
<section anchor="loss-ratio"><name>Loss ratio</name>

<t>The loss ratio is a general quantity, dimensionless floating point value
assumed to be between 0.0 and 1.0, both including.
It is computed as the number of frames forwarded by SUT, divided by
the number of frames that should have been forwarded during the trial.</t>

<t>If the number of frames that should have been forwarded is zero,
the loss ratio is considered to be zero
(but it is better to use high enough loads to prevent this).</t>

<t>Loss ratio is basically the same quantity as Frame Loss Rate of RFC 1242,
just not expressed in percents.</t>

<t>RFC1242 Frame Loss Rate:
Percentage of frames that should have been forwarded
by a network device under steady state (constant)
load that were not forwarded due to lack of
resources.</t>

<t>(RFC2544 restricts Frame Loss Rate to a type of benchmark,
for loads 100% of &#39;maximum rate&#39;, 90% and so on.)</t>

</section>
<section anchor="exceed-ratio"><name>Exceed ratio</name>

<t>This general quantity is a dimensionless floating point value,
defined using two duration sum quantities.
One duration sum is referred to as the good duration sum,
the other is referred to as the bad duration sum.
The exceed ratio value is computed as the bad duration sum value
divided by the sum of the two sums. If both sums are zero,
the exceed ratio is undefined.</t>

<t>As there are no negative duration sums in MLRsearch,
exceed ratio values are between 0.0 and 1.0 (both including).</t>

</section>
</section>
<section anchor="architecture"><name>Architecture</name>

<t>MLRsearch architecture consists of three main components:
the manager, the controller and the measurer.</t>

<t>The search algorithm is implemented in the controller,
and it is the main focus of this document.</t>

<t>Most implementation details of the manager and the measurer are
out of scope of this document, except when describing
how do they interface with the controller.</t>

<section anchor="manager"><name>Manager</name>

<t>The manager is the component that initializes SUT, traffic generator
(called tester in RFC 2544), the measurer and the controller
with intended configurations. It then handles the execution
to the controller and receives its result.</t>

<t>Managers can range from simple CLI utilities to complex
Continuous Integration systems. From the controller point of view
it is important that no additional configuration (nor warmup)
is needed for SUT and the measurer to perform trials.</t>

<t>The interface between the manager and the controller
is defined in the controller section.</t>

<t>One execution of the controller is called a search.
Some benchmarks may execute multiple searches on the same SUT
(for example when confirming the performance is stable over time),
but in this document only one invocation is concerned
(others may be understood as the part of SUT preparation).</t>

<t>Creation of reports of appropriate format can also be understood
as the responsibility of the manager. This document places requirements
on which information has to be reported.</t>

</section>
<section anchor="measurer"><name>Measurer</name>

<t>The measurer is the component which performs one trial
as described in RFC 2544 section 23, when requested by the controller.</t>

<t>From the controller point of view, it is a function that accepts
trial input and return trial output.</t>

<t>This is the only way the controller can interact with SUT.
In practice, the measurer has to do subtle decisions
when converting the observed SUT behavior into a single
trial loss ratio value. For example how to deal with
out of order frames or duplicate frames.</t>

<t>On software implementation level, the measurer is a callable,
injected by the manager into the controller instance.</t>

<t>The act of performing one trial (act of turning trial input
to trial output) is called a measurement, or trial measurement.
This way we can talk about trials that were measured already
and trials that are merely planned (not measured yet).</t>

<section anchor="trial-input"><name>Trial input</name>

<t>The load and duration to use in an upcoming trial.</t>

<t>This is a composite.</t>

<t>Other quantities needed by the measurer are assumed to be constant
and set up by the manager before search starts (see traffic profile),
so they do not count as trial input attributes.</t>

<section anchor="trial-load"><name>Trial load</name>

<t>Trial load is the intended load for the trial.</t>

<t>This is a specific quantity based on load,
directly corresponding to RFC 2285 intended load.</t>

</section>
<section anchor="trial-duration"><name>Trial duration</name>

<t>Trial duration is the intended duration for the trial.</t>

<t>This is a specific quantity based on duration, so it specifies
only the traffic part of the trial, not the waiting parts.</t>

</section>
</section>
<section anchor="traffic-profile"><name>Traffic profile</name>

<t>Any other configuration values needed by the measurer to perform a trial.</t>

<t>The measurer needs both trial input and traffic profile to perform the trial.
As trial input contains the only values that vary during one the search,
traffic profile remains constant during the search.</t>

<t>Traffic profile when understood as a composite is REQUIRED by RFC 2544
to contain some specific quantities (for example frame size).
Several more specific quantities may be RECOMMENDED.</t>

<t>Depending on SUT configuration (e.g. when testing specific protocols),
additional values need to be included in the traffic profile
and in the test report. (See other IETF documents.)</t>

</section>
<section anchor="trial-ouput"><name>Trial ouput</name>

<t>A composite consisting of trial loss ratio
and trial relative forwarding rate.</t>

<t>Those are the only two specific quantities (among other quantities
possibly measured in the trial, for example offered load)
that are important for MLRsearch.</t>

<section anchor="trial-loss-ratio"><name>Trial loss ratio</name>

<t>Trial loss ratio is a specific quantity based on loss ratio.
The value is related to a particular measured trial,
as measured by the measurer.</t>

</section>
<section anchor="trial-forwarding-rate"><name>Trial forwarding rate</name>

<t>Trial relative forwarding rate is a derived quantity.
It is computed as one minus trial loss ratio,
that multiplied by trial load.</t>

<t>Despite the name, the general quantity this specific quantity
corresponds to is load (not rate).
The name is inspired by RFC 2285, which defines Forwarding Rate
specific to one output interface.</t>

<t>As the definition of loss ratio is not neccessarily per-interface
(one of details left for the measurer), using the definition above
(instead of RFC 2285) makes sure trial relative forwarding rate
is always between zero and the trial load (both including).</t>

</section>
</section>
<section anchor="trial-result"><name>Trial result</name>

<t>Trial result is a composite consisting of trial input attributes
and trial output attributes.</t>

<t>Those are all specific quantites related to a measured trial MLRsearch needs.</t>

<t>While distinction between trial input and output is important
when defining the interface between the controller and the measurer,
it is easier to talk about trial result
when describing how measured trials influence the controller behavior.</t>

</section>
</section>
<section anchor="controller"><name>Controller</name>

<t>The component of MLRsearch architecture that calls the measurer
and returns conditional throughputs to the manager.</t>

<t>This is the search algorithm, the main content of this document.</t>

<t>Contrary to Throughput as defined in RFC 1242,
the definition of conditional throughput is quite sensitive
to the controller input (as provided by the manager),
and its full definition needs several terms
which would otherwise be hidden as internals of the controller
implementation.</t>

<t>The ability of conditional throghput to be less sensitive
to performance variance, and the ability of the controller
to find conditional throughputs for multiple search goals
within one search (and in short overall search time)
are strong enough motivations for the need of increased complexity.</t>

<section anchor="controller-input"><name>Controller input</name>

<t>A composite of max load, min load, and a set of search goals.</t>

<t>The search goals (as elements of the set of search goals)
are usually not named.</t>

<t>It is fine if all search goals of the set have the same value
of a particular attribute. In that case, the common value
may be treated as a global attribute (similarly to max and min load).</t>

<t>The set of search goals MUST NOT be empty.
Two search goals within the set MUST differ in at least one attribute.
The manager MAY avoid both issues by presenting empty report
or de-duplicating the search goals, but it is RECOMMENDED
for the manager to raise an error to its caller,
as the two conditions suggest the test is improperly configured.</t>

<section anchor="max-load"><name>Max load</name>

<t>Max load is a specific quantity based on load.
No trial load is ever higher than this value.</t>

<t>RFC 2544 section 20 defines maximum frame rate
based on theoretical maximum rate for the frame size on the media.
RFC 2285 section 3.5.3 specifies Maximum offered load (MOL)
which may be lower than maximum frame rate.
There may be other limitations preventing high loads,
for examples resources available to traffic generator.</t>

<t>The manager is expected to provide a value that is not greater
than any known limitation. Alternatively, the measurer
is expected to work at max load, possibly reporting as lost
any frames that were not able to leave Traffic Generator.</t>

<t>From the controller point of view, this is merely a global upper limit
for any trial load candidates.</t>

</section>
<section anchor="min-load"><name>Min load</name>

<t>Min load is a specific quantity based on load.
No trial load is ever lower than this value.</t>

<t>The motivation of this quantity is to prevent trials
with too few frames sent to SUT.</t>

<t>Also, practically if a SUT is able to reach only very small
forwarding rates (min load serves as a threshold for how small),
it may be considered faulty (or perhaps the test is misconfigured).</t>

</section>
<section anchor="search-goal"><name>Search goal</name>

<t>A composite of 7 attributes (see subsections).</t>

<t>If not otherwise specified, &#39;goal&#39; always refers to a search goal
in this document.</t>

<t>The controller input may contain multiple goals.
The name Multiple Loss Ratio search was created back when
goal loss ratio was the only attribute allowed to vary between goals.</t>

<t>Each goal will get its conditional throughput discovered
and reported at the end of the search.</t>

<t>The definitions of the 7 attributes are not very informative by themselves.
Their motivation (and naming) becomes more clear
from the impact they have on conditional throughput.</t>

<section anchor="goal-loss-ratio"><name>Goal loss ratio</name>

<t>A specific quantity based on loss ratio.
A threshold value for trial loss ratios.
MUST be lower than one.</t>

<t>Trial loss ratios will be compared to this value,
a trial will be considered bad if its loss ratio is higher than this.</t>

<t>For example, RFC 2544 throughput has goal loss ratio of zero,
a trial is bad once a sigle frame is lost.</t>

<t>Loss ratio of one would classify each trial as good (regardless of loss),
which is not useful.</t>

</section>
<section anchor="goal-initial-trial-duration"><name>Goal initial trial duration</name>

<t>A specific quantity based on duration.
A threshold value for trial durations.
MUST be positive.</t>

<t>MLRsearch is allowed to use trials as short as this when focusing
on this goal.
The conditional throughput may be influenced by shorter trials,
(measured when focusing on other search goals).</t>


</section>
<section anchor="goal-final-trial-duration"><name>Goal final trial duration</name>

<t>A specific quantity based on duration.
A threshold value for trial durations.
MUST be no smaller than goal initial trial duration.</t>

<t>MLRsearch is allowed to use trials as long as this when focusing
on this goal. If more data is needed, repeated trials
at the same load and duration are requested by the controller.</t>

</section>
<section anchor="goal-min-duration-sum"><name>Goal min duration sum</name>

<t>A specific quantity based on duration sum.
A threshold value for a particular duration sum.</t>

<t>MLRsearch requires at least this amount of data for a particular load
to become part of MLRsearch outputs.</t>

<t>It is possible (though maybe not prectical) for goal min duration sum
to be smaller than goal final trial duration.</t>

<t>In practice, the sum of durations actually spent on trial measurement
can be smaller (when trial results are quite one-sided) or even larger
(in presence of shorter-than-final trial duration results at the same load).</t>

<t>If the sum of all (good and bad) long trials is at least this,
and there are no short trials, then the load is guaranteed
to be classified as either an upper or a lower bound.</t>

<t>In some cases, the classification is known sooner,
when the &#39;missing&#39; trials cannot change the outcome.</t>

<t>When short trials are present, the logic is more complicated.</t>

</section>
<section anchor="goal-exceed-ratio"><name>Goal exceed ratio</name>

<t>A specific quantity based on exceed ratio.
A threshold value for particulat sets of trials.</t>

<t>An attribute used for classifying loads into upper and lower bounds.</t>

<t>If the duration sum of all (current duration) trials is at least
min duration sum, and more than this percentage of the duration sum
comes from bad trials, this load is an upper bound.</t>

<t>If there are shorter duration trials, the logic is more complicated.</t>

</section>
<section anchor="goal-width"><name>Goal width</name>

<t>A specific quantity based on width.
A threshold value for a particular width.
MUST be positive.</t>

<t>This defines the exit condition for this search goal.</t>

<t>Relevant bounds (of the final target) need to be this close
before conditional throughput can be reported.</t>

</section>
<section anchor="preceding-targets"><name>Preceding targets</name>

<t>A non-negative integer affecting the behavior of the controller.</t>

<t>How many additional non-final targets to add.
Each next preceding target has double width
and min duration sum geometrically closer to initial trial duration.</t>

<t>The usage of preceding targets is an important source
of MLRsearch time savings (compared to simpler search algorithms).</t>

<t>Having this value configurable lets the manager
tweak the overall search duration based on presumed knowledge
of SUT performance stability.</t>

</section>
</section>
</section>
<section anchor="controller-internals"><name>Controller internals</name>

<t>Terms not directly corresponding to the controller&#39;s input or output,
but needed indirectly as dependencies of the conditional throughput
definition.</t>

<t>Following these definitions specifies virtually all of the controller
(MLRsearch algorithm) logic.</t>

<section anchor="pre-initial-trials"><name>Pre-initial trials</name>

<t>Up to three special trials executed at the start of the search.
The first trial load is max load,
subsequent trial load are computed from preceding trial
relative forwarding rate.</t>

<t>The main loop of the controller logic needs at least one trial result,
and time is saved if the trial results are close to future conditional
throughput values.</t>

<t>The exact way to compute load for second and third trial
(and whether even measure second or third trial)
are not specified here, as the implementation details
have negligible effect on the reported conditional throughput.</t>


</section>
<section anchor="search-target"><name>Search target</name>

<t>A composite of 5 specific quantites.
Frequently called just target.</t>

<t>Similar to (but distinct from) the search goal.</t>

<t>Each search goal prescribes a final target,
probably with a chain of preceding targets.</t>

<t>More details in the Derived targets section.</t>

<section anchor="target-loss-ratio"><name>Target loss ratio</name>

<t>Same as loss ratio of the corresponding goal.</t>

</section>
<section anchor="target-exceed-ratio"><name>Target exceed ratio</name>

<t>Same as exceed ratio of the corresponding goal.</t>

</section>
<section anchor="target-width"><name>Target width</name>

<t>Similar to goal width attribute.
Doubled from goal width for each level of preceding target.</t>

</section>
<section anchor="target-trial-duration"><name>Target trial duration</name>

<t>When MLRsearch focuses on this target, it measures trials
with this duration.</t>

<t>Also, this value is used to classify trial results
as short (if trial duration is shorter than this) or long.
The value is equal to the minimum of goal final trial duration
and target min duration sum.</t>

</section>
<section anchor="target-min-duration-sum"><name>Target min duration sum</name>

<t>Similar to goal min duration sum attribute.
Interpolated between initial target duration and goal min duration sum.</t>

</section>
</section>
<section anchor="derived-targets"><name>Derived targets</name>

<t>After receiving the set of search goals,
MLRsearch integrally derives a set of search targets.</t>

<section anchor="final-target"><name>Final target</name>

<t>The final target is the target where the most of attribute values
are directly copied from the coresponding search goal.
Final target width is the same as goal width,
final target trial duration is the same as goal final trial duration,
and final target min duration sum is the same
as the goal min duration sum.</t>

<t>The conditional throughput is found when focusing on teh final target.
All non-final targets do not directly affect the conditional throughput,
they are there just as an optimization.</t>

</section>
<section anchor="preceding-target"><name>Preceding target</name>

<t>Each target may have a preceding target.
Goal attribute Preceding targets governs how many targets are added
to form a chain ending in the final target corresponding to the search goal.</t>

<t>Any preceding target has double width, meaning one balanced bisection
is needed to reduce preceding target width to the next target width.</t>

<t>Preceding target min duration sum is exponentially smaller,
aiming for prescribed initial target min duration sum.</t>

<t>Preceding target trial duration is either its min duration sum,
or the corresponding goal&#39;s final trial duration, whichever is smaller.</t>

<t>As the preceding min duration sum is shorter than the next duration sum,
MLRsearch is able to achieve the preceding target width
sooner (than with the next target min duration sum).</t>

<t>This way an approximation of the conditional throughput is found,
with the next target needing not as much time to improve the approximation.</t>

</section>
<section anchor="initial-target"><name>Initial target</name>

<t>Initial target is a target without any other target preceding it.
Initial target min duration sum is equal to the corresponding goal&#39;s
initial trial duration.</t>

<t>As a consequence, initial target trial duration is equal to its min duration sum.</t>

</section>
</section>
<section anchor="trial-classification"><name>Trial classification</name>

<t>Any trial result can be classified according to any target along two axes.</t>

<t>The two classifications are independent.</t>

<t>This classification is important for defining the conditional throughput.</t>

<section anchor="short-trial"><name>Short trial</name>

<t>If the (measured) trial duration is shorter than
the target trial duration, the trial is called long.</t>

</section>
<section anchor="long-trial"><name>Long trial</name>

<t>If the (measured) trial duration is at least as long
as the target trial duration, the trial is called long.</t>

</section>
<section anchor="bad-trial"><name>Bad trial</name>

<t>If the (measured) trial loss ratio is larger than the target loss ratio,
the trial is called bad.</t>

<t>For example, if the target loss ratio is zero,
a trial is bad as soon as one frame was lost.</t>

</section>
<section anchor="good-trial"><name>Good trial</name>

<t>If the (measured) trial loss ratio is not larger than the target loss ratio,
the trial is called good.</t>

<t>For example, if the target loss ratio is zero,
a trial is good only when there were no frames lost.</t>

</section>
</section>
<section anchor="load-stat"><name>Load stat</name>

<t>A composite of 8 quantities is useful when defining how does
the value of goal exceed ratio affect the MLRsearch behavior.
The quantites depend on a target and a load,
and are computed from all trials measured at that load so far.</t>

<t>The MLRsearch output is the conditional througput,
which is a quantity based on load.
As MLRsearch may measure multiple trials at the same load,
and those trials may not have the same duration,
we need a way to classify a set of trial results at the same load.</t>

<t>As the logic is not as straightforward as in other parts
of MLRsearch algorithm, it is best defined using the following
derived quantities.</t>

<t>Load stat is the composite for one load and one target.
Set of load stats for one load an all targets is commonly called load stats.</t>

<section anchor="long-good-duration-sum"><name>Long good duration sum</name>

<t>Sum of durations of all long good trials.</t>

</section>
<section anchor="long-bad-duration-sum"><name>Long bad duration sum</name>

<t>Sum of durations of all long bad trials.</t>

</section>
<section anchor="short-good-duration-sum"><name>Short good duration sum</name>

<t>Sum of durations of all short good trials.</t>

</section>
<section anchor="short-bad-duration-sum"><name>Short bad duration sum</name>

<t>Sum of durations of all short bad trials.</t>

</section>
<section anchor="effective-bad-duration-sum"><name>Effective bad duration sum</name>

<t>One divided by tagret exceed ratio, that plus one.
Short good duration sum divided by that.
Short bad duration sum minus that, or zero if that would be negative.
Long bad duration sum plus that is the effective bad duration sum.</t>

<t>Effective bad duration sum is the long bad duration sum
plus some fraction of short bad duration sum.
If there are no short good trials, it becomes the duration sum
of all bad trials (long or short).
If an exceed ratio computed from short good duration sum
and short bad duration sum is equal or smaller than the target exceed ratio,
effective bad duration sum is equal to just long bad duration sum.</t>

<t>Basically, short good trials can only lessen the impact
of short bad trials, while short bad trials directly contribute
(unless lessened).</t>

<t>A typical example of why a goal needs higher final trial duration
than initial trial duration is when SUT is expected to have large buffers,
so a trial may be too short to see frame losses due to
a buffer becoming full. So a short good trial does not give string information.
On the other hand, short bad trial is a strong hint SUT would lose many frames
at that load and long duration.
But if there is a mix of short bad and short good trials,
MLRsearch should not cherry-pick only the short bad ones.</t>

<t>The presented way of computing the effective bad duration sum
aim to be a fair treatment.</t>

<t>If the target exceed ratio is zero, the given definition contains
positive infinty as an intermediate value, but still simplifies
to a finite result (long bad duration sum plus short bad duration sum).</t>

</section>
<section anchor="missing-duration-sum"><name>Missing duration sum</name>

<t>The target min duration sum minus effective bad duration sum
and minus long good duration sum, or zero if that would be negative.</t>

<t>MLRsearch may need up to this duration sum of additional long trials
before classifing the load.</t>

</section>
<section anchor="optimistic-load-exceed-ratio"><name>Optimistic load exceed ratio</name>

<t>The specific quantity based on exceed ratio, where bad duration sum is
the effective bad duration sum, and good duration sum is
the long good duration sum plus the missing duration sum.</t>

<t>This is the value MLRsearch would compare to target exceed ratio
assuming all of the missing duration sum ends up consisting of long good trials.</t>

<t>If there was a bad long trial, optimistic load exceed ratio
becomes larger than zero.
Additionally, is the target exceed ratio is zero, optimistic load exceed ratio
becomes larger than zero even on one short bad trial.</t>

</section>
<section anchor="pessimstic-load-exceed-ratio"><name>Pessimstic load exceed ratio</name>

<t>The specific quantity based on exceed ratio, where bad duration sum is
the effective bad duration sum plus the missing duration sum,
and good duration sum is the long good duration sum.</t>

<t>This is the value MLRsearch would compare to target exceed ratio
assuming all of the missing duration sum ends up consisting of bad good trials.</t>

<t>Note that is the missing duration sum is zero,
optimistic load exceed ratio becomes equal to pessimistic load exceed ratio.</t>

<t>This is the role target min duration sum has,
it guarantees the two load exceed ratios eventually become the same.
Otherwise, pessimistic load exceed ratio
is always bigger than the optimistic load exceed ratio.</t>

<t>Depending on trial results, the missing duration sum may not be large enough
to change optimistic (or pessimistic) load exceed ratio
to move to the other side compared to target exceed ratio.</t>

<t>In that case, MLRsearch does not need to measure more trial
at this load when focusing on this target.</t>

</section>
</section>
<section anchor="target-bounds"><name>Target bounds</name>

<t>With respect to a target, some loads may be classified as upper or lower bound,
and some of the bounds are treated as relevant.</t>

<t>Other parts of MLRsearch view only relevant bounds,
without the need to classify other loads.</t>

<section anchor="upper-bound"><name>Upper bound</name>

<t>A load is classified as an upper bound for a target,
if and only if both optimistic load exceed ratio
and pessimstic load exceed ratio are larger than the target exceed ratio.</t>

<t>During the search, it is possible there is no upper bound,
for example because every measured load still has too high
missing duration sum.</t>

<t>If the target exceed ratio is zero, and a load has at least one short trial
(short or long), the load becomes an upper bound.</t>

</section>
<section anchor="lower-bound"><name>Lower bound</name>

<t>A load is classified as an lower bound for a target,
if and only if both optimistic load exceed ratio
and pessimstic load exceed ratio are no larger than the target exceed ratio.</t>

<t>During the search, it is possible there is no upper bound,
for example because every measured load still has too high
missing duration sum.</t>

<t>If the target exceed ratio is zero, all trials at load at or below
a lower bound must be good trials (short or long).</t>

</section>
<section anchor="relevant-upper-bound"><name>Relevant upper bound</name>

<t>For a target, a load is the relevant upper bound,
if and only if it is an upper bound, and all other upper bounds
are larger (as loads).</t>

<t>In some cases, the max load when classified as a lower bound
is also effectively treated as the relevant upper bound.</t>

<t>If that happens for a final target at the end of the search,
the controller output may contain max load as the relevant upper bound
(even if the exceed ratio was not exceeded),
signalling SUT performs well even at max load.</t>

<t>If the target exceed ratio is zero, the relevant upper bound
is the smallest load where a bad trial (short or long) has been measured.</t>

</section>
<section anchor="relevant-lower-bound"><name>Relevant lower bound</name>

<t>For a target, a load is the relevant lower bound if two conditions hold.
Both optimistic load exceed ratio and pessimstic load exceed ratio
are no larger than the target exceed ratio,
and there is no smaller load classified as an upper bound.</t>

<t>This is a second place where MLRsearch is not symmetric
(the first place was effective bad duration sum).</t>

<t>While it is not likely for a MLRsearch to find a smaller upper bound
and a larger load satisfying first condition for the lower bound,
it still may happen and MLRsearch has to deal with it.</t>

<t>In some cases, the min load when classified as an upper bound
is also effectively treated as the relevant lower bound.</t>

<t>If that happens for a final target at the end of the search,
the controller output may contain min load as the relevant lower bound
even if the exceed ratio was &#39;overstepped&#39;,
signalizing the SUT does not even reach the minimal required performance.</t>

<t>The manager has to make sure this is distingushed in report
from cases where min rate is a legitimate contditional throughput
(e.g. the exceed ratio was not overstepped at the min load).</t>

</section>
<section anchor="relevant-bounds"><name>Relevant bounds</name>

<t>The pair of the relevant lower bound and the relevant upper bound.</t>

<t>Useful for determining the width of the relevant bounds.
Any of the bounds may be the effective one (max load or min load).</t>

<t>A goal is achieved (at the end of the search) when the final target&#39;s
relevant bounds have width no larget than the goal width.</t>

</section>
</section>
<section anchor="candidate-selector"><name>Candidate selector</name>

<t>A stateful object (a finite state machine)
focusing on a single target, used to determine next trial input.</t>

<t>Initialized for a pair of targets:
the current target and its preceding target (if any).</t>

<t>Private state (not shared with other selectors) consists of mode and flags.
Public state (shared with all selectors) is the actual relevant bounds
for both targets (current and precedinig).</t>

<t>After accepting a trial result, each selector can nominate
one candidate (or no candidate) for the next trial measurement.</t>

<section anchor="current-target"><name>Current target</name>

<t>This is the target this selector tries to achieve.</t>

</section>
<section anchor="preceding-target-1"><name>Preceding target</name>

<t>The target (if any) preceding to the current target.</t>

<t>While this selector does not focus on the preceding target,
the relevant bounds for the preceding target are used as hints
when the current bound does not have enough of its relevant bounds.</t>

</section>
<section anchor="candidate"><name>Candidate</name>

<t>The trial input (if any) this selecor nominates.</t>

<t>The trial duration attribute is always the current target trial duration.
The trial load attribute depends on the selector state.</t>

<t>Candidates have defined ordering, to simplify finding the winner.
If load differs, the candidate with lower load is preferred.
If load is the same but duration differs, the candidate
with larger duration is preferred.</t>

</section>
<section anchor="selector-mode"><name>Selector mode</name>

<t>During its lifetime, selector proceedes through the following modes.
In order, but some modes may be skipped.</t>

<t>Each mode has its own way of determining the candidate load (if any).</t>

</section>
<section anchor="waiting"><name># Waiting</name>

<t>Not enough relevant bounds (even for the preceding target).
In this mode, the selector abstains from nominating a candidate.</t>

<t>This selector leaves this mode when preceding target&#39;s selector is done.</t>

</section>
<section anchor="halving"><name># Halving</name>

<t>Candidate is in the middle of the relevant bounds of the preceding target.</t>

<t>If the relevant bounds are narrow enough already, this mode is skipped.
As the preceding target had double width, just one halving load
needs to be measured.</t>

<t>Selector uses a flag to avoid entering this mode
once it finished measuring the halved load.</t>

</section>
<section anchor="upgrading"><name># Upgrading</name>

<t>This mode activates when only one bound for the current target is available.
Candidate is the other bound from the precedinig target.</t>

<t>At most one bound load is measured, depending on halving outcome.
Private flags are used to avoid upgrading at later times
once selector finished measuring the upgraded load.</t>

</section>
<section anchor="extending"><name># Extending</name>

<t>Refined already but the other bound for the current target
is still missing.
Nominate new candidate according to external search.
Initial target selectors start at this mode.</t>

<t>A private value is used to track the width to be used in next load extension
(increasing geometrically).
For initial target selectors, the starting width may be chosen
based on pre-initial trial results.</t>

<t>If both relevant bounds are present at the current load,
but the lower bound is far away (compared to tracked width),
the candidate from this mode is preferred if the load
is larger than the candidate load of bisecting mode.</t>

</section>
<section anchor="bisecting"><name># Bisecting</name>

<t>Both bounds for the current target are available, but they are too far
from each other. Candidate is in the middle.</t>

<t>Contrary to halving, the candidate load does not need to be at the exact middle.
For example if the width of the current relevant bounds
is three times as large as the target width,
it is advantageous to split the interval in 1:2 ratio
(choosing the lower candidate load), as it can save one bisect.</t>

</section>
<section anchor="done"><name># Done</name>

<t>Both relevant bounds for the current target are available
their width is no larger than the target width.
No candidate.</t>

<t>If a selector reaches the done state,
it is still possible later trials invalidate its relevant lower bound
(by proving a lower load is in fact a new uper bound),
making the selector transition into extending or bisecting mode.</t>

</section>
<section anchor="active-selector"><name>Active selector</name>

<t>Derived from a common goal, the earliest selector which nominates a candidate
is considered to be the active selector for this goal.</t>

<t>It is quite possible selectors focusing on other goals
have already found a lower bound relevant to multiple targets in a chain.
In that case, we want the most-initial of the target selectors
not already in done mode to have the nomination.
Otherwise the closer-to-final selectors would nominate candidates
at lower load but at too high duration sum,
preventing some of the time savings.</t>

</section>
<section anchor="winner"><name>Winner</name>

<t>If the candidate previously nominated by a selector was the one
that got measured, the candidate is called a winner.</t>

<t>A selector observing its previous candidate was a winer
can use a simplified logic when determining the mode,
as it knows no other selectors may have changes the relevant loads unexpectedly.</t>

</section>
</section>
</section>
<section anchor="controller-output"><name>Controller output</name>

<t>The output object the controller return to the manager
is a mapping assigning each search goal its conditional output (if it exists).</t>

<t>The controller MAY include more information (if manager accepts it),
for example load stat at relevant bounds.</t>

<t>There MAY be several way how to communicate the fact a conditional output
does not exist (e.g. min load is classified as an upper bound).
The manager MUST NOT present min load as a conditional output in that case.</t>

<section anchor="conditional-throughput"><name>Conditional throughput</name>

<t>The conditional throughput is the average of relative forwarding rates
across long good trials measured at the (offered load classified as)
relevant lower bound (for the goal, at the end of the search).
The average is the weighted arithmetic mean, weighted by trial duration.</t>

<t>If the goal exceed ratio is zero, the definition of the relevant bounds
simplifies significantly.
If additionally the goal loss ratio is zero,
and the goal min duration sum is equal to goal final trial duration,
conditional throughput becomes conditionally compliant with RFC 2544 throughput.
If the goal final trial duration is at least 60 seconds,
the conditional througput becomes unconditionally compliant
with RFC 2544 throughput.</t>

</section>
</section>
</section>
</section>
</section>
<section anchor="problems"><name>Problems</name>

<section anchor="long-test-duration"><name>Long Test Duration</name>

<t>Emergence of software DUTs, with frequent software updates and a
number of different packet processing modes and configurations, drives
the requirement of continuous test execution and bringing down the test
execution time.</t>

<t>In the context of characterising particular DUT&#39;s network performance, this
calls for improving the time efficiency of throughput search.
A vanilla bisection (at 60sec trial duration for unconditional <xref target="RFC2544"></xref>
compliance) is slow, because most trials spend time quite far from the
eventual throughput.</t>

<t><xref target="RFC2544"></xref> does not specify any stopping condition for throughput search,
so users can trade-off between search duration and achieved precision.
But, due to exponential behavior of bisection, small improvement
in search duration needs relatively big sacrifice in the throughput precision.</t>

</section>
<section anchor="dut-within-sut"><name>DUT within SUT</name>

<t><xref target="RFC2285"></xref> defines:
- <em>DUT</em> as
  - The network forwarding device to which stimulus is offered and
    response measured <xref target="RFC2285"></xref> (section 3.1.1).
- <em>SUT</em> as
  - The collective set of network devices to which stimulus is offered
    as a single entity and response measured <xref target="RFC2285"></xref> (section 3.1.2).</t>

<t><xref target="RFC2544"></xref> specifies a test setup with an external tester stimulating the
networking system, treating it either as a single DUT, or as a system
of devices, an SUT.</t>

<t>In case of software networking, the SUT consists of a software program
processing packets (device of interest, the DUT),
running on a server hardware and using operating system functions as appropriate,
with server hardware resources shared across all programs
and the operating system.</t>

<t>DUT is effectively &quot;nested&quot; within SUT.</t>

<t>Due to a shared multi-tenant nature of SUT, DUT is subject to
interference (noise) coming from the operating system and any other
software running on the same server. Some sources of noise can be
eliminated (e.g. by pinning DUT program threads to specific CPU cores
and isolating those cores to avoid context switching). But some
noise remains after all such reasonable precautions are applied. This
noise does negatively affect DUT&#39;s network performance. We refer to it
as an <em>SUT noise</em>.</t>

<t>DUT can also exhibit fluctuating performance itself, e.g. while performing
some &quot;stop the world&quot; internal stateful processing. In many cases this
may be an expected per-design behavior, as it would be observable even
in a hypothetical scenario where all sources of SUT noise are
eliminated. Such behavior affects trial results in a way similar to SUT
noise. We use <em>noise</em> as a shorthand covering both <em>DUT fluctuations</em> and
genuine SUT noise.</t>

<t>A simple model of SUT performance consists of a baseline <em>noiseless performance</em>,
and an additional noise. The baseline is assumed to be constant (enough).
The noise varies in time, sometimes wildly. The noise can sometimes be negligible,
but frequently it lowers the observed SUT performance in a trial.</t>

<t>In this model, SUT does not have a single performance value, it has a spectrum.
One end of the spectrum is the noiseless baseline,
the other end is a <em>noiseful performance</em>. In practice, trial results
close to the noiseful end of the spectrum happen only rarely.
The worse performance, the more rarely it is seen in a trial.</t>

<t>Focusing on DUT, the benchmarking effort should aim
at eliminating only the SUT noise from SUT measurement.
But that is not really possible, as there are no realistic enough models
able to distinguish SUT noise from DUT fluctuations.</t>

<t>However, assuming that a well-constructed SUT has the DUT as its
performance bottleneck, the &quot;DUT noiseless performance&quot; can be defined
as the noiseless end of SUT performance spectrum. (At least for
throughput. For other quantities such as latency there will be an
additive difference.) By this definition, DUT noiseless performance
also minimizes the impact of DUT fluctuations.</t>

<t>In this document, we reduce the &quot;DUT within SUT&quot; problem to estimating
the noiseless end of SUT performance spectrum from a limited number of
trial results.</t>

<t>Any improvements to throughput search algorithm, aimed for better
dealing with software networking SUT and DUT setup, should employ
strategies recognizing the presence of SUT noise, and allow discovery of
(proxies for) DUT noiseless performance
at different levels of sensitivity to SUT noise.</t>

</section>
<section anchor="repeatability-and-comparability"><name>Repeatability and Comparability</name>

<t><xref target="RFC2544"></xref> does not suggest to repeat throughput search. And from just one
throughput value, it cannot be determined how repeatable that value is.
In practice, poor repeatability is also the main cause of poor
comparability, e.g. different benchmarking teams can test the same SUT
but get different throughput values.</t>

<t><xref target="RFC2544"></xref> throughput requirements (60s trial, no tolerance to single frame loss)
force the search to fluctuate close the noiseful end of SUT performance
spectrum. As that end is affected by rare trials of significantly low
performance, the resulting throughput repeatability is poor.</t>

<t>The repeatability problem is the problem of defining a search procedure
which reports more stable results
(even if they can no longer be called &quot;throughput&quot; in <xref target="RFC2544"></xref> sense).
According to baseline (noiseless) and noiseful model, better repeatability
will be at the noiseless end of the spectrum.
Therefore, solutions to the &quot;DUT within SUT&quot; problem
will help also with the repeatability problem.</t>

<t>Conversely, any alteration to <xref target="RFC2544"></xref> throughput search
that improves repeatability should be considered
as less dependent on the SUT noise.</t>

<t>An alternative option is to simply run a search multiple times, and report some
statistics (e.g. average and standard deviation). This can be used
for &quot;important&quot; tests, but it makes the search duration problem even
bigger.</t>

</section>
<section anchor="throughput-with-non-zero-loss"><name>Throughput with Non-Zero Loss</name>

<t><xref target="RFC1242"></xref> (section 3.17) defines throughput as:
    The maximum rate at which none of the offered frames
    are dropped by the device.</t>

<t>and then it says:
    Since even the loss of one frame in a
    data stream can cause significant delays while
    waiting for the higher level protocols to time out,
    it is useful to know the actual maximum data
    rate that the device can support.</t>

<t>Contrary to that, many benchmarking teams settle with non-zero
(small) loss ratio as the goal for a &quot;throughput rate&quot;.</t>

<t>Motivations are many: modern protocols tolerate frame loss better;
trials nowadays send way more frames within the same duration;
impact of rare noise bursts is smaller as the baseline performance
can compensate somewhat by keeping the loss ratio below the goal;
if SUT noise with &quot;ideal DUT&quot; is known, it can be set as the loss ratio goal.</t>

<t>Regardless of validity of any and all similar motivations,
support for non-zero loss goals makes any search algorithm more user-friendly.
<xref target="RFC2544"></xref> throughput is not friendly in this regard.</t>

<t>Searching for multiple loss ratio goals also helps to describe the SUT
performance better than a single goal result. Repeated wide gap between
zero and non-zero loss loads indicates the noise has a large impact on
the overall SUT performance.</t>

<t>It is easy to modify the vanilla bisection to find a lower bound
for intended load that satisfies a non-zero-loss goal,
but it is not that obvious how to search for multiple goals at once,
hence the support for multiple loss goals remains a problem.</t>

</section>
<section anchor="inconsistent-trial-results"><name>Inconsistent Trial Results</name>

<t>While performing throughput search by executing a sequence of
measurement trials, there is a risk of encountering inconsistencies
between trial results.</t>

<t>The plain bisection never encounters inconsistent trials.
But <xref target="RFC2544"></xref> hints about possibility if inconsistent trial results in two places.
The first place is section 24 where full trial durations are required, presumably
because they can be inconsistent with results from shorter trial durations.
The second place is section 26.3 where two successive zero-loss trials
are recommended, presumably because after one zero-loss trial
there can be subsequent inconsistent non-zero-loss trial.</t>

<t>Examples include:</t>

<t><list style="symbols">
  <t>a trial at the same load (same or different trial duration) results
in a different packet loss ratio.</t>
  <t>a trial at higher load (same or different trial duration) results
in a smaller packet loss ratio.</t>
</list></t>

<t>Any robust throughput search algorithm needs to decide how to continue
the search in presence of such inconsistencies.
Definitions of throughput in <xref target="RFC1242"></xref> and <xref target="RFC2544"></xref> are not specific enough
to imply a unique way of handling such inconsistencies.</t>

<t>Ideally, there will be a definition of a quantity which both generalizes
throughput for non-zero-loss (and other possible repeatibility enhancements),
while being precise enough to force a specific way to resolve trial
inconsistencies.
But until such definition is agreed upon, the correct way to handle
inconsistent trial results remains an open problem.</t>

</section>
</section>
<section anchor="how-the-problems-are-addressed"><name>How the problems are addressed</name>

<t>Configurable loss ratio in MLRsearch search goals are ther
in direct support for non-zero-loss conditional throughput.
In practice the conditional throughput results&#39; stability
increases with higher loss ratio goals.</t>

<t>Multiple trials with noise tolerance enhancement,
as implemented in MLRsearch using goal exceed ratio,
also indirectly increases the result stability,
allows MLRsearch to achieve all the benefits
of Binary Search with Loss Verification,
as recommended in <xref target="RFC9004"></xref> (section 6.2)
and specified in <xref target="TST009"></xref> (section 12.3.3).</t>

<t>The main factor improving the overall search time is the introduction
of preceding targets.</t>

<t>In several places, MLRsearch is &quot;conservative&quot; when handling
(potentially) inconsistent results. This includes the requirement
for the relevant lower bound to be smaller than any upper bound,
the unequal handling of good and bad short trials,
and preference to lower load when choosing the winner among candidates.
While this does no guarantee good search stability
(goals focusing on higher loads may still invalidate existing bounds
simply by requiring larget min duration sums),
it lowers the change of SUT having an area of poorer performance
below the reported conditional througput loads.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>No requests of IANA.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>Benchmarking activities as described in this memo are limited to
technology characterization of a DUT/SUT using controlled stimuli in a
laboratory environment, with dedicated address space and the constraints
specified in the sections above.</t>

<t>The benchmarking network topology will be an independent test setup and
MUST NOT be connected to devices that may forward the test traffic into
a production network or misroute traffic to the test management network.</t>

<t>Further, benchmarking is performed on a &quot;black-box&quot; basis, relying
solely on measurements observable external to the DUT/SUT.</t>

<t>Special capabilities SHOULD NOT exist in the DUT/SUT specifically for
benchmarking purposes. Any implications for network security arising
from the DUT/SUT SHOULD be identical in the lab and in production
networks.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>Many thanks to Alec Hothan of OPNFV NFVbench project for thorough
review and numerous useful comments and suggestions.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>

&RFC1242;
&RFC2285;
&RFC2544;
&RFC9004;


    </references>

    <references title='Informative References'>

<reference anchor="TST009" target="https://www.etsi.org/deliver/etsi_gs/NFV-TST/001_099/009/03.04.01_60/gs_NFV-TST009v030401p.pdf">
  <front>
    <title>TST 009</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="FDio-CSIT-MLRsearch" target="https://csit.fd.io/cdocs/methodology/measurements/data_plane_throughput/mlr_search/">
  <front>
    <title>FD.io CSIT Test Methodology - MLRsearch</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="November"/>
  </front>
</reference>
<reference anchor="PyPI-MLRsearch" target="https://pypi.org/project/MLRsearch/0.4.0/">
  <front>
    <title>MLRsearch 0.4.0, Python Package Index</title>
    <author >
      <organization></organization>
    </author>
    <date year="2021" month="April"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA91965PbVpbf9/tXoORKiZxiUy3Z4x1rPySt14xqLdux2uMk
W1NTIAmSmAYBLgB2i07lf8/5ncd9AGBLM1ubpLK1u1YTwH2ce+55P66urlxf
9lXxMvtwqvryWBXZ903XZT/nfdlkH4u8Xe9dvlq1xT298v3PnfyyadZ1fqCv
Nm2+7a/Kot9erQ4Pu6tD1corV9ffuE3e0ysvrl98fXX9T1fPr50rj+3LrG9P
Xf/i+vq76xcub4v8ZdYcO/ewe5m9Kur1/pC3d2W9y35t5L9/bJvT0d09vMze
133R1kV/9QazunXev8zKets4t2429OrL7NRd5d26LN2xfJnR/3yVrfOafi2y
vG3zczYrt1leVdm56OZZ02b7vNtn+6ItXJb1zfolHtA/u6bt22LbveQhNsU2
J+B09IY9Px/kMf50+anfN+1Ll/H/XOl/M1oavfFhmf1LU3d9Xvfnunko17/5
5wLBD/m6LO4uvtS0tK3XZbem0zh3fXHo/KPikJfVy+xwJ5/+lzXeWq6bw/RK
/rzMfmqq/G4w/5/bvL9rBo8+P+t9e8QX0aSubtoDoc19AVD8/O718xffvNB/
vnjxh9/bP3//zTf6z++ur+mfDkcYfXn78ZZwQ8DZ5+2uoFPe9/2xe/ns2cPD
w7Lou3JJC3y2KSr6pH2GH/6665798O7PV/Txs+vr53+9/u47+i/939fL62+W
9MO318923V/1FXpyf/319TfXz4/L42YrU8k1eEKPM3r+hH5896Zsrl5/fH97
5TF/elnrruyX282ybJ6t6Wp0zw4FocSmqZrdmf6dd6e2OBR13z2jK5H/9Vjl
dfHXfk+IvdsfT/0zujV/lfGfJWt594aGzLCC7Lbo+uxDGDa7CtfxCX/kb9uL
q+fP6Zefzj+9/9zCj+ejwPLYNn8r1v0z//6z6yXBLV2Of5jxwwVNQeups5/y
9V2+K+h+bopPg8U8ByFwV1dXWb7q+jZf987d7ssuIzidAJOMpj42XdFl5YH+
eS+Awl37V8WWv2QBVJkuYHV2dC3LGgQiz+riIYtATpe+qorNJElTAjbze5kv
s9t9kRFW11mzAhAIqbqMUDIAmKhHgRUdaMJD+Rv9e1+4vunzKutxLptTi8Hr
hS0PXx9s9gqz8wtdltcb26dri47JSlscC3q6KquyP/MbdJ2OeZvLL0sATBd4
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
AAA=

-->

</rfc>

