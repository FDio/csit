..
   Copyright (c) 2019 Cisco and/or its affiliates.
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at:
..
       http://www.apache.org/licenses/LICENSE-2.0
..
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.


Target Audience
^^^^^^^^^^^^^^^

This note is targeted at downstream users interested
in replicating FD.io CSIT testbed environment
and running CSIT functional and performance tests.

Most of this note is also targeted to CSIT contributors,
explaining some less obvious actions needed to add new tests.

Purpose
^^^^^^^

FD.io CSIT code runs automated tests in FD.io CSIT lab
hosted by Linux Foundation Networking (LFN).
In order to interact with it properly,
CSIT code does hardcode a number of lab properties.

Luckily, such hardcoding is localized to few places,
so that downstream users can easily patch it for their lab specifics.

Such patching is also needed when CSIT contributors want to add support
for hardware newly added to (or just previously unused in) CSIT lab.

The following sections walk through the CSIT code areas that need to be patched
to address physical lab specifics.

Setup Instructions
^^^^^^^^^^^^^^^^^^

Package prerequisities
~~~~~~~~~~~~~~~~~~~~~~

FIXME: Add content here.

TODO: Do not forget "tox".

Topology files
~~~~~~~~~~~~~~

FIXME: Add content here.

NIC support
~~~~~~~~~~~

A physical machine in a lab can have several different NICs,
and users might want to run tests against multiple of them
in one pybot invocation.
In order for that to work (with readable results),
a different suite file has to be created for every
NIC+suite combination wanted.

Luckily, CSIT can now autogenerate such combinations
for most performance suites (from x710+ndrpdr suites present within ``tests/``
and assuming their directory contains an executable script
``regenerate_testcases.py``).

In order to tell CSIT which NICs to support, users should patch
``resources/libraries/python/Constants.py`` file.
Currently that means editing three dictionaries:
NIC_NAME_TO_LIMIT, NIC_NAME_TO_CODE, and NIC_NAME_TO_CRYPTO_HW
(although the last one will probably be removed soon-ish).
Existing code documentation should be clear enough,
if not please bring it up to the attention of CSIT committers.

CSIT executes tests using so-called "bootstrap" scripts;
although the botstrap scripts might be coupled
with FD.io jenkins jobs too tightly, preventing downstream users
from using the bootstrap scripts comfortably.
Code documentation in the bootstrap scripts should be clear enough,
for users who wish to use the bootstrap scrips anyway.
Suite autogeneration is one of many steps the bootstrap scripts execute.

An alternative way to prepare CSIT tests is to start autogeneration manually.
Command "tox -e autogen" has its main purpose in verifying
that the content of ``tests/`` directory satisfies all the requirements
for successful generation, but as a consequence
the command also populates ``generated/tests/`` directory
with the generated suites inside.

Users can launch their pybot against ``generated/tests/``
(or a subdirectory of interest) then, and it should work as expected.
As per usual, users are advised to look at the console output of the Jenkis job
executing the same (or similar) tests, search for the pybot command,
and see which command line arguments are used.

Test selection using tags
~~~~~~~~~~~~~~~~~~~~~~~~~

If users examine contents of ``generated/tests/`` directory, they can
use any static tag found there for test selection as per usual.

If users examine just contents of ``tests/`` directory, they can expect
that the autogenerated suites may replace NDRPDR tag with MRR or SOAK tag,
and NIC_Intel-X710 tag with other NIC_{nic_name} tag.

Technically, the autogeneration also rewrites test cases,
but the autogeneration fails if the source x710+ndrpdr suites
do not have the exact required test cases present already.

If users want to tweak some part of autogeneration
(for example if their NIC does not support jumbo frames),
they have to patch files in ``resources/libraries/python/autogen/``,
mainly the ``Regererator.py`` file.
