.. _autogen_methodology:

Suite Generation
^^^^^^^^^^^^^^^^

CSIT uses robot suite files to define tests.
However, not all suite files available for Jenkins jobs
(or manually started bootstrap scripts) are present in CSIT git repository.
The missing files are generated only when needed.

Autogen Library
~~~~~~~~~~~~~~~

There is a code generation layer implemented as Python library called "autogen",
called by various bash scripts.

It generates either the full extent of CSIT suites,
or a subset filtered by information about target environment.
In the latter case, we say autogen is deciding to "skip" a suite.

The suite files present in git act as templates for generation the rest.

Sources
~~~~~~~

The generated suites (and their contents) are affected by multiple information
sources, listed below.

Git Suites
----------

The suites present in git repository act as templates for generating suites.
One of autogen design principles is that any template suite should also act
as a full suite (no placeholders).

In practice, autogen deletes the template suite after reading it,
and possibly re-creates it (if not skipped based on environment information).
If a suite is not skipped, the re-created content is the same.
It is one of checks that autogen works correctly.

Environment Variables
---------------------

The autogen behavior depends on values (or non-presence/emptiness)
of two environment variables:

TEST_CODE
_________

Any user-specified value, but usually set to Jenkins job name.
For example, if the job name implies perf VPP tests on 2n-icx,
autogen can skip 3-node, device, DPDK and TRex tests.

On the other hand, autogen takes care to not skip any suite
when run from tox verify job (so all possible inconsistencies can be detected).

WORKING_TOPOLOGY
________________

Path to a topology YAML file of the currently reserved performance testbed.

The file is read, parsed, and the info there allows autogen more skip decisions,
e.g. related to whether the required links are present for any NIC
(TG-TG link for TRex test and DUT-DUT double link for 2-link bonding).

Regenerate Script
-----------------

Not all suites present in CSIT git repository act as template for autogen.
Typically, the layered initialization using __init__.robot is not generated.
The distinction is on per-directory level. Directories with
regenerate_testcases.py script usually consider all suites as templates
(unless possibly not included by the glob patten in the script,
e.g. when the directory also contains the __init__.robot file).

The script also specifies minimal frame size, indirectly, by specifying protocol
(protocol "ip4" is the default, leading to 64B frame size).

Higher Level Scripts
____________________

For example bootstrap scripts called by Jenkins jobs, or checker script
called by tox.

Strictly speaking, they are not affecting autogen directly,
except possibly processing the environment variables.
But they usually copy suites (from tests/ to generated/tests/)
so any deletions or overwrites done by autogen do not affect the suites in git.

Constants
---------

Values in Constants.py are taken into consideration when generating suites.
The values are mostly related to different NIC models
and NIC drivers suitable for each.

Python Code
-----------

Python code in resources/libraries/python/autogen contains several other
information sources.

Testcase Templates
__________________

The test case part of template suite is ignored, test case lines
are created according to text templates in Testcase.py file.

Testcase Argument Lists
_______________________

Each testcase template has different number of "arguments", e.g. values
to put into various placeholders. Different test types need different
lists of the argument values, the lists are in regenerate_glob method
in Regenerator.py file.

Iteration Over Values
_____________________

Python code detects the test type (usually by substrings of suite file name),
then iterates over different quantities based on type.
For example, only ndrpdr suite templates generate other types (mrr and soak).

Hardcoded Exclusions
____________________

Some combinations of values are known not to work, so they are excluded.
Examples: Density tests for too much CPUs; IMIX for ASTF.

The effects of environment variables are applied using Filt class.

Non-Sources
~~~~~~~~~~~

Some information sources are available (in principle) when tests are generated,
but do not affect the suites generated by autogen.

Adding these sources in future autogen versions is possible,
if the time gains are worth the coding effort.

Testbed Architecture
--------------------

Historically, suite files are agnostic to testbed architecture, e.g. ICX or ALT.

That means this part of TEST_CODE currently has no effect.

Job Specs
---------

Currently, the information in job spec files depends on generated suites
(not the other way around).

In future, higher level scripts may expose this information,
so autogen skips unneeded suites.

Tag Expressions
---------------

Jobs triggered manually allow users to provide tag expressions to select tests.
Bootstrap scripts may alter the expressions for convenience and safety reasons.

In future, autogen could use this information to skip unneeded tests.
