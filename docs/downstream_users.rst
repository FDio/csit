..
   Copyright (c) 2019 Cisco and/or its affiliates.
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at:
..
       http://www.apache.org/licenses/LICENSE-2.0
..
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.


Who
^^^

Downstream users of CSIT are people, typically with acces to a lab,
and they want to run CSIT performance tests there.

What
^^^^

Unfortunatelly, CSIT code needs to hardcode some properties of
CSIT lab in order to interact with it properly.

Luckily, such hardcoding is localized to few places,
so downstream users can patch it for their lab specifics.

How
^^^

Package prerequisities
~~~~~~~~~~~~~~~~~~~~~~

FIXME: Add content here.

TODO: Do not forget "tox".

Topology files
~~~~~~~~~~~~~~

FIXME: Add content here.

NIC support
~~~~~~~~~~~

A physical machine in a lab can have multiple different NICs,
and users might want to run tests against multiple of them
in one pybot invocation.
In order for that to work (with readable results),
a different suite file has to be created for every
NIC+suite combination wanted.

Luckily, CSIT can now autogenerate such combinations
for most performance suites (from x710+ndrpdr suites present in tests/).
In order to tell CSIT which NICs to support, users should patch file
resources/libraries/python/Constants.py
Currently that means editing three dictionaries:
NIC_NAME_TO_LIMIT, NIC_NAME_TO_CODE, and NIC_NAME_TO_CRYPTO_HW
(although the last one will probably be removed soon-ish).
See comments in the code, it should be sufficiently describing
(if not, tell CSIT committers to improve it).

CSIT executes tests using so-called "bootstrap" scripts,
but they are probably too tightly coupled with FD.io jenkins jobs
for users to use them comfortably.

An alternative way is to start autogeneration manually.
Command "tox -e autogen" has main purpose of verifying
that the content of tests/ satisfies all the requirements
for successful generation, but as a consequence
it also populates generated/tests/ directory with the generated suites.

Users can launch their pybot against generated/tests/
(or a subdirectory of interest) then, and it should work as expected.

Test selection using tags
~~~~~~~~~~~~~~~~~~~~~~~~~

If users examine contents of generated/tests/, they can use any static tag
found there for test selection a usual.

If users examine just contents of tests/, they can expect
that the autogenerated suites may replace NDRPDR tag with MRR or SOAK tag,
and NIC_Intel-X710 tag with other NIC_{nic_name} tag.

Technically, the autogeneration also rewrites test cases,
but the autogeneration fails if the source x710+ndrpdr suites
do not have the exact test cases already.

If users want to tweak some part of autogeneration
(for example if their NIC does not support jumbo frames),
they have to patch files in resources/libraries/python/autogen/,
mainly the Regererator.py file.
