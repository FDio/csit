{
  "comments": [
    {
      "key": {
        "uuid": "7ded1777_2764db06",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-09T16:41:35Z",
      "side": 1,
      "message": "In this scenario users usually just use synchronous calls. Async tests are sometimes done with at most a number (e.g. 2 or 10) calls open simultaneously, simulating the same number of users, each issuing commands sequentially only with respect to self, not other users. Number\u003d1 is still tested, just to compare with sync calls.",
      "range": {
        "startLine": 39,
        "startChar": 12,
        "endLine": 39,
        "endChar": 61
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb048fce_4e801dc1",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 576
      },
      "writtenOn": "2019-05-10T08:32:47Z",
      "side": 1,
      "message": "Good point",
      "parentUuid": "7ded1777_2764db06",
      "range": {
        "startLine": 39,
        "startChar": 12,
        "endLine": 39,
        "endChar": 61
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ef397d3_fc97cdd8",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 576
      },
      "writtenOn": "2019-05-09T12:24:26Z",
      "side": 1,
      "message": "Do we necessarily need to remove the lowest and highest value? Removing outliers seems better, for example using the three sigma rule.\n\nVratko, thoughts?",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 44,
        "endChar": 78
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64d4d0c7_95589ad6",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-09T16:41:35Z",
      "side": 1,
      "message": "The simplest solution is to just compute the average without removing anything.\nIt also directly corresponds to aggregate duration, which is kind of \"configuration throughput\", and most users are mostly concerned with that.\n(Unless they are concerned with \"configuration latency\", which is harder to quantify.)",
      "parentUuid": "8ef397d3_fc97cdd8",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 44,
        "endChar": 78
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b85fc91d_98de063e",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 576
      },
      "writtenOn": "2019-05-10T08:32:47Z",
      "side": 1,
      "message": "Ok, let\u0027s not worry about outliers. There won\u0027t be any the vast majority of time anyway.\n\nConfiguration throughput is straightforward (how much we configure in some amount of time). What would configuration latency be? Some delay introduced by the API client?",
      "parentUuid": "64d4d0c7_95589ad6",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 44,
        "endChar": 78
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c83081fb_ae7016ee",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-10T12:25:26Z",
      "side": 1,
      "message": "Throughput is when you have a large bulk of configuration changes, you start pushing them, and you verify only at the end.\nLatency is if you verify after each smaller chunk.\nBut I should have used vocabulary from databases (infrequent vs frequent commits) instead of networking vocabulary.",
      "parentUuid": "b85fc91d_98de063e",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 44,
        "endChar": 78
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91b7b055_d0df081b",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 576
      },
      "writtenOn": "2019-05-10T13:15:12Z",
      "side": 1,
      "message": "Ah, okay.\n\nWe\u0027ll have chunks of different sizes, so this will tested (at least somewhat).",
      "parentUuid": "c83081fb_ae7016ee",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 44,
        "endChar": 78
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "618ec821_1564d981",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-09T16:41:35Z",
      "side": 1,
      "message": "number",
      "range": {
        "startLine": 51,
        "startChar": 33,
        "endLine": 51,
        "endChar": 34
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "939ece53_140cea46",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 576
      },
      "writtenOn": "2019-05-09T12:24:26Z",
      "side": 1,
      "message": "Do we need to do validation (I assume this is the validation that the data were actually properly configured)? That seems like something functional tests should be doing and thus would be superfluous here.",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 65,
        "endChar": 7
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d209ab6c_533696da",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-09T16:41:35Z",
      "side": 1,
      "message": "There may be bugs which only appear with increased scale of configuration items. Functional tests are not going to find those.\n\nI have seen many such bugs on OpenDaylight, one it even looked like an improvement in performance (most of times they looked like a decrease of performance, sometimes it lead to crash).\n\nValidation is usualy cheap and useful, so we shuld do it.",
      "parentUuid": "939ece53_140cea46",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 65,
        "endChar": 7
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "654f0162_a8dd52fb",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 576
      },
      "writtenOn": "2019-05-10T08:32:47Z",
      "side": 1,
      "message": "Makes sense.",
      "parentUuid": "d209ab6c_533696da",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 65,
        "endChar": 7
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5246d4da_f96697e9",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 87,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-09T16:41:35Z",
      "side": 1,
      "message": "No. Most people just assume the results come from latest build.",
      "range": {
        "startLine": 87,
        "startChar": 31,
        "endLine": 87,
        "endChar": 54
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1ea751a_d2b8fcfb",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 87,
      "author": {
        "id": 576
      },
      "writtenOn": "2019-05-10T08:32:47Z",
      "side": 1,
      "message": "This shouldn\u0027t be a problem if we label the results clearly.\n\nTo be more precise -  we want to test the latest versions of API clients, so there the assumption would hold.\n\nThe problem is with VPP. If we don\u0027t lock its version, we\u0027ll have two variables that change and we won\u0027t necessarily know which one of those is responsible for regressions/progressions. We\u0027d probably be able to figure it out by looking at commit history, but anyone else looking at the results might be confused.\n\nAnother thing with using just latest VPP is that the different jobs would be using different VPP versions and again we won\u0027t have a clean comparison.\n\nI\u0027m not sure about the best solution, but using the CSIT approach of locking VPP version seems good to me. Falling back to latest VPP in case of an API mismatch is just a cherry on top.",
      "parentUuid": "5246d4da_f96697e9",
      "range": {
        "startLine": 87,
        "startChar": 31,
        "endLine": 87,
        "endChar": 54
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3225362f_9070cc45",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-09T16:41:35Z",
      "side": 1,
      "message": "Yes.",
      "range": {
        "startLine": 88,
        "startChar": 52,
        "endLine": 88,
        "endChar": 69
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3a1bf91_77af13e8",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 576
      },
      "writtenOn": "2019-05-10T08:32:47Z",
      "side": 1,
      "message": "Ok, no cherries on top. Definitely not needed in the early stages - we can always revisit this later.",
      "parentUuid": "3225362f_9070cc45",
      "range": {
        "startLine": 88,
        "startChar": 52,
        "endLine": 88,
        "endChar": 69
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a821a0a_2379f118",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 97,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-09T16:41:35Z",
      "side": 1,
      "message": "We should test every deployment a client supports, if there is enough machine time for that.",
      "range": {
        "startLine": 97,
        "startChar": 14,
        "endLine": 97,
        "endChar": 27
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be0c41cc_607b3e18",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 122,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-09T16:41:35Z",
      "side": 1,
      "message": "Actually, there are two protocols. \"binary calls\" is the protocol between client under test and VPP, types are listed in line 124.\n\nBut there is also protocol beween user and client under test. For PAPI, \"user\" will probably be a small script preparing data and performing Python function calls on the PAPI library.\nPython calls are not binary calls, as Python is (mostly) interpreted language.\n\nIn some cases, performance of user logic, or of user-client interface may be the overall bottleneck.",
      "range": {
        "startLine": 122,
        "startChar": 45,
        "endLine": 122,
        "endChar": 64
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "687df238_300e85dc",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 122,
      "author": {
        "id": 576
      },
      "writtenOn": "2019-05-10T08:32:47Z",
      "side": 1,
      "message": "I\u0027ll put PAPI python calls here, since that\u0027s what we\u0027ll be calling and PAPI will take care of binary calls over shm or a socket.",
      "parentUuid": "be0c41cc_607b3e18",
      "range": {
        "startLine": 122,
        "startChar": 45,
        "endLine": 122,
        "endChar": 64
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c2da864_49f44c2f",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 124,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-09T16:41:35Z",
      "side": 1,
      "message": "CSIT is planning to use socket tunneled over SSH (to a remote machine), so \"socket over ssh\" may be an interesting option, both on the same machine and between two remote machines.",
      "range": {
        "startLine": 124,
        "startChar": 43,
        "endLine": 124,
        "endChar": 44
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce50fe26_19624352",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 124,
      "author": {
        "id": 576
      },
      "writtenOn": "2019-05-10T08:32:47Z",
      "side": 1,
      "message": "Ok, I\u0027ll add socket over ssh.\n\nWhat\u0027s the point of testing socket over ssh when both PAPI and VPP are on the same host? Noone would use this in real world, since the tunnel is superfluous.",
      "parentUuid": "8c2da864_49f44c2f",
      "range": {
        "startLine": 124,
        "startChar": 43,
        "endLine": 124,
        "endChar": 44
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36880dbb_1b879275",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 124,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-10T12:25:26Z",
      "side": 1,
      "message": "Noone would use client on the same host as VPP, when socket is lighter than any of them (and \"user\" is some kind of orchestrator residing on remote machine anyway).\nWe should be testing socket over ssh for both local and remote case.\n\nThe local socket over ssh test is just a middle groud to measure how big a bottleneck ssh itself is (by comparing to direct socket), without additional delay of remote networking).",
      "parentUuid": "ce50fe26_19624352",
      "range": {
        "startLine": 124,
        "startChar": 43,
        "endLine": 124,
        "endChar": 44
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "595fe16a_6661bd24",
        "filename": "docs/cppt/index.rst",
        "patchSetId": 5
      },
      "lineNbr": 124,
      "author": {
        "id": 576
      },
      "writtenOn": "2019-05-10T13:15:12Z",
      "side": 1,
      "message": "Okay, so we\u0027ll measure what delay ssh introduces. It all comes down to physical resources, but no harm in documenting it.",
      "parentUuid": "36880dbb_1b879275",
      "range": {
        "startLine": 124,
        "startChar": 43,
        "endLine": 124,
        "endChar": 44
      },
      "revId": "d3117b1737e44ad7aaea8d197877a2354cdec21b",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}