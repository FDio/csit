---
name: "🛠️ Setup Executor Environment"
description: |
  This GitHub Action prepares FD.io executor environment.

outputs:
  OS_ID:
    description: "Operating system ID"
    value: ${{ steps.attributes.outputs.OS_ID }}
  OS_VERSION_ID:
    description: "Operating system Version ID"
    value: ${{ steps.attributes.outputs.OS_VERSION_ID }}
  OS_ARCH:
    description: "Operating system architecture"
    value: ${{ steps.attributes.outputs.OS_ARCH }}

runs:
  using: "composite"
  steps:
    - name: "GitHub Runner Attributes"
      id: attributes
      shell: bash
      run: |
        . /etc/os-release
        OS_ARCH=$(uname -m)

        echo "OS: ${ID:-unknown}-${VERSION_ID:-unknown}"
        echo "Arch: ${OS_ARCH}"
        echo "GitHub Runner: ${RUNNER_NAME:-Unknown}"
        echo "GitHub Workflow: ${GITHUB_WORKFLOW:-Unknown}"
        echo "GitHub Run ID: ${GITHUB_RUN_ID:-Unknown}"
        echo "Runner Hostname: $(hostname)"

        # Set GitHub Outputs
        echo "OS_ID=$ID" >> "$GITHUB_ENV"
        echo "OS_ID=$ID" >> "$GITHUB_OUTPUT"
        echo "OS_VERSION_ID=$VERSION_ID" >> "$GITHUB_ENV"
        echo "OS_VERSION_ID=$VERSION_ID" >> "$GITHUB_OUTPUT"
        echo "OS_ARCH=$OS_ARCH" >> "$GITHUB_ENV"
        echo "OS_ARCH=$OS_ARCH" >> "$GITHUB_OUTPUT"

    - name: "GitHub Actions Environment"
      id: environment
      shell: bash
      run: |
        echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE:-Not set}"
        echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY:-Not set}"
        echo "GITHUB_REF: ${GITHUB_REF:-Not set}"
        echo "GITHUB_SHA: ${GITHUB_SHA:-Not set}"
        echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME:-Not set}"

    - name: "Show Python Packages"
      id: python_packages
      shell: bash
      run: |
        pip3 list 2>/dev/null | column -t || true

    - name: "Show OS Packages"
      id: os_packages
      shell: bash
      run: |
        if [ "${OS_ID}" = "ubuntu" ] || [ "${OS_ID}" = "debian" ]; then
          dpkg-query -W -f='${binary:Package}\t${Version}\n' | column -t || true
        elif [ "${OS_ID}" = "centos" ]; then
          yum list installed || true
        else
          echo "Unsupported OS for package listing"
        fi

    - name: "Setup ccache"
      id: ccache_packages
      shell: bash
      run: |
        downloads_cache="/root/Downloads"

        # Toggle envs (can be overridden from workflow)
        : "${VERBOSE_PACKAGES:=1}"      # 1 to list installed OS packages
        : "${VERBOSE_PY:=1}"            # 1 to list python packages
        : "${CCACHE_MAXSIZE:=20G}"      # Max ccache size
        : "${CCACHE_COMPILERCHECK:=content}" # Safer compiler change detection

        if command -v ccache >/dev/null 2>&1; then
          # Ensure CCACHE_DIR is set and exists
          if [ -z "${CCACHE_DIR:-}" ]; then
            # Derive a default if not provided (caller may pass one via env)
            CCACHE_DIR="/scratch/ccache/${OS_ID}-${OS_VERSION_ID}-${OS_ARCH}"
            export CCACHE_DIR
          fi
          if [ ! -d "${CCACHE_DIR}" ]; then
            echo "Creating CCACHE_DIR='${CCACHE_DIR}'"
            if ! mkdir -p "${CCACHE_DIR}" 2>/dev/null; then
              echo "Failed to create CCACHE_DIR; disabling ccache"
              export CCACHE_DISABLE=1
            fi
          fi
          if [ -z "${CCACHE_DISABLE:-}" ]; then
            export CCACHE_MAXSIZE CCACHE_COMPILERCHECK
            echo "ccache enabled: dir='${CCACHE_DIR}' max='${CCACHE_MAXSIZE}' compilercheck='${CCACHE_COMPILERCHECK}'"
            echo "Initial ccache stats:"; ccache -s || true
          else
            echo "ccache explicitly disabled (CCACHE_DISABLE='${CCACHE_DISABLE}')"
          fi
        else
          echo "WARNING: ccache is not installed (will proceed without caching)"
          export CCACHE_DISABLE=1
        fi

        downloads_cache="${GITHUB_WORKSPACE:-/github/workspace}/.cache"
        mkdir -p "${downloads_cache}" 2>/dev/null || true