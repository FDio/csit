{
  "comments": [
    {
      "key": {
        "uuid": "f8ced2f9_47d4c4e1",
        "filename": "bootstrap-verify-perf.sh",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1263
      },
      "writtenOn": "2018-07-31T10:54:38Z",
      "side": 1,
      "message": "I see several points for API to define. At Jenkins level, we are using JOB_NAME, GERRIT_EVENT_TYPE and GERRIT_EVENT_COMMENT_TEXT. At start of this bootstrap we are using JOB_NAME and TEST_TAG. Inside this file we are using TOPOLOGIES, DUT and TAGS. When launching pybot we are using --suites, --include and --exclude.\n\nWhen thinking about a better system, I end up with the following. For pybot, --suites should encompass everything we have (including functional tests), all selection to be done by tags. That means no DUT inside this file, just more tags.\nI think it would be better for users if we move Jenkins related stuff to a separate wrapper script, which would convert JOB_NAME and GERRIT_EVENT_COMMENT_TEXT into corresponding tag list. Bootstrap will then only examine the tag list, fail if multiple topology types are implied, download any artifacts needed, and start pybot (under reservation).",
      "range": {
        "startLine": 36,
        "startChar": 14,
        "endLine": 36,
        "endChar": 19
      },
      "revId": "b968545ee15533414f6d1d57d4f54b68d7cdaddd",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "66d170eb_8d16ae46",
        "filename": "bootstrap-verify-perf.sh",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 76
      },
      "writtenOn": "2018-07-31T12:34:48Z",
      "side": 1,
      "message": "Lets see yes, still this is work in progress. I see it in several steps.\nPhase1: remove installation of VPP and add routine for cleanup/transfer, merge DPDK here. (kubernetes later but that will be similar)\n\nPhase2: start to think about your proposal how to adress Jenkins/localhost problem. Example: topologies can be easily solved by reading content (hierarchical) base on criteria from directory /topo/enabled/perf/\u003c#node\u003e/\u003carch\u003e. So if user will chose 3n-skx it will load topologies from Dir (disabling topologies is than only about move then into disabled dir). (few lines lighter). NIC tags can be discovered from topology files (this i will add later). Then it is only about converting Jenkins VARs into some imput scheme like $1\u003d\"csit-3n-skx-perftest vhost\". So we can get out needed.\n\nThere are two options: 1) leave jenkins part in jenkins but put output as parameter to this (or env var); 2) Move logic there but gerrit trigger will be parameter.\nOf course using GERRIT_* or JENKINS_* is tabu here. But i think no reason to wrap by another script sitting in CSIT. Wrap can be part of jenkins scripts. So anyone running this bootstrap can usi it by parameters and there will be no reference back to jenkins.\n\nFunctional: VIRL i do not care, not worth of it now. New VPP_device yes, but so far we do not know how it will look like.",
      "parentUuid": "f8ced2f9_47d4c4e1",
      "range": {
        "startLine": 36,
        "startChar": 14,
        "endLine": 36,
        "endChar": 19
      },
      "revId": "b968545ee15533414f6d1d57d4f54b68d7cdaddd",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7fad543a_0a8afa57",
        "filename": "bootstrap-verify-perf.sh",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1263
      },
      "writtenOn": "2018-07-31T14:47:54Z",
      "side": 1,
      "message": "\u003e no reason to wrap by another script sitting in CSIT\n\nWe already do have wrapper scripts like that (e.g. include-raw-csit-vpp-perf-verify.sh), but they are sitting in ci-management repository, where they are harder to maintain.\n\n\u003e some imput scheme like $1\u003d\"csit-3n-skx-perftest vhost\"\n\nOf course, if bootstrap understands this kind of input, the wrapper becomes just:\n  ./bootstrap.sh \"${GERRIT_EVENT_COMMENT_TEXT}\"\nwhich is simple enough to be left in ci-management.",
      "parentUuid": "66d170eb_8d16ae46",
      "range": {
        "startLine": 36,
        "startChar": 14,
        "endLine": 36,
        "endChar": 19
      },
      "revId": "b968545ee15533414f6d1d57d4f54b68d7cdaddd",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "041c6c80_047f0828",
        "filename": "bootstrap-verify-perf.sh",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 76
      },
      "writtenOn": "2018-07-31T16:40:13Z",
      "side": 1,
      "message": "Yes, i meant something like\n./bootstrap.sh \"${GERRIT_EVENT_COMMENT_TEXT}\"\nbut we need to convert daily jobs to this format, but that is easy.\n\nThis basically develop an trajectory where input to this script is unique string that can be parsed (processed) so bootstrap will know what to download, where to run, what to run. With TAGs processing we have now and testbed selection it is easy to target non-perf tests as well, non-vpp test, ...",
      "parentUuid": "7fad543a_0a8afa57",
      "range": {
        "startLine": 36,
        "startChar": 14,
        "endLine": 36,
        "endChar": 19
      },
      "revId": "b968545ee15533414f6d1d57d4f54b68d7cdaddd",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}