From 06d3839fe281853e72c318e7d5bdd861bed00879 Mon Sep 17 00:00:00 2001
From: xinfeng zhao <xinfengx.zhao@intel.com>
Date: Thu, 23 Sep 2021 10:14:09 +0800
Subject: [PATCH] test flow

Signed-off-by: xinfeng zhao <xinfengx.zhao@intel.com>
Change-Id: I9dd3d08955c488037e4e896cf57b8c872ad4fb61
---
 GPL/traffic_scripts/send_flow_packet.py       | 109 +++
 docs/job_specs/vpp_device/vpp-1n-skx.md       | 167 +----
 docs/tag_documentation.rst                    |   4 +
 resources/api/vpp/supported_crcs.yaml         |   8 +
 resources/libraries/bash/function/common.sh   |   4 +
 resources/libraries/python/FlowUtil.py        | 621 ++++++++++++++++++
 .../libraries/robot/shared/default.robot      |   1 +
 .../libraries/robot/shared/traffic.robot      |  53 ++
 ...0ge2p1x710-ethip4-flow-ip4-tcp-scapy.robot | 112 ++++
 ...0ge2p1x710-ethip4-flow-ip4-udp-scapy.robot | 112 ++++
 tests/vpp/device/flow/regenerate_testcases.py |  18 +
 11 files changed, 1053 insertions(+), 156 deletions(-)
 create mode 100644 GPL/traffic_scripts/send_flow_packet.py
 create mode 100644 resources/libraries/python/FlowUtil.py
 create mode 100644 tests/vpp/device/flow/2n1l-10ge2p1x710-ethip4-flow-ip4-tcp-scapy.robot
 create mode 100644 tests/vpp/device/flow/2n1l-10ge2p1x710-ethip4-flow-ip4-udp-scapy.robot
 create mode 100755 tests/vpp/device/flow/regenerate_testcases.py

diff --git a/GPL/traffic_scripts/send_flow_packet.py b/GPL/traffic_scripts/send_flow_packet.py
new file mode 100644
index 000000000..0807b9e67
--- /dev/null
+++ b/GPL/traffic_scripts/send_flow_packet.py
@@ -0,0 +1,109 @@
+#!/usr/bin/env python3
+
+# Copyright (c) 2021 Intel and/or its affiliates.
+#
+# SPDX-License-Identifier: Apache-2.0 OR GPL-2.0-or-later
+#
+# Licensed under the Apache License 2.0 or
+# GNU General Public License v2.0 or later;  you may not use this file
+# except in compliance with one of these Licenses. You
+# may obtain a copy of the Licenses at:
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#     https://www.gnu.org/licenses/old-licenses/gpl-2.0-standalone.html
+#
+# Note: If this file is linked with Scapy, which is GPLv2+, your use of it
+# must be under GPLv2+.  If at any point in the future it is no longer linked
+# with Scapy (or other GPLv2+ licensed software), you are free to choose Apache 2.
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+"""Traffic script that send flow packet from one interface
+to the other.
+"""
+
+import sys
+
+from scapy.layers.inet import IP, UDP, TCP
+from scapy.layers.inet6 import IPv6
+from scapy.layers.l2 import Ether, ARP
+from scapy.packet import Raw
+from scapy.contrib.gtp import *
+from scapy.layers.ipsec import ESP, AH
+from scapy.layers.vxlan import VXLAN
+from scapy.layers.l2tp import L2TP
+
+from .PacketVerifier import TxQueue
+from .TrafficScriptArg import TrafficScriptArg
+
+
+def main():
+    """Send packet from one traffic generator interface to the other."""
+
+    args = TrafficScriptArg(
+        [
+            u"tg_if1_mac", u"dut_if1_mac", u"flow_type", u"proto",
+        ],
+        [
+            u"src_ip", u"dst_ip", u"src_port", u"dst_port", u"value"
+        ]
+    )
+    tx_if = args.get_arg(u"tx_if")
+    tx_src_mac = args.get_arg(u"tg_if1_mac")
+    tx_dst_mac = args.get_arg(u"dut_if1_mac")
+    flow_type = args.get_arg(u"flow_type")
+    proto = args.get_arg(u"proto")
+
+    src = args.get_arg(u"src_ip")
+    dst = args.get_arg(u"dst_ip")
+    sport = eval(args.get_arg(u"src_port"))
+    dport = eval(args.get_arg(u"dst_port"))
+    value = eval(args.get_arg(u"value"))
+
+    txq = TxQueue(tx_if)
+
+    if flow_type == u"IP4":
+        pkt_raw = (Ether(src=tx_src_mac, dst=tx_dst_mac) /
+                IP(src=src, dst=dst))
+    elif flow_type == u"IP6":
+        pkt_raw = (Ether(src=tx_src_mac, dst=tx_dst_mac) /
+                IPv6(src=src, dst=dst))
+    elif flow_type == u"ETHER":
+        pkt_raw = Ether(src=tx_src_mac, dst=tx_dst_mac)
+    else:
+        raise ValueError(f"Flow type error: {flow_type}")
+
+    if proto == u"TCP":
+        pkt_raw /= TCP(sport=sport, dport=dport)
+    elif proto == u"UDP":
+        pkt_raw /= UDP(sport=sport, dport=dport)
+    elif proto == u"AH":
+        pkt_raw /= AH(spi=value)
+    elif proto == u"ESP":
+        pkt_raw /= ESP(spi=value)
+    elif proto == u"GTPU":
+        pkt_raw /= (UDP()/GTP_U_Header(teid=value)/IP(src=u"192.168.10.20"))
+    elif proto == u"L2TPV3":
+        import binascii
+        value_hex = hex(value).replace('0x', (8-len(hex(value))+2)*'0')
+        session_id = binascii.a2b_hex(value_hex)
+        pkt_raw.proto = 115
+        pkt_raw /= Raw(session_id)
+    elif proto == u"VXLAN":
+        pkt_raw /= (UDP()/VXLAN(vni=value))
+    elif proto == u"ARP":
+        pkt_raw.type = value
+        pkt_raw /= ARP()
+    else:
+        raise ValueError(f"Flow proto error: {proto}")
+
+    pkt_raw /= Raw()
+    txq.send(pkt_raw)
+    sys.exit(0)
+
+if __name__ == u"__main__":
+    main()
diff --git a/docs/job_specs/vpp_device/vpp-1n-skx.md b/docs/job_specs/vpp_device/vpp-1n-skx.md
index 175520fc4..a79ff9a12 100644
--- a/docs/job_specs/vpp_device/vpp-1n-skx.md
+++ b/docs/job_specs/vpp_device/vpp-1n-skx.md
@@ -1,158 +1,13 @@
 # 1n-skx
-## ./container_memif
-### intel-x710
-#### dpdk-vfio-pci
-##### ethip4-l2xcbase-eth-2memif-1dcr
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-l2xcbase-eth-2memif-1dcr
-##### ethip4-l2bdbasemaclrn-eth-2memif-1dcr
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-l2bdbasemaclrn-eth-2memif-1dcr
-##### ethip4-ip4base-eth-2memif-1dcr
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-ip4base-eth-2memif-1dcr
-## ./crypto/ethip4
-### intel-x710
-#### dpdk-vfio-pci
-##### ethip4ipsec1tnlsw-ip4base-int-aes128cbc-hmac512sha
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4ipsec1tnlsw-ip4base-int-aes128cbc-hmac512sha
-##### ethip4ipsec11tnlsw-ip4base-int-aes128cbc-hmac512sha
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4ipsec11tnlsw-ip4base-int-aes128cbc-hmac512sha
-##### ethip4ipsec1tnlsw-ip4base-policy-aes128cbc-hmac512sha
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4ipsec1tnlsw-ip4base-policy-aes128cbc-hmac512sha
-##### ethip4ipsec1tptsw-ip4base-policy-aes128cbc-hmac512sha
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4ipsec1tptsw-ip4base-policy-aes128cbc-hmac512sha
-## ./crypto/ethip6
-### intel-x710
-#### dpdk-vfio-pci
-##### ethip6ipsec1tnlsw-ip6base-policy-aes128cbc-hmac512sha
-0c AND 78b AND scapy AND x710 AND drv_vfio_pci AND ethip6ipsec1tnlsw-ip6base-policy-aes128cbc-hmac512sha
-##### ethip6ipsec1tptsw-ip6base-policy-aes128cbc-hmac512sha
-0c AND 78b AND scapy AND x710 AND drv_vfio_pci AND ethip6ipsec1tptsw-ip6base-policy-aes128cbc-hmac512sha
-## ./interfaces
-### intel-x710
-#### dpdk-vfio-pci
-##### ethicmp4-ip4base-eth-1tap
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethicmp4-ip4base-eth-1tap
-##### ethicmp4-ip4base-eth-1tap-namespace
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethicmp4-ip4base-eth-1tap-namespace
-##### ethip4-l2bdbasemaclrn-eth-2tap
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-l2bdbasemaclrn-eth-2tap
-## ./ip4
-### intel-x710
-#### dpdk-vfio-pci
-##### ethip4-ip4base-adlalwlistbase
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-ip4base-adlalwlistbase
-##### ethip4-ip4base-adlblklistbase
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-ip4base-adlblklistbase
-##### ethip4-ip4base
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-ip4base
-##### ethip4-ip4base-iacldstbase
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-ip4base-iacldstbase
-##### ethip4-ip4base-ipolicemarkbase
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-ip4base-ipolicemarkbase
-##### ethip4tcp-nat44det
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4tcp-nat44det
-##### ethip4tcp-nat44ed
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4tcp-nat44ed
-##### ethip4udp-nat44det
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4udp-nat44det
-##### ethip4udp-nat44ed
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4udp-nat44ed
-## ./ip4_tunnel/lisp
-### intel-x710
-#### dpdk-vfio-pci
-##### ethip4lisp-ip4base
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4lisp-ip4base
-##### ethip4lispgpe-ip4base
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4lispgpe-ip4base
-##### ethip4lispgpe-ip6base
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4lispgpe-ip6base
-## ./ip4_tunnel
-### intel-x710
-#### dpdk-vfio-pci
-##### ethip4--ethip4udpgeneve-1tun-ip4base
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4--ethip4udpgeneve-1tun-ip4base
-##### ethip4vxlan-l2bdbasemaclrn
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4vxlan-l2bdbasemaclrn
-##### ethip4vxlan-l2xcbase
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4vxlan-l2xcbase
-## ./ip6
-### intel-x710
-#### dpdk-vfio-pci
-##### ethip6-ip6base-adlalwlistbase
-0c AND 78b AND scapy AND x710 AND drv_vfio_pci AND ethip6-ip6base-adlalwlistbase
-##### ethip6-ip6base-adlblklistbase
-0c AND 78b AND scapy AND x710 AND drv_vfio_pci AND ethip6-ip6base-adlblklistbase
-##### ethip6-ip6base-iacldstbase
-0c AND 78b AND scapy AND x710 AND drv_vfio_pci AND ethip6-ip6base-iacldstbase
-##### ethip6-ip6base-ipolicemarkbase
-0c AND 78b AND scapy AND x710 AND drv_vfio_pci AND ethip6-ip6base-ipolicemarkbase
-##### ethip6-ip6base
-0c AND 78b AND scapy AND x710 AND drv_vfio_pci AND ethip6-ip6base
-## ./ip6_tunnels/lisp
-### intel-x710
-#### dpdk-vfio-pci
-##### ethip6lispgpe-ip4base
-0c AND 78b AND scapy AND x710 AND drv_vfio_pci AND ethip6lispgpe-ip4base
-##### ethip6lispgpe-ip6base
-0c AND 78b AND scapy AND x710 AND drv_vfio_pci AND ethip6lispgpe-ip6base
-## ./l2bd
-### intel-x710
+## ./flow
+### intel-e810cq
 #### avf
-##### ethip4-l2bdbasemaclrn
-0c AND 64b AND scapy AND x710 AND drv_avf AND ethip4-l2bdbasemaclrn
-#### dpdk-vfio-pci
-##### ethip4-l2bdbasemaclrn
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-l2bdbasemaclrn
-##### ethip4-l2bdbasemaclrn-iacl1sf
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-l2bdbasemaclrn-iacl1sf
-##### ethip4-l2bdbasemaclrn-iacl1sl
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-l2bdbasemaclrn-iacl1sl
-##### ethip4-l2bdbasemaclrn-macip-iacl1sl
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-l2bdbasemaclrn-macip-iacl1sl
-##### ethip4-l2bdbasemaclrn-oacl1sf
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-l2bdbasemaclrn-oacl1sf
-##### ethip4-l2bdbasemaclrn-oacl1sl
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-l2bdbasemaclrn-oacl1sl
-## ./l2patch
-### intel-x710
-#### dpdk-vfio-pci
-##### ethip4-l2patch
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-l2patch
-## ./l2xc
-### intel-x710
-#### dpdk-vfio-pci
-##### ethip4-l2xcbase
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-l2xcbase
-## ./srv6
-### intel-x710
-#### dpdk-vfio-pci
-##### ethip6ip6-ip6base-srv6enc1sid
-0c AND 78b AND scapy AND x710 AND drv_vfio_pci AND ethip6ip6-ip6base-srv6enc1sid
-##### ethip6srhip6-ip6base-srv6enc2sids
-0c AND 78b AND scapy AND x710 AND drv_vfio_pci AND ethip6srhip6-ip6base-srv6enc2sids
-##### ethip6srhip6-ip6base-srv6enc2sids-nodecaps
-0c AND 78b AND scapy AND x710 AND drv_vfio_pci AND ethip6srhip6-ip6base-srv6enc2sids-nodecaps
-##### ethip6srhip6-ip6base-srv6proxy-dyn
-0c AND 78b AND scapy AND x710 AND drv_vfio_pci AND ethip6srhip6-ip6base-srv6proxy-dyn
-##### ethip6srhip6-ip6base-srv6proxy-masq
-0c AND 78b AND scapy AND x710 AND drv_vfio_pci AND ethip6srhip6-ip6base-srv6proxy-masq
-##### ethip6srhip6-ip6base-srv6proxy-stat
-0c AND 78b AND scapy AND x710 AND drv_vfio_pci AND ethip6srhip6-ip6base-srv6proxy-stat
-## ./stats
-### intel-x710
-#### dpdk-vfio-pci
-##### ethip4-l2xcbase-stats
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-l2xcbase-stats
-## ./vm/ethip4
-### intel-x710
-#### dpdk-vfio-pci
-##### ethip4-ip4base-eth-2vhost-1vm
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-ip4base-eth-2vhost-1vm
-##### ethip4-l2bdbasemaclrn-eth-2vhost-1vm
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-l2bdbasemaclrn-eth-2vhost-1vm
-##### ethip4-l2xcbase-eth-2vhost-1vm
-0c AND 64b AND scapy AND x710 AND drv_vfio_pci AND ethip4-l2xcbase-eth-2vhost-1vm
-## ./vm/ethip6
-### intel-x710
-#### dpdk-vfio-pci
-##### ethip6-ip6base-eth-2vhost-1vm
-0c AND 78b AND scapy AND x710 AND drv_vfio_pci AND ethip6-ip6base-eth-2vhost-1vm
\ No newline at end of file
+##### ethip4-flow-ip4-tcp
+0c AND 64b AND scapy AND e810cq AND drv_avf AND ethip4-flow-ip4-tcp
+##### ethip4-flow-ip4-udp
+0c AND 64b AND scapy AND e810cq AND drv_avf AND ethip4-flow-ip4-udp
+#### dpdk-vfio-pci
+##### ethip4-flow-ip4-tcp
+0c AND 64b AND scapy AND e810cq AND drv_vfio_pci AND ethip4-flow-ip4-tcp
+##### ethip4-flow-ip4-udp
+0c AND 64b AND scapy AND e810cq AND drv_vfio_pci AND ethip4-flow-ip4-udp
diff --git a/docs/tag_documentation.rst b/docs/tag_documentation.rst
index b2130c1f2..b452c29ce 100644
--- a/docs/tag_documentation.rst
+++ b/docs/tag_documentation.rst
@@ -559,6 +559,10 @@ Encapsulation Tags
 
     All test cases with GENEVE tunnel in L3 mode.
 
+.. topic:: FLOW
+
+    All test cases with FLOW.
+
 Interface Tags
 --------------
 
diff --git a/resources/api/vpp/supported_crcs.yaml b/resources/api/vpp/supported_crcs.yaml
index 16c263bec..3d84b8256 100644
--- a/resources/api/vpp/supported_crcs.yaml
+++ b/resources/api/vpp/supported_crcs.yaml
@@ -96,6 +96,14 @@
     det44_session_dump: '0xe45a3af7'  # perf teardown
     # TODO: Which test to run to verify det44_* messages?
     # dhcp_proxy_dump / details # honeycomb
+    flow_add: '0xf946ed84'  # dev
+    flow_add_reply: '0x8587dc85'  # dev
+    flow_enable: '0x2024be69' # dev
+    flow_enable_reply: '0xe8d4e804' # dev
+    flow_disable: '0x2024be69' #dev
+    flow_disable_reply: '0xe8d4e804' #dev
+    flow_del: '0xb6b9b02c' #dev
+    flow_del_reply: '0xe8d4e804' #dev
     geneve_add_del_tunnel2: '0x8c2a9999'  # dev
     geneve_add_del_tunnel2_reply: '0x5383d31f'  # dev
     geneve_tunnel_details: '0x6b16eb24'  # dev
diff --git a/resources/libraries/bash/function/common.sh b/resources/libraries/bash/function/common.sh
index e56799e63..885957540 100644
--- a/resources/libraries/bash/function/common.sh
+++ b/resources/libraries/bash/function/common.sh
@@ -934,6 +934,10 @@ function select_tags () {
         *"1n-vbox"*)
             test_tag_array+=("!avf")
             test_tag_array+=("!vhost")
+            test_tag_array+=("!flow")
+            ;;
+        *"1n_tx2"*)
+            test_tag_array+=("!flow")
             ;;
         *"2n-skx"*)
             test_tag_array+=("!ipsechw")
diff --git a/resources/libraries/python/FlowUtil.py b/resources/libraries/python/FlowUtil.py
new file mode 100644
index 000000000..d3a033df2
--- /dev/null
+++ b/resources/libraries/python/FlowUtil.py
@@ -0,0 +1,621 @@
+# copyright (c) 2021 Intel and/or its affiliates.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at:
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+"""Flow Utilities Library."""
+
+from ipaddress import ip_address
+
+from resources.libraries.python.topology import NodeType, Topology
+from resources.libraries.python.ssh import exec_cmd_no_error
+from resources.libraries.python.PapiExecutor import PapiSocketExecutor
+
+class FlowUtil:
+    """Utilities for flow configuration."""
+
+    @staticmethod
+    def vpp_create_ip4_n_tuple_flow(
+            node, src_ip, dst_ip, src_port, dst_port,
+            proto, action, value=0):
+        """Create IP4_N_TUPLE flow.
+
+        :param node: DUT node.
+        :param src_ip: Source IP4 address.
+        :param dst_ip: Destination IP4 address.
+        :param src_port: Source port.
+        :param dst_port: Destination port.
+        :param proto: TCP or UDP.
+        :param action: Mark, drop or redirect-to-queue.
+        :param value: Action value.
+
+        :type node: dict
+        :type src_ip: str
+        :type dst_ip: str
+        :type src_port: int
+        :type dst_port: int
+        :type proto: str
+        :type action: str
+        :type value: int
+        :returns: flow_index.
+        :rtype: int
+        :raises ValueError: If the node has an unknown node type.
+        """
+
+        from vpp_papi import VppEnum
+
+        flow = u"ip4_n_tuple"
+        flow_type = VppEnum.vl_api_flow_type_t.FLOW_TYPE_IP4_N_TUPLE
+
+        if proto == u"TCP":
+            flow_proto = VppEnum.vl_api_ip_proto_t.IP_API_PROTO_TCP
+        elif proto == u"UDP":
+            flow_proto = VppEnum.vl_api_ip_proto_t.IP_API_PROTO_UDP
+        else:
+            raise ValueError(f"proto error: {proto}")
+
+        pattern = {
+            u'src_addr': {u'addr': src_ip, u'mask': u"255.255.255.255"},
+            u'dst_addr': {u'addr': dst_ip, u'mask': u"255.255.255.255"},
+            u'src_port': {u'port': src_port, u'mask': 0xFFFF},
+            u'dst_port': {u'port': dst_port, u'mask': 0xFFFF},
+            u'protocol': {u'prot': flow_proto}
+        }
+
+        flow_index = FlowUtil.vpp_flow_add(node, flow, flow_type,
+                pattern, action, value)
+
+        return flow_index
+
+    @staticmethod
+    def vpp_create_ip6_n_tuple_flow(
+            node, src_ip, dst_ip, src_port, dst_port,
+            proto, action, value=0):
+        """Create IP6_N_TUPLE flow.
+
+        :param node: DUT node.
+        :param src_ip: Source IP6 address.
+        :param dst_ip: Destination IP6 address.
+        :param src_port: Source port.
+        :param dst_port: Destination port.
+        :param proto: TCP or UDP.
+        :param action: Mark, drop or redirect-to-queue.
+        :param value: Action value.
+
+        :type node: dict
+        :type src_ip: str
+        :type dst_ip: str
+        :type src_port: int
+        :type dst_port: int
+        :type proto: str
+        :type action: str
+        :type value: int
+        :returns: flow_index.
+        :rtype: int
+        :raises ValueError: If the node has an unknown node type.
+        """
+
+        from vpp_papi import VppEnum
+
+        flow = u"ip6_n_tuple"
+        flow_type = VppEnum.vl_api_flow_type_t.FLOW_TYPE_IP6_N_TUPLE
+
+        if proto == u"TCP":
+            flow_proto = VppEnum.vl_api_ip_proto_t.IP_API_PROTO_TCP
+        elif proto == u"UDP":
+            flow_proto = VppEnum.vl_api_ip_proto_t.IP_API_PROTO_UDP
+        else:
+            raise ValueError(f"proto error: {proto}")
+
+        pattern = {
+            u'src_addr': {u'addr': src_ip, \
+                u'mask': u"FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF"},
+            u'dst_addr': {u'addr': dst_ip, \
+                u'mask': u"FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF"},
+            u'src_port': {u'port': src_port, u'mask': 0xFFFF},
+            u'dst_port': {u'port': dst_port, u'mask': 0xFFFF},
+            u'protocol': {u'prot': flow_proto}
+        }
+
+        flow_index = FlowUtil.vpp_flow_add(node, flow, flow_type,
+                pattern, action, value)
+
+        return flow_index
+
+    @staticmethod
+    def vpp_create_ip4_flow(
+            node, src_ip, dst_ip, proto, action, value=0):
+        """Create IP4 flow.
+
+        :param node: DUT node.
+        :param src_ip: Source IP4 address.
+        :param dst_ip: Destination IP4 address.
+        :param proto: TCP or UDP.
+        :param action: Mark, drop or redirect-to-queue.
+        :param value: Action value.
+
+        :type node: dict
+        :type src_ip: str
+        :type dst_ip: str
+        :type proto: str
+        :type action: str
+        :type value: int
+        :returns: flow_index.
+        :rtype: int
+        :raises ValueError: If the node has an unknown node type.
+        """
+
+        from vpp_papi import VppEnum
+
+        flow = u"ip4"
+        flow_type = VppEnum.vl_api_flow_type_t.FLOW_TYPE_IP4
+
+        if proto == u"TCP":
+            flow_proto = VppEnum.vl_api_ip_proto_t.IP_API_PROTO_TCP
+        elif proto == u"UDP":
+            flow_proto = VppEnum.vl_api_ip_proto_t.IP_API_PROTO_UDP
+        else:
+            raise ValueError(f"proto error: {proto}")
+
+        pattern = {
+            u'src_addr': {u'addr': src_ip, u'mask': u"255.255.255.255"},
+            u'dst_addr': {u'addr': dst_ip, u'mask': u"255.255.255.255"},
+            u'protocol': {u'prot': flow_proto}
+        }
+
+        flow_index = FlowUtil.vpp_flow_add(node, flow, flow_type,
+                pattern, action, value)
+
+        return flow_index
+
+    @staticmethod
+    def vpp_create_ip6_flow(
+            node, src_ip, dst_ip, proto, action, value=0):
+        """Create IP6 flow.
+
+        :param node: DUT node.
+        :param src_ip: Source IP6 address.
+        :param dst_ip: Destination IP6 address.
+        :param proto: TCP or UDP.
+        :param action: Mark, drop or redirect-to-queue.
+        :param value: Action value.
+
+        :type node: dict
+        :type src_ip: str
+        :type dst_ip: str
+        :type proto: str
+        :type action: str
+        :type value: int
+        :returns: flow_index.
+        :rtype: int
+        :raises ValueError: If the node has an unknown node type.
+        """
+
+        from vpp_papi import VppEnum
+
+        flow = u"ip6"
+        flow_type = VppEnum.vl_api_flow_type_t.FLOW_TYPE_IP6
+
+        if proto == u"TCP":
+            flow_proto = VppEnum.vl_api_ip_proto_t.IP_API_PROTO_TCP
+        elif proto == u"UDP":
+            flow_proto = VppEnum.vl_api_ip_proto_t.IP_API_PROTO_UDP
+        else:
+            raise ValueError(f"proto error: {proto}")
+
+        pattern = {
+            u'src_addr': {u'addr': src_ip, \
+                u'mask': u"FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF"},
+            u'dst_addr': {'addr': dst_ip, \
+                u'mask': u"FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF"},
+            u'protocol': {u'prot': flow_proto}
+        }
+
+        flow_index = FlowUtil.vpp_flow_add(node, flow, flow_type,
+                pattern, action, value)
+
+        return flow_index
+
+    @staticmethod
+    def vpp_create_ip4_gtpu_flow(
+            node, src_ip, dst_ip, teid, action, value=0):
+        """Create IP4_GTPU flow.
+
+        :param node: DUT node.
+        :param src_ip: Source IP4 address.
+        :param dst_ip: Destination IP4 address.
+        :param teid: Tunnel endpoint identifier.
+        :param action: Mark, drop or redirect-to-queue.
+        :param value: Action value.
+
+        :type node: dict
+        :type src_ip: str
+        :type dst_ip: str
+        :type teid: int
+        :type action: str
+        :type value: int
+        :returns: flow_index.
+        :rtype: int
+        :raises ValueError: If the node has an unknown node type.
+        """
+
+        from vpp_papi import VppEnum
+
+        flow = u"ip4_gtpu"
+        flow_type = VppEnum.vl_api_flow_type_t.FLOW_TYPE_IP4_GTPU
+        flow_proto = VppEnum.vl_api_ip_proto_t.IP_API_PROTO_UDP
+
+        pattern = {
+            u'src_addr': {u'addr': src_ip, u'mask': u"255.255.255.255"},
+            u'dst_addr': {u'addr': dst_ip, u'mask': u"255.255.255.255"},
+            u'protocol': {u'prot': flow_proto},
+            u'teid': teid
+        }
+
+        flow_index = FlowUtil.vpp_flow_add(node, flow, flow_type,
+                pattern, action, value)
+
+        return flow_index
+
+    @staticmethod
+    def vpp_create_ip4_ipsec_flow(node, proto, spi, action, value=0):
+        """Create IP4_IPSEC flow.
+
+        :param node: DUT node.
+        :param proto: TCP or UDP.
+        :param spi: Security Parameters Index.
+        :param action: Mark, drop or redirect-to-queue.
+        :param value: Action value.
+
+        :type node: dict
+        :type proto: str
+        :type spi: int
+        :type action: str
+        :type value: int
+        :returns: flow_index.
+        :rtype: int
+        :raises ValueError: If the node has an unknown node type.
+        """
+
+        from vpp_papi import VppEnum
+
+        if proto == u"ESP":
+            flow = u"ip4_ipsec_esp"
+            flow_proto = VppEnum.vl_api_ip_proto_t.IP_API_PROTO_ESP
+            flow_type = VppEnum.vl_api_flow_type_t.FLOW_TYPE_IP4_IPSEC_ESP
+        elif proto == u"AH":
+            flow = u"ip4_ipsec_ah"
+            flow_proto = VppEnum.vl_api_ip_proto_t.IP_API_PROTO_AH
+            flow_type = VppEnum.vl_api_flow_type_t.FLOW_TYPE_IP4_IPSEC_AH
+        else:
+            raise ValueError(f"proto error: {proto}")
+
+        pattern = {
+            u'protocol': {u'prot': flow_proto},
+            u'spi': spi
+        }
+
+        flow_index = FlowUtil.vpp_flow_add(node, flow, flow_type,
+                pattern, action, value)
+
+        return flow_index
+
+    @staticmethod
+    def vpp_create_ip4_l2tp_flow(node, session_id, action, value=0):
+        """Create IP4_L2TPV3OIP flow.
+
+        :param node: DUT node.
+        :param session_id: PPPoE session ID
+        :param action: Mark, drop or redirect-to-queue.
+        :param value: Action value.
+
+        :type node: dict
+        :type session_id: int
+        :type action: str
+        :type value: int
+        :returns: flow_index.
+        :rtype: int
+        :raises ValueError: If the node has an unknown node type.
+        """
+
+        from vpp_papi import VppEnum
+
+        flow = u"ip4_l2tpv3oip"
+        flow_proto = 115    # IP_API_PROTO_L2TP
+        flow_type = VppEnum.vl_api_flow_type_t.FLOW_TYPE_IP4_L2TPV3OIP
+
+        pattern = {
+            u'protocol': {u'prot': flow_proto},
+            u'session_id': session_id
+        }
+
+        flow_index = FlowUtil.vpp_flow_add(node, flow, flow_type,
+                pattern, action, value)
+
+        return flow_index
+
+    @staticmethod
+    def vpp_create_ip4_vxlan_flow(node, src_ip, dst_ip, vni, action, value=0):
+        """Create IP4_VXLAN flow.
+
+        :param node: DUT node.
+        :param src_ip: Source IP4 address.
+        :param dst_ip: Destination IP4 address.
+        :param vni: Virtual network instance.
+        :param action: Mark, drop or redirect-to-queue.
+        :param value: Action value.
+
+        :type node: dict
+        :type src_ip: str
+        :type dst_ip: str
+        :type vni: int
+        :type action: str
+        :type value: int
+        :returns: flow_index.
+        :raises ValueError: If the node has an unknown node type.
+        """
+
+        from vpp_papi import VppEnum
+
+        flow = u"ip4_vxlan"
+        flow_type = VppEnum.vl_api_flow_type_t.FLOW_TYPE_IP4_VXLAN
+        flow_proto = VppEnum.vl_api_ip_proto_t.IP_API_PROTO_UDP
+
+        pattern = {
+            u'src_addr': {u'addr': src_ip, u'mask': u"255.255.255.255"},
+            u'dst_addr': {u'addr': dst_ip, u'mask': u"255.255.255.255"},
+            u'dst_port': {u'port': 4789, 'mask': 0xFFFF},
+            u'protocol': {u'prot': flow_proto},
+            u'vni': vni
+        }
+
+        flow_index = FlowUtil.vpp_flow_add(node, flow, flow_type,
+                pattern, action, value)
+
+        return flow_index
+
+    @staticmethod
+    def vpp_flow_add(node, flow, flow_type, pattern, action, value=0):
+        """Flow add.
+
+        :param node: DUT node.
+        :param flow: Name of flow.
+        :param flow_type: Type of flow.
+        :param pattern: Pattern of flow.
+        :param action: Mark, drop or redirect-to-queue.
+        :param value: Action value.
+
+        :type node: dict
+        :type node: str
+        :type flow_type: str
+        :type pattern: dict
+        :type action: str
+        :type value: int
+        :returns: flow_index.
+        :rtype: int
+        :raises ValueError: If the node has an unknown node type.
+        """
+
+        from vpp_papi import VppEnum
+
+        if node[u"type"] == NodeType.DUT:
+            cmd = u"flow_add"
+
+            if action == u"redirect-to-queue":
+                flow_rule = {
+                    u'type': flow_type,
+                    u'actions': VppEnum.vl_api_flow_action_t.FLOW_ACTION_REDIRECT_TO_QUEUE,
+                    u'redirect_queue': value,
+                    u'flow': {flow : pattern}
+                }
+            elif action == u"mark":
+                flow_rule = {
+                    u'type': flow_type,
+                    u'actions': VppEnum.vl_api_flow_action_t.FLOW_ACTION_MARK,
+                    u'mark_flow_id': value,
+                    u'flow': {flow : pattern}
+                }
+            elif action == u"drop":
+                flow_rule = {
+                    u'type': flow_type,
+                    u'actions': VppEnum.vl_api_flow_action_t.FLOW_ACTION_DROP,
+                    u'flow': {flow : pattern}
+                }
+            else:
+                raise ValueError(f"Action type error: {action}")
+
+            err_msg = f"Failed to create {flow} flow on host."
+            args = dict(flow=flow_rule)
+            flow_index = -1
+            with PapiSocketExecutor(node) as papi_exec:
+                reply = papi_exec.add(cmd, **args).get_reply(err_msg)
+                flow_index = reply[u"flow_index"]
+
+            return flow_index
+        else:
+            raise ValueError(
+                f"Node {node[u'host']} has unknown NodeType: '{node[u'type']}'"
+            )
+
+    @staticmethod
+    def vpp_flow_enable(node, interface, flow_index=0):
+        """Flow enable.
+
+        :param node: DUT node.
+        :param interface: Interface sw_if_index.
+        :param flow_index: Flow index.
+
+        :type node: dict
+        :type interface: int
+        :type flow_index: int
+        :returns: Nothing.
+        :raises ValueError: If the node has an unknown node type.
+        """
+
+        if node[u"type"] == NodeType.DUT:
+            err_msg = u"Failed to enable flow on host"
+            cmd = u"flow_enable"
+            sw_if_index = Topology.get_interface_sw_index(node, interface)
+            args = dict(
+                flow_index=int(flow_index),
+                hw_if_index=int(sw_if_index)
+            )
+            with PapiSocketExecutor(node) as papi_exec:
+                papi_exec.add(cmd, **args).get_reply(err_msg)
+        else:
+            raise ValueError(
+                f"Node {node[u'host']} has unknown NodeType: '{node[u'type']}'"
+            )
+
+    @staticmethod
+    def vpp_flow_disable(node, interface, flow_index=0):
+        """Flow disable.
+
+        :param node: DUT node.
+        :param interface: Interface sw_if_index.
+        :param flow_index: Flow index.
+
+        :type node: dict
+        :type interface: int
+        :type flow_index: int
+        :returns: Nothing.
+        :raises ValueError: If the node has an unknown node type.
+        """
+
+        if node[u"type"] == NodeType.DUT:
+            err_msg = u"Failed to disable flow on host"
+            cmd = u"flow_disable"
+            sw_if_index = Topology.get_interface_sw_index(node, interface)
+            args = dict(
+                flow_index=int(flow_index),
+                hw_if_index=int(sw_if_index)
+            )
+            with PapiSocketExecutor(node) as papi_exec:
+                papi_exec.add(cmd, **args).get_reply(err_msg)
+
+        else:
+            raise ValueError(
+                f"Node {node[u'host']} has unknown NodeType: '{node[u'type']}'"
+            )
+
+    @staticmethod
+    def vpp_flow_del(node, flow_index=0):
+        """Flow delete.
+
+        :param node: DUT node.
+        :param flow_index: Flow index.
+
+        :type node: dict
+        :type flow_index: int
+        :returns: Nothing.
+        :raises ValueError: If the node has an unknown node type.
+        """
+
+        if node[u"type"] == NodeType.DUT:
+            err_msg = u"Failed to delete flow on host"
+            cmd = u"flow_del"
+            args = dict(
+                flow_index=int(flow_index)
+            )
+            with PapiSocketExecutor(node) as papi_exec:
+                papi_exec.add(cmd, **args).get_reply(err_msg)
+
+        else:
+            raise ValueError(
+                f"Node {node[u'host']} has unknown NodeType: '{node[u'type']}'"
+            )
+
+    @staticmethod
+    def vpp_show_flow_entry(node):
+        """Show flow entry.
+
+        :param node: DUT node.
+
+        :type node: dict
+        :returns: flow entry.
+        :rtype: str
+        :raises ValueError: If the node has an unknown node type.
+
+        """
+
+        if node[u"type"] == NodeType.DUT:
+            err_msg = u"Failed to enable flow on host"
+            cmd = u"vppctl show flow entry"
+            stdout, _ = exec_cmd_no_error(
+                node, cmd, sudo=False, message=err_msg, retries=120
+            )
+
+            return stdout.strip()
+        else:
+            raise ValueError(
+                f"Node {node[u'host']} has unknown NodeType: '{node[u'type']}'"
+            )
+
+    @staticmethod
+    def vpp_verify_flow_action(
+            node, action, value,
+            src_mac=u"11:22:33:44:55:66", dst_mac=u"11:22:33:44:55:66",
+            src_ip=None, dst_ip=None):
+        """Verify the correctness of the flow action.
+
+        :param node: DUT node.
+        :param action: Action.
+        :param value: Action value.
+        :param src_mac: Source mac address.
+        :param dst_mac: Destination mac address.
+        :param src_ip: Source IP address.
+        :param dst_ip: Destination IP address.
+
+        :type node: dict
+        :type action: str
+        :type value: int
+        :type src_mac: str
+        :type dst_mac: str
+        :type src_ip: str
+        :type dst_ip: str
+        :returns: Nothing.
+        :raises ValueError: Unknown node type or verify error.
+        """
+        if node[u"type"] == NodeType.DUT:
+            err_msg = f"Failed to show trace on host {node[u'host']}"
+            cmd = u"vppctl show trace"
+            stdout, _ = exec_cmd_no_error(
+                node, cmd, sudo=False, message=err_msg, retries=120
+            )
+
+            err_info = f"Verify flow {action} failed"
+
+            if src_ip == None:
+                expected_str = f"{src_mac} -> {dst_mac}"
+            else:
+                src_ip = ip_address(src_ip)
+                dst_ip = ip_address(dst_ip)
+                expected_str = f"{src_ip} -> {dst_ip}"
+
+            if action == u"drop":
+                if expected_str in stdout:
+                    raise ValueError(err_info)
+            elif action == u"redirect-to-queue":
+                if f"queue {value}" not in stdout and f"qid {value}" not in stdout:
+                    raise ValueError(err_info)
+                if expected_str not in stdout:
+                    raise ValueError(err_info)
+            elif action == u"mark":
+                if u"PKT_RX_FDIR" not in stdout and  u"flow-id 1" not in stdout:
+                    raise ValueError(err_info)
+                if expected_str not in stdout:
+                    raise ValueError(err_info)
+            else:
+                raise ValueError(f"Action type error: {action}")
+        else:
+            raise ValueError(
+                f"Node {node[u'host']} has unknown NodeType: '{node[u'type']}'"
+            )
diff --git a/resources/libraries/robot/shared/default.robot b/resources/libraries/robot/shared/default.robot
index 93aa3976a..58bbb97ac 100644
--- a/resources/libraries/robot/shared/default.robot
+++ b/resources/libraries/robot/shared/default.robot
@@ -25,6 +25,7 @@
 | Library | resources.libraries.python.CpuUtils
 | Library | resources.libraries.python.CoreDumpUtil
 | Library | resources.libraries.python.DUTSetup
+| Library | resources.libraries.python.FlowUtil
 | Library | resources.libraries.python.L2Util
 | Library | resources.libraries.python.InterfaceUtil
 | Library | resources.libraries.python.IPUtil
diff --git a/resources/libraries/robot/shared/traffic.robot b/resources/libraries/robot/shared/traffic.robot
index bd8edcf75..d1d357897 100644
--- a/resources/libraries/robot/shared/traffic.robot
+++ b/resources/libraries/robot/shared/traffic.robot
@@ -652,3 +652,56 @@
 | | ... | --tun_vni ${tun_vni} | --tun_src_ip ${tun_src_ip}
 | | ... | --tun_dst_ip ${tun_dst_ip}
 | | Run Traffic Script On Node | geneve_tunnel.py | ${node} | ${args}
+
+| Send flow packet and verify action
+| | [Documentation] | Send packet and verify the correctness of flow action.
+| |
+| | ... | *Arguments:*
+| |
+| | ... | _NOTE:_ Arguments are based on topology:
+| | ... | TG(if1)->(if1)DUT
+| |
+| | ... | - tg_node - Node to execute scripts on (TG). Type: dictionary
+| | ... | - tx_interface - TG Interface 1. Type: string
+| | ... | - tx_dst_mac - MAC address of DUT-if1. Type: string
+| | ... | - src_ip - Source ip address. Type: string
+| | ... | - dst_ip - Destination IP address. Type: string
+| | ... | - src_port - Source port. Type: int
+| | ... | - dst_port - Destination port. Type: int
+| | ... | - flow_type - Flow type. Type: string
+| | ... | - proto - Flow protocol. Type: string
+| | ... | - value - Additional packet value. Type: integer
+| | ... | - traffic_script - Traffic script that send packet. Type: string
+| | ... | - action - drop, mark or redirect-to-queue. Type: string
+| | ... | - action_value - action value. Type: integer
+| |
+| | ... | *Return:*
+| | ... | - No value returned
+| |
+| | ... | *Example:*
+| | ... | \| Send flow packet and verify actions \| ${nodes['TG']} \| eth2 \
+| | ... | \| 08:00:27:a2:52:5b \
+| | ... | \| 1.1.1.1 \| 2.2.2.2 \| ${100} \| ${200} \
+| | ... | \| IP4 \| UDP \| send_flow_packet \| mark \| ${7} \|
+| |
+| | [Arguments] | ${tg_node} | ${tx_interface} | ${tx_dst_mac}
+| | ... | ${flow_type} | ${proto}
+| | ... | ${src_ip}=${None} | ${dst_ip}=${None}
+| | ... | ${src_port}=${None} | ${dst_port}=${None}
+| | ... | ${value}=${None}
+| | ... | ${traffic_script}=send_flow_packet
+| | ... | ${action}=redirect-to-queue
+| | ... | ${action_value}=${7}
+| |
+| | ${tx_src_mac}= | Get Interface Mac | ${tg_node} | ${tx_interface}
+| | ${tx_if_name}= | Get interface name | ${tg_node} | ${tx_interface}
+| | ${args}= | Catenate
+| | ... | --tg_if1_mac ${tx_src_mac} | --dut_if1_mac ${tx_dst_mac}
+| | ... | --tx_if ${tx_if_name} | --flow_type ${flow_type} | --proto ${proto}
+| | ... | --src_ip ${src_ip} | --dst_ip ${dst_ip}
+| | ... | --src_port ${src_port} | --dst_port ${dst_port}
+| | ... | --value ${value}
+| | Run Traffic Script On Node | ${traffic_script}.py | ${tg_node} | ${args}
+| | Vpp Verify Flow action | ${dut1} | ${action} | ${action_value}
+| | ... | ${tx_src_mac} | ${tx_dst_mac}
+| | ... | ${src_ip} | ${dst_ip}
diff --git a/tests/vpp/device/flow/2n1l-10ge2p1x710-ethip4-flow-ip4-tcp-scapy.robot b/tests/vpp/device/flow/2n1l-10ge2p1x710-ethip4-flow-ip4-tcp-scapy.robot
new file mode 100644
index 000000000..203d4a03d
--- /dev/null
+++ b/tests/vpp/device/flow/2n1l-10ge2p1x710-ethip4-flow-ip4-tcp-scapy.robot
@@ -0,0 +1,112 @@
+# Copyright (c) 2021 Intel and/or its affiliates.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at:
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+*** Settings ***
+| Resource | resources/libraries/robot/shared/default.robot
+|
+| Force Tags | 2_NODE_SINGLE_LINK_TOPO | DEVICETEST | HW_ENV | DCR_ENV | SCAPY
+| ... | NIC_Intel-X710 | ETH | IP4FWD | BASE | IP4BASE | DRV_VFIO_PCI
+| ... | RXQ_SIZE_0 | TXQ_SIZE_0
+| ... | ethip4-flow-ip4-tcp
+|
+| Suite Setup | Setup suite topology interfaces | scapy
+| Test Setup | Setup test
+| Test Teardown | Tear down test | packet_trace | telemetry
+|
+| Test Template | Local Template
+|
+| Documentation | *IP4 flow test cases*
+| ...
+| ... | *[Top] Network Topologies:* TG-DUT1 2-node topology with one link\
+| ... | between nodes.
+| ... | *[Enc] Packet Encapsulations:* Eth-IP4-TCP.
+| ... | *[Cfg] DUT configuration:* DUT is configured with IP4 flow.
+| ... | *[Ver] TG verification:* Verify if the flow action is correct.
+
+*** Variables ***
+| @{plugins_to_enable}= | dpdk_plugin.so | perfmon_plugin.so
+| ${crypto_type}= | ${None}
+| ${nic_name}= | Intel-X710
+| ${nic_driver}= | vfio-pci
+| ${nic_rxq_size}= | 0
+| ${nic_txq_size}= | 0
+| ${nic_pfs}= | 2
+| ${nic_vfs}= | 0
+| ${overhead}= | ${0}
+| ${src_ip}= | 1.1.1.1
+| ${dst_ip}= | 2.2.2.2
+# Telemetry
+| ${telemetry_profile}= | vpp_test_teardown
+
+*** Keywords ***
+| Local Template
+| | [Documentation]
+| | ... | [Ver] Make TG send IP4 packet routed over DUT1 interfaces.\
+| | ... | Make VPP verify flow packet is correct.
+| |
+| | ... | *Arguments:*
+| | ... | - frame_size - Framesize in Bytes in integer. Type: integer
+| | ... | - phy_cores - Number of physical cores. Type: integer
+| | ... | - rxq - Number of RX queues. Type: integer
+| |
+| | [Arguments] | ${frame_size} | ${phy_cores} | ${rxq}=${None}
+| |
+| | Set Test Variable | \${frame_size}
+| |
+| | Given Set Max Rate And Jumbo
+| | And Add worker threads to all DUTs | ${phy_cores} | ${rxq}
+| | And Pre-initialize layer driver | ${nic_driver}
+| | And Apply startup configuration on all VPP DUTs | with_trace=${True}
+| | When Initialize layer driver | ${nic_driver}
+| | And Initialize layer interface
+| |
+| | ${flow_index} = | And Vpp Create Ip4 Flow | ${dut1}
+| | ... | ${src_ip} | ${dst_ip} | proto=TCP
+| | ... | action=redirect-to-queue | value=${7}
+| | And Vpp Flow Enable | ${dut1} | ${DUT1_${int}1}[0] | ${flow_index}
+| | Then Send flow packet and verify action
+| | ... | ${tg} | ${TG_pf1}[0] | ${DUT1_${int}1_mac}[0]
+| | ... | flow_type=IP4 | proto=TCP
+| | ... | src_ip=${src_ip} | dst_ip=${dst_ip}
+| | ... | action=redirect-to-queue | action_value=${7}
+| | And Vpp Flow Disable | ${dut1} | ${DUT1_${int}1}[0] | ${flow_index}
+| | And Vpp Flow Del | ${dut1} | ${flow_index}
+| |
+| | ${flow_index} = | And Vpp Create Ip4 Flow | ${dut1}
+| | ... | ${src_ip} | ${dst_ip} | proto=TCP
+| | ... | action=drop
+| | And Vpp Flow Enable | ${dut1} | ${DUT1_${int}1}[0] | ${flow_index}
+| | Then Send flow packet and verify action
+| | ... | ${tg} | ${TG_pf1}[0] | ${DUT1_${int}1_mac}[0]
+| | ... | flow_type=IP4 | proto=TCP
+| | ... | src_ip=${src_ip} | dst_ip=${dst_ip}
+| | ... | action=drop
+| | And Vpp Flow Disable | ${dut1} | ${DUT1_${int}1}[0] | ${flow_index}
+| | And Vpp Flow Del | ${dut1} | ${flow_index}
+| |
+| | ${flow_index} = | And Vpp Create Ip4 Flow | ${dut1}
+| | ... | ${src_ip} | ${dst_ip} | proto=TCP
+| | ... | action=mark | value=${7}
+| | And Vpp Flow Enable | ${dut1} | ${DUT1_${int}1}[0] | ${flow_index}
+| | Then Send flow packet and verify action
+| | ... | ${tg} | ${TG_pf1}[0] | ${DUT1_${int}1_mac}[0]
+| | ... | flow_type=IP4 | proto=TCP
+| | ... | src_ip=${src_ip} | dst_ip=${dst_ip}
+| | ... | action=mark
+| | And Vpp Flow Disable | ${dut1} | ${DUT1_${int}1}[0] | ${flow_index}
+| | And Vpp Flow Del | ${dut1} | ${flow_index}
+
+*** Test Cases ***
+| 64B-0c-ethip4-flow-ip4-tcp-scapy
+| | [Tags] | 64B | 0C
+| | frame_size=${64} | phy_cores=${0}
diff --git a/tests/vpp/device/flow/2n1l-10ge2p1x710-ethip4-flow-ip4-udp-scapy.robot b/tests/vpp/device/flow/2n1l-10ge2p1x710-ethip4-flow-ip4-udp-scapy.robot
new file mode 100644
index 000000000..a781004b7
--- /dev/null
+++ b/tests/vpp/device/flow/2n1l-10ge2p1x710-ethip4-flow-ip4-udp-scapy.robot
@@ -0,0 +1,112 @@
+# Copyright (c) 2021 Intel and/or its affiliates.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at:
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+*** Settings ***
+| Resource | resources/libraries/robot/shared/default.robot
+|
+| Force Tags | 2_NODE_SINGLE_LINK_TOPO | DEVICETEST | HW_ENV | DCR_ENV | SCAPY
+| ... | NIC_Intel-X710 | ETH | IP4FWD | BASE | FLOW | DRV_VFIO_PCI
+| ... | RXQ_SIZE_0 | TXQ_SIZE_0
+| ... | ethip4-flow-ip4-udp
+|
+| Suite Setup | Setup suite topology interfaces | scapy
+| Test Setup | Setup test
+| Test Teardown | Tear down test | packet_trace | telemetry
+|
+| Test Template | Local Template
+|
+| Documentation | *IP4 flow test cases*
+| ...
+| ... | *[Top] Network Topologies:* TG-DUT1 2-node topology with one link\
+| ... | between nodes.
+| ... | *[Enc] Packet Encapsulations:* Eth-IP4-UDP.
+| ... | *[Cfg] DUT configuration:* DUT is configured with IP4 flow.
+| ... | *[Ver] TG verification:* Verify if the flow action is correct.
+
+*** Variables ***
+| @{plugins_to_enable}= | dpdk_plugin.so | perfmon_plugin.so
+| ${crypto_type}= | ${None}
+| ${nic_name}= | Intel-X710
+| ${nic_driver}= | vfio-pci
+| ${nic_rxq_size}= | 0
+| ${nic_txq_size}= | 0
+| ${nic_pfs}= | 2
+| ${nic_vfs}= | 0
+| ${overhead}= | ${0}
+| ${src_ip}= | 1.1.1.1
+| ${dst_ip}= | 2.2.2.2
+# Telemetry
+| ${telemetry_profile}= | vpp_test_teardown
+
+*** Keywords ***
+| Local Template
+| | [Documentation]
+| | ... | [Ver] Make TG send IP4 packet routed over DUT1 interfaces.\
+| | ... | Make VPP verify flow packet is correct.
+| |
+| | ... | *Arguments:*
+| | ... | - frame_size - Framesize in Bytes in integer. Type: integer
+| | ... | - phy_cores - Number of physical cores. Type: integer
+| | ... | - rxq - Number of RX queues. Type: integer
+| |
+| | [Arguments] | ${frame_size} | ${phy_cores} | ${rxq}=${None}
+| |
+| | Set Test Variable | \${frame_size}
+| |
+| | Given Set Max Rate And Jumbo
+| | And Add worker threads to all DUTs | ${phy_cores} | ${rxq}
+| | And Pre-initialize layer driver | ${nic_driver}
+| | And Apply startup configuration on all VPP DUTs | with_trace=${True}
+| | When Initialize layer driver | ${nic_driver}
+| | And Initialize layer interface
+| |
+| | ${flow_index} = | And Vpp Create Ip4 Flow | ${dut1}
+| | ... | ${src_ip} | ${dst_ip} | proto=UDP
+| | ... | action=redirect-to-queue | value=${7}
+| | And Vpp Flow Enable | ${dut1} | ${DUT1_${int}1}[0] | ${flow_index}
+| | Then Send flow packet and verify action
+| | ... | ${tg} | ${TG_pf1}[0] | ${DUT1_${int}1_mac}[0]
+| | ... | flow_type=IP4 | proto=UDP
+| | ... | src_ip=${src_ip} | dst_ip=${dst_ip}
+| | ... | action=redirect-to-queue | action_value=${7}
+| | And Vpp Flow Disable | ${dut1} | ${DUT1_${int}1}[0] | ${flow_index}
+| | And Vpp Flow Del | ${dut1} | ${flow_index}
+| |
+| | ${flow_index} = | And Vpp Create Ip4 Flow | ${dut1}
+| | ... | ${src_ip} | ${dst_ip} | proto=UDP
+| | ... | action=drop
+| | And Vpp Flow Enable | ${dut1} | ${DUT1_${int}1}[0] | ${flow_index}
+| | Then Send flow packet and verify action
+| | ... | ${tg} | ${TG_pf1}[0] | ${DUT1_${int}1_mac}[0]
+| | ... | flow_type=IP4 | proto=UDP
+| | ... | src_ip=${src_ip} | dst_ip=${dst_ip}
+| | ... | action=drop
+| | And Vpp Flow Disable | ${dut1} | ${DUT1_${int}1}[0] | ${flow_index}
+| | And Vpp Flow Del | ${dut1} | ${flow_index}
+| |
+| | ${flow_index} = | And Vpp Create Ip4 Flow | ${dut1}
+| | ... | ${src_ip} | ${dst_ip} | proto=UDP
+| | ... | action=mark | value=${7}
+| | And Vpp Flow Enable | ${dut1} | ${DUT1_${int}1}[0] | ${flow_index}
+| | Then Send flow packet and verify action
+| | ... | ${tg} | ${TG_pf1}[0] | ${DUT1_${int}1_mac}[0]
+| | ... | flow_type=IP4 | proto=UDP
+| | ... | src_ip=${src_ip} | dst_ip=${dst_ip}
+| | ... | action=mark
+| | And Vpp Flow Disable | ${dut1} | ${DUT1_${int}1}[0] | ${flow_index}
+| | And Vpp Flow Del | ${dut1} | ${flow_index}
+
+*** Test Cases ***
+| 64B-0c-ethip4-flow-ip4-udp-scapy
+| | [Tags] | 64B | 0C
+| | frame_size=${64} | phy_cores=${0}
diff --git a/tests/vpp/device/flow/regenerate_testcases.py b/tests/vpp/device/flow/regenerate_testcases.py
new file mode 100755
index 000000000..87521e662
--- /dev/null
+++ b/tests/vpp/device/flow/regenerate_testcases.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python3
+
+# Copyright (c) 2021 Cisco and/or its affiliates.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at:
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from resources.libraries.python.autogen.Regenerator import Regenerator
+
+Regenerator().regenerate_glob(u"*.robot")
-- 
2.17.1

