{
  "comments": [
    {
      "key": {
        "uuid": "d83ecd09_760b137c",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-03-18T14:47:08Z",
      "side": 1,
      "message": "Clarify whether this only means .api files, or also other integration points, such as \"directory\" structure of stats segment, or PAPI python dependencies.",
      "range": {
        "startLine": 7,
        "startChar": 32,
        "endLine": 7,
        "endChar": 35
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99c4b9ad_a3f0973d",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-03-18T14:47:08Z",
      "side": 1,
      "message": "From this moment, there is no reason for CSIT code to keep suporting the old VPP API. In order to avoid bloated code, CSIT should drop the support in a separate Change (including setting stable VPP version to the build with new API, which probably means new CSIT oper branch).",
      "range": {
        "startLine": 40,
        "startChar": 29,
        "endLine": 40,
        "endChar": 30
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d85b6568_56a5b72d",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-03-18T14:47:08Z",
      "side": 1,
      "message": "Clarify whether such a recheck is accidental, or whether it should be forced for every open Change.\n\nMost VPP patches do not touch API, or they touch parts of API not used by CSIT yet, so should keep work even with +1 from old CSIT code. Patches which do touch API are ulikely to be directly mergeable (without the need to manually resolve conflicts, which triggers verify).\nBut rechecking has no downside (except machine time).",
      "range": {
        "startLine": 41,
        "startChar": 3,
        "endLine": 41,
        "endChar": 10
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2093d02_8b00223f",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-03-18T14:47:08Z",
      "side": 1,
      "message": "The code which really needs to be \"rechecked\" is actually open CSIT patches which start using parts of API. As that code might be using old API, it has to be updated. That means after API change is merged to VPP, each open CSIT Change has to be manually set to Verified-1, with a comment recommending a rebase to the CSIT code which has the old API support removed.\n\nNote that using the exact \"recheck\" trigger is not correct, as it would use the open code (with old API handling and with old VPP build marked as stable) so it would just repeat a previous +1 without any relation to the new API.",
      "range": {
        "startLine": 44,
        "startChar": 16,
        "endLine": 44,
        "endChar": 17
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17b5b60c_70a6ad46",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-03-18T07:56:16Z",
      "side": 1,
      "message": "PAPI",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 4
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b483e3ea_08877fef",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-03-18T07:56:16Z",
      "side": 1,
      "message": "Currently we are creating branches per weekly basis. Which i think forward is not optimal (it is resource optimal, but not code optimal).\n\nShall we switch oper branch creating to \"API flag triggered\" instead of \"Date triggered\"?\n\nExample:\nVPP propose API change raising the bell as you describe. Corresponding job will automatically creates list of API with their CRCs. Ideally we should have our code implemented in the way that it will be 1:1 so API name is also name of our CSIT python function same does parameters.\n\nNew commit on CSIT side is created and once tested patch-on-patch our code is merged and oper branch created.\n\nCaveats: We need to come with oper branch naming derived from CRC. So VPP patch will pick oper branch based on CRC not the date as it is today. This way we are able to create branch for commits that already are on \"new API\".\n\nThoughts?",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 59,
        "endChar": 66
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81dee24c_466b42fd",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-03-18T14:47:08Z",
      "side": 1,
      "message": "Is adding a new field actually a backward compatible change? I believe binary API does not support optional fileds, so message with unexpected number of fields has to fail.\n\nWhile \"make test\" provider can fill some fields with default values, PAPI executor in CSIT does no such thing (and would need a CSIT update even if it did).",
      "range": {
        "startLine": 62,
        "startChar": 40,
        "endLine": 62,
        "endChar": 50
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b491b195_99b9c222",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 8
      },
      "writtenOn": "2019-03-18T08:14:41Z",
      "side": 1,
      "message": "Backwards compatible is debatable. You might simplify this to \"changed\".\nBut do you not want to limit it to only APIs that is in use by CSIT?",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 64,
        "endChar": 73
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d2f8016_6449e6cc",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-03-18T14:47:08Z",
      "side": 1,
      "message": "+1 on comparing PAPI_SIGNATURE, as opposed to just running tests. Even if the API change does not touch parts used by current CSIT, there may be open CSIT Changes which need to be updated.",
      "range": {
        "startLine": 68,
        "startChar": 3,
        "endLine": 68,
        "endChar": 17
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c991817f_517470a8",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-03-18T03:26:12Z",
      "side": 1,
      "message": "It seems to me that this logic belongs in vppapigen. \nvppapigen could be modified to also emit a single consolidated file of all the api calls. If the shasum of the file is different from the last merged artifact in a given branch, a diff against the latest merged artifact in a given branch would indicate whether you have a backward compatible or incompatible changes.\n\nThe CI/CD job could open the jira ticket via a restful call if needed.",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 73,
        "endChar": 26
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae15ff46_eaae844b",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 8
      },
      "writtenOn": "2019-03-18T08:14:41Z",
      "side": 1,
      "message": "vppapigen only processes one API file at the time. Each JSON file, contains both a CRC per message, and a per-file CRC. If CSIT stores the CRC per-file (it uses) for the last run, and compare that with the CRC (vl_api_version in JSON)...\nWe could implement this with a helper PAPI. That would return you a dictionary of plugins / api files and corresponding version.",
      "parentUuid": "c991817f_517470a8",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 73,
        "endChar": 26
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}