{
  "comments": [
    {
      "key": {
        "uuid": "d83ecd09_760b137c",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-03-18T14:47:08Z",
      "side": 1,
      "message": "Clarify whether this only means .api files, or also other integration points, such as \"directory\" structure of stats segment, or PAPI python dependencies.",
      "range": {
        "startLine": 7,
        "startChar": 32,
        "endLine": 7,
        "endChar": 35
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fea76ab8_79b159c3",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-03-19T12:14:52Z",
      "side": 1,
      "message": "... or pure PAPI decisions on how to represent certain C types in Python.",
      "parentUuid": "d83ecd09_760b137c",
      "range": {
        "startLine": 7,
        "startChar": 32,
        "endLine": 7,
        "endChar": 35
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c03ced6c_ce304491",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 10
      },
      "writtenOn": "2019-03-28T12:29:36Z",
      "side": 1,
      "message": "The current proposal is meant to only address .api files.  However, the process for handling other downstream dependency breakage from VPP is likely to require the same or very similar process.\n\nMy preference is to get this working with .api files first, then expand coverage of other VPP-\u003eCSIT dependencies that you mention above.",
      "parentUuid": "d83ecd09_760b137c",
      "range": {
        "startLine": 7,
        "startChar": 32,
        "endLine": 7,
        "endChar": 35
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "109e53eb_daefd47f",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 331
      },
      "writtenOn": "2019-03-19T16:23:02Z",
      "side": 1,
      "message": "I know that this document mainly concerns CSIT, but maybe we can have a dedicated mailing list for detected api changes or other mechanism where we can subscribe to these changes (or some flag in the mail so we can filter it more easily). It would allow other projects(honeycomb, sweetcomb,govpp,individuals, ...) to subscribe for such changes so they are informed of these critical API updates before the patch is actually merged. At least they would have more time to prepare.",
      "range": {
        "startLine": 24,
        "startChar": 44,
        "endLine": 25,
        "endChar": 37
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a8fcc90_ea11340d",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 45
      },
      "writtenOn": "2019-03-19T14:55:51Z",
      "side": 1,
      "message": "The patch should be incremental in a sense that it should support both new and previous API version, based on VPP API version detection. Previous API support should be removed from CSIT code in a separate patch, once original VPP patch is merged.",
      "range": {
        "startLine": 30,
        "startChar": 27,
        "endLine": 31,
        "endChar": 18
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99c4b9ad_a3f0973d",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-03-18T14:47:08Z",
      "side": 1,
      "message": "From this moment, there is no reason for CSIT code to keep suporting the old VPP API. In order to avoid bloated code, CSIT should drop the support in a separate Change (including setting stable VPP version to the build with new API, which probably means new CSIT oper branch).",
      "range": {
        "startLine": 40,
        "startChar": 29,
        "endLine": 40,
        "endChar": 30
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a51e93a_e1d393d7",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-03-19T06:33:48Z",
      "side": 1,
      "message": "Hope i do understand your statement in context, but you have to keep compatibility for other commits in the gerrit no?\n\nThat is why i proposed oper branch based API change, not the date.\n\nSo VPP commit will pickup the right one (based on hash)",
      "parentUuid": "99c4b9ad_a3f0973d",
      "range": {
        "startLine": 40,
        "startChar": 29,
        "endLine": 40,
        "endChar": 30
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8d79380_48697fd1",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-03-19T12:14:52Z",
      "side": 1,
      "message": "\u003e oper branch based on API change, not the date\n\nWe probably want both. If no API change happens in a week, we still create a new oper branch.\n\n\u003e you have to keep compatibility for other commits in the gerrit\n\nYou mean VPP commits, after new API has been merged?\nNo, you do not want to keep CSIT compatible with that. On the contrary, any vpp-csit verify job should say \"Verified-1 please rebase to new API\", as described in lines 66-67.",
      "parentUuid": "1a51e93a_e1d393d7",
      "range": {
        "startLine": 40,
        "startChar": 29,
        "endLine": 40,
        "endChar": 30
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0253ecfa_ec779a9a",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 45
      },
      "writtenOn": "2019-03-19T16:15:23Z",
      "side": 1,
      "message": "Agree, per my earlier comment. Once new VPP API patch is merged, there is no reason for CSIT supporting the old API.",
      "parentUuid": "f8d79380_48697fd1",
      "range": {
        "startLine": 40,
        "startChar": 29,
        "endLine": 40,
        "endChar": 30
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3fc4831_23e16db6",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 45
      },
      "writtenOn": "2019-03-19T16:15:23Z",
      "side": 1,
      "message": "Note that new API support must be in CSIT oper branch upon merging new VPP API.",
      "range": {
        "startLine": 40,
        "startChar": 3,
        "endLine": 40,
        "endChar": 29
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19f31e77_a0a16a1f",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 10
      },
      "writtenOn": "2019-03-28T12:29:36Z",
      "side": 1,
      "message": "I agree and assumed that removal of support of the old VPP-API would be included in the same commit as support for new VPP-API version rather than being done in a separate patch.\n\nI will update this section to clarify that support for the old VPP-API version shall be removed either in the same patch or a follow-up patch.\n\nAs Peter Mikus noted, this introduces another trigger for CSIT oper branch creation.",
      "parentUuid": "99c4b9ad_a3f0973d",
      "range": {
        "startLine": 40,
        "startChar": 29,
        "endLine": 40,
        "endChar": 30
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d85b6568_56a5b72d",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-03-18T14:47:08Z",
      "side": 1,
      "message": "Clarify whether such a recheck is accidental, or whether it should be forced for every open Change.\n\nMost VPP patches do not touch API, or they touch parts of API not used by CSIT yet, so should keep work even with +1 from old CSIT code. Patches which do touch API are ulikely to be directly mergeable (without the need to manually resolve conflicts, which triggers verify).\nBut rechecking has no downside (except machine time).",
      "range": {
        "startLine": 41,
        "startChar": 3,
        "endLine": 41,
        "endChar": 10
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9e2a493_2531c93e",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 10
      },
      "writtenOn": "2019-03-28T12:29:36Z",
      "side": 1,
      "message": "Sorry this is confusing, I used a poor choice of wording here.  My thinking was that a new Verify event (e.g. new patch version or manual \"recheck\") would cause the next verify job to be executed using the new CSIT code, which will fail.  This can be detected by checking for the presence of the new VPP-API commit in the VPP patch being tested and a notification to rebase the patch be sent out and voting -1 instead of wasting the cycles to run the complete set of verify jobs.\n\nI will expand this to clarify better.\n\nThe primary intent here is to prevent a cascade of failures due to an API change which generates the perception that CSIT is completely broken.  Early and clear notification of the requirement to rebase is currently lacking.  Avoiding the need to wade through test logs / console output to determine that a rebase is required is the real value in this requirement.\n\nThis will save both execution cycles AND save the VPP developer\u0027s time.",
      "parentUuid": "d85b6568_56a5b72d",
      "range": {
        "startLine": 41,
        "startChar": 3,
        "endLine": 41,
        "endChar": 10
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2093d02_8b00223f",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-03-18T14:47:08Z",
      "side": 1,
      "message": "The code which really needs to be \"rechecked\" is actually open CSIT patches which start using parts of API. As that code might be using old API, it has to be updated. That means after API change is merged to VPP, each open CSIT Change has to be manually set to Verified-1, with a comment recommending a rebase to the CSIT code which has the old API support removed.\n\nNote that using the exact \"recheck\" trigger is not correct, as it would use the open code (with old API handling and with old VPP build marked as stable) so it would just repeat a previous +1 without any relation to the new API.",
      "range": {
        "startLine": 44,
        "startChar": 16,
        "endLine": 44,
        "endChar": 17
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "519198bc_6b3308b6",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-03-19T06:33:48Z",
      "side": 1,
      "message": "THis is why we have oper- and why we have STABLE_VER. To avoid open CSIT commit to be not verified. So this model will work with no change.",
      "parentUuid": "b2093d02_8b00223f",
      "range": {
        "startLine": 44,
        "startChar": 16,
        "endLine": 44,
        "endChar": 17
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f6f1b36_cf01c729",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-03-19T12:14:52Z",
      "side": 1,
      "message": "\u003e This is why we have oper- and why we have STABLE_VER.\n\nTrue for STABLE_VER, false for oper-.\n\nIf an open CSIT Change is based on an old CSIT commit, it does not matter what STABLE_VER is specified in CSIT master or oper-, csit verify jobs would use the STABLE_VER from the open Change (so probably inherited from the old commit).\n\nCSIT would have to change the way csit verify jobs are working (to always attempt a rebase onto oper-, or similar) to make CSIT rechecking safe.",
      "parentUuid": "519198bc_6b3308b6",
      "range": {
        "startLine": 44,
        "startChar": 16,
        "endLine": 44,
        "endChar": 17
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac2d8f5e_af0e1175",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-03-19T13:26:56Z",
      "side": 1,
      "message": "Yes",
      "parentUuid": "0f6f1b36_cf01c729",
      "range": {
        "startLine": 44,
        "startChar": 16,
        "endLine": 44,
        "endChar": 17
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8ca7e50_093cdfaf",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 45
      },
      "writtenOn": "2019-03-19T16:15:23Z",
      "side": 1,
      "message": "Is there a way to automate this, as relying on manual scraping of open CSIT commits every time VPP API changes is going to be error prone..",
      "parentUuid": "b2093d02_8b00223f",
      "range": {
        "startLine": 44,
        "startChar": 16,
        "endLine": 44,
        "endChar": 17
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c585ff0e_7640b5f1",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 10
      },
      "writtenOn": "2019-03-28T12:29:36Z",
      "side": 1,
      "message": "What I missed here is a step prior to this one which creates a new CSIT oper branch with the CSIT patch that supports the new VPP-API version and no longer supports the previous version.\n\nDetection of the need to rebase CSIT patches is another step that is missing.  This would need to happen when the VPP_STABLE_VER_* files point to the VPP patch which introduced the VPP-API version change or later.\n\nPerhaps the stable VPP version files need to include the VPP-API version (or patch id) as well.",
      "parentUuid": "b2093d02_8b00223f",
      "range": {
        "startLine": 44,
        "startChar": 16,
        "endLine": 44,
        "endChar": 17
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17b5b60c_70a6ad46",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-03-18T07:56:16Z",
      "side": 1,
      "message": "PAPI",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 4
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f25c186_ba2f4070",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 10
      },
      "writtenOn": "2019-03-28T12:29:36Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "17b5b60c_70a6ad46",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 4
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b483e3ea_08877fef",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-03-18T07:56:16Z",
      "side": 1,
      "message": "Currently we are creating branches per weekly basis. Which i think forward is not optimal (it is resource optimal, but not code optimal).\n\nShall we switch oper branch creating to \"API flag triggered\" instead of \"Date triggered\"?\n\nExample:\nVPP propose API change raising the bell as you describe. Corresponding job will automatically creates list of API with their CRCs. Ideally we should have our code implemented in the way that it will be 1:1 so API name is also name of our CSIT python function same does parameters.\n\nNew commit on CSIT side is created and once tested patch-on-patch our code is merged and oper branch created.\n\nCaveats: We need to come with oper branch naming derived from CRC. So VPP patch will pick oper branch based on CRC not the date as it is today. This way we are able to create branch for commits that already are on \"new API\".\n\nThoughts?",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 59,
        "endChar": 66
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22f1215f_7842a98c",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 45
      },
      "writtenOn": "2019-03-19T16:15:23Z",
      "side": 1,
      "message": "We still need periodic oper branch creation, to push new CSIT tests to run in vpp-csit-* jobs. Or?",
      "parentUuid": "b483e3ea_08877fef",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 59,
        "endChar": 66
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a5970f1_20f1374b",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 10
      },
      "writtenOn": "2019-03-28T12:29:36Z",
      "side": 1,
      "message": "I like the idea of going to an event driven trigger to create new oper branches.  In addition to VPE-API version, there also needs to be a \"CSIT patch has been merged\" event.  The latter happens almost daily which is why we instituted a periodic oper branch creation process.\n\nAddressing your Caveat -- originally the VPP repo contained \"STABLE_CSIT_VERSION\" files which contained git id\u0027s of the latest CSIT oper branch.  Unfortunately the VPP Committers did not like having CSIT meta-data files in the repo and removed them.",
      "parentUuid": "b483e3ea_08877fef",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 59,
        "endChar": 66
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81dee24c_466b42fd",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-03-18T14:47:08Z",
      "side": 1,
      "message": "Is adding a new field actually a backward compatible change? I believe binary API does not support optional fileds, so message with unexpected number of fields has to fail.\n\nWhile \"make test\" provider can fill some fields with default values, PAPI executor in CSIT does no such thing (and would need a CSIT update even if it did).",
      "range": {
        "startLine": 62,
        "startChar": 40,
        "endLine": 62,
        "endChar": 50
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e3f0e58_a06f19ed",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1709
      },
      "writtenOn": "2019-03-18T15:30:19Z",
      "side": 1,
      "message": "For sweetcomb and I guess it is the same for CSIT, if after adding a new field in API you compile sweetcomb again without changing source code, it might work... I think it is hard to know when it is backward-compatible, for any control agent I see the following scenarios:\n\n-Remove field(s) : can break compatibility if field was used\n-Add field(s) : can break compatibility if it is a required request field for a dump operation\n-Modify field type : can break compatibility if switch from int to string for instance\n-Modify field name: always break compatibility\n-Remove datastructure : can break compatibility if datastructure was used\n-Add datastructure : Never break compatibility",
      "parentUuid": "81dee24c_466b42fd",
      "range": {
        "startLine": 62,
        "startChar": 40,
        "endLine": 62,
        "endChar": 50
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "717116cb_557d7d67",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-03-19T06:33:48Z",
      "side": 1,
      "message": "I do not think it is impossible to have backward compatible API. Lots of software I am using every day has backwards API so why VPP not?\n\nIf there is is ongoing refactor fine. But long term there must be stable MODELED API otherwise VPP will fail on market! Nobody will deploy software that is changing frequently!",
      "parentUuid": "81dee24c_466b42fd",
      "range": {
        "startLine": 62,
        "startChar": 40,
        "endLine": 62,
        "endChar": 50
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8989330_12d748b5",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 10
      },
      "writtenOn": "2019-03-28T12:29:36Z",
      "side": 1,
      "message": "Good point.  I will modify this to \"Changed\" and remove backwards compatibility checking from the requirements.",
      "parentUuid": "81dee24c_466b42fd",
      "range": {
        "startLine": 62,
        "startChar": 40,
        "endLine": 62,
        "endChar": 50
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea037967_ad254c49",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 45
      },
      "writtenOn": "2019-03-19T16:15:23Z",
      "side": 1,
      "message": "Is the proposal here to just detect the API change and flag it, or also analyse the changes and sort them into listed buckets: backwards compatible, incompatible?",
      "range": {
        "startLine": 63,
        "startChar": 2,
        "endLine": 63,
        "endChar": 48
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b491b195_99b9c222",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 8
      },
      "writtenOn": "2019-03-18T08:14:41Z",
      "side": 1,
      "message": "Backwards compatible is debatable. You might simplify this to \"changed\".\nBut do you not want to limit it to only APIs that is in use by CSIT?",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 64,
        "endChar": 73
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c52690a5_7e43e1bd",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1709
      },
      "writtenOn": "2019-03-18T15:30:19Z",
      "side": 1,
      "message": "+1 about this. Ex: commit 4d5b917b1a7 would break compatibility for sweetcomb because field name changed, but sementic version was not incremented as a break in backward compatibility...\nIMHO, any change should trigger an alert to CSIT.",
      "parentUuid": "b491b195_99b9c222",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 64,
        "endChar": 73
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef0759c3_6799bbb9",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-03-19T06:33:48Z",
      "side": 1,
      "message": "Backward compatible is a must i think for VPP being competitive on market. As per my note earlier, nobody will be deploying SW in production that has API refactor every release. Otherwise be prepared to support 1y old versions just because customers have no time for this API Tango dance every release",
      "parentUuid": "b491b195_99b9c222",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 64,
        "endChar": 73
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ead02123_1588324a",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1709
      },
      "writtenOn": "2019-03-19T09:38:41Z",
      "side": 1,
      "message": "Peter, I agree with you this is uncommon and does not work well for users. Now the reason why VPP API is not backward compatible is because VPP developpers want VPP internal structures to change to keep a FAST data plane. Plus, there are some ideas to have more compatibility for VPP API like using a common KV store and common RPCs to configure/fetch data from VPP, thus every changes would be absorbed by this KV store. It is probably a matter of time.",
      "parentUuid": "ef0759c3_6799bbb9",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 64,
        "endChar": 73
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af245593_638a20e4",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-03-19T09:53:39Z",
      "side": 1,
      "message": "As long as KV store will follow strict model not changing all the time I am +1 otherwise it will have the same problem. Ligato is example KV datastore. There was discussion long time ago if CSIT should switch to Ligato, but I think it is unrelated to the main API Flag discussion problem.",
      "parentUuid": "ead02123_1588324a",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 64,
        "endChar": 73
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69528a0d_1d67d413",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-03-19T12:14:52Z",
      "side": 1,
      "message": "\u003e the reason why VPP API is not backward compatible\n\u003e is because VPP developpers want VPP internal structures\n\u003e to change to keep a FAST data plane.\n\nIf VPP is improving an internal structure, it is still possible to create a separate new (fast) API method, while keeping the old method still supported (but changing its implementation to a slower wrapper around the new call).\n\nVPP would still be fast, but VPP development would be slower because of the need to support/test both old and new API methods.\n\nThe point of this document is to achieve continuous CSIT operation without the need for VPP to maintain multiple API methods at once. The VPP development will still be somewhat slowed by waiting for CSIT patches.",
      "parentUuid": "ead02123_1588324a",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 64,
        "endChar": 73
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5093abc7_8b89be19",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 10
      },
      "writtenOn": "2019-03-28T12:29:36Z",
      "side": 1,
      "message": "Good point.  I will modify this to \"Changed\" and remove backwards compatibility checking from the requirements.",
      "parentUuid": "c52690a5_7e43e1bd",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 64,
        "endChar": 73
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d2f8016_6449e6cc",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-03-18T14:47:08Z",
      "side": 1,
      "message": "+1 on comparing PAPI_SIGNATURE, as opposed to just running tests. Even if the API change does not touch parts used by current CSIT, there may be open CSIT Changes which need to be updated.",
      "range": {
        "startLine": 68,
        "startChar": 3,
        "endLine": 68,
        "endChar": 17
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0099f8a_ec5cf2d1",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 10
      },
      "writtenOn": "2019-03-28T12:29:36Z",
      "side": 1,
      "message": "Exactly.  Concise communication should help improve the process immensely from a VPP development POV in addition to rebasing \u0026 reverifying with the updated CSIT test code.",
      "parentUuid": "6d2f8016_6449e6cc",
      "range": {
        "startLine": 68,
        "startChar": 3,
        "endLine": 68,
        "endChar": 17
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c991817f_517470a8",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1496
      },
      "writtenOn": "2019-03-18T03:26:12Z",
      "side": 1,
      "message": "It seems to me that this logic belongs in vppapigen. \nvppapigen could be modified to also emit a single consolidated file of all the api calls. If the shasum of the file is different from the last merged artifact in a given branch, a diff against the latest merged artifact in a given branch would indicate whether you have a backward compatible or incompatible changes.\n\nThe CI/CD job could open the jira ticket via a restful call if needed.",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 73,
        "endChar": 26
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae15ff46_eaae844b",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 8
      },
      "writtenOn": "2019-03-18T08:14:41Z",
      "side": 1,
      "message": "vppapigen only processes one API file at the time. Each JSON file, contains both a CRC per message, and a per-file CRC. If CSIT stores the CRC per-file (it uses) for the last run, and compare that with the CRC (vl_api_version in JSON)...\nWe could implement this with a helper PAPI. That would return you a dictionary of plugins / api files and corresponding version.",
      "parentUuid": "c991817f_517470a8",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 73,
        "endChar": 26
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b0bd5b3_f202939a",
        "filename": "docs/automating_vpp_api_flag_day.rst",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 10
      },
      "writtenOn": "2019-03-28T12:29:36Z",
      "side": 1,
      "message": "Ole, that would be helpful.",
      "parentUuid": "ae15ff46_eaae844b",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 73,
        "endChar": 26
      },
      "revId": "b05ab8324e0bd234c2f9d2578ce4e41cba0dfa81",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}