{
  "comments": [
    {
      "key": {
        "uuid": "92fadc71_bc0d4286",
        "filename": "resources/libraries/python/InterfaceUtil.py",
        "patchSetId": 10
      },
      "lineNbr": 184,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-08-16T15:26:29Z",
      "side": 1,
      "message": "Does this mean we want link down state? Or is link state ignored when setting, only used for getting?",
      "range": {
        "startLine": 184,
        "startChar": 64,
        "endLine": 184,
        "endChar": 72
      },
      "revId": "71be76c5d3fc1153f276bea185c8bf0d177c921a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8d8ab22_26088118",
        "filename": "resources/libraries/python/InterfaceUtil.py",
        "patchSetId": 10
      },
      "lineNbr": 184,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-08-16T18:13:59Z",
      "side": 1,
      "message": "Good point. Technically \"traffic can flow\" when port is admin UP protocol UP in CCNA terminology (so both administratively and operationally --cabling UP, Link layer established). This should be at least consulted with Jakub (author of commit).\n\nBUT!!!\nHaving ADMIN_UP LINK_DOWN is a case of vhost until VM is UP. This way if this function is about checking admin state fine, if it is about checking admin/link, it is bad. Depends when you are calling it",
      "parentUuid": "92fadc71_bc0d4286",
      "range": {
        "startLine": 184,
        "startChar": 64,
        "endLine": 184,
        "endChar": 72
      },
      "revId": "71be76c5d3fc1153f276bea185c8bf0d177c921a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8752f6d6_87c06a54",
        "filename": "resources/libraries/python/InterfaceUtil.py",
        "patchSetId": 10
      },
      "lineNbr": 184,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-08-19T11:06:04Z",
      "side": 1,
      "message": "\u003e if this function is about checking admin state\n\nIt is about setting (not checking) a state.",
      "parentUuid": "e8d8ab22_26088118",
      "range": {
        "startLine": 184,
        "startChar": 64,
        "endLine": 184,
        "endChar": 72
      },
      "revId": "71be76c5d3fc1153f276bea185c8bf0d177c921a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e935dcf_cb032e40",
        "filename": "resources/libraries/python/InterfaceUtil.py",
        "patchSetId": 10
      },
      "lineNbr": 184,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-08-19T11:48:33Z",
      "side": 1,
      "message": "s/check/set/g it is same from state perspective.",
      "parentUuid": "8752f6d6_87c06a54",
      "range": {
        "startLine": 184,
        "startChar": 64,
        "endLine": 184,
        "endChar": 72
      },
      "revId": "71be76c5d3fc1153f276bea185c8bf0d177c921a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58614ce3_66f281f4",
        "filename": "resources/libraries/python/InterfaceUtil.py",
        "patchSetId": 10
      },
      "lineNbr": 184,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-08-19T12:56:54Z",
      "side": 1,
      "message": "I took a look into VPP code to get some answers.\n\n\u003e is link state ignored when setting\n\nYes, only admin state is considered when setting flags. See lines 95-97 in [1]\n\n[1] https://gerrit.fd.io/r/c/vpp/+/18361/20/src/vnet/interface_api.c",
      "parentUuid": "7e935dcf_cb032e40",
      "range": {
        "startLine": 184,
        "startChar": 64,
        "endLine": 184,
        "endChar": 72
      },
      "revId": "71be76c5d3fc1153f276bea185c8bf0d177c921a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb054a5d_f823773d",
        "filename": "resources/libraries/python/InterfaceUtil.py",
        "patchSetId": 10
      },
      "lineNbr": 186,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-08-16T07:41:20Z",
      "side": 1,
      "message": "Why was this not modeled in Enum, I think we should ping Jakub to do so.",
      "range": {
        "startLine": 186,
        "startChar": 24,
        "endLine": 186,
        "endChar": 25
      },
      "revId": "71be76c5d3fc1153f276bea185c8bf0d177c921a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c76a556c_5b8332f7",
        "filename": "resources/libraries/python/InterfaceUtil.py",
        "patchSetId": 10
      },
      "lineNbr": 186,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-08-16T15:26:29Z",
      "side": 1,
      "message": "I believe it is a common approach for \"flags\", as in 1-bit independent attributes.\nLook at SubInterfaceFlags, you do not want to have a line for all 512 combinations.\nThe zero here is in fact a \"bitwise or of empty set of flags\".\nNo easy way to write that in Python, unless we want to create out own function for bitwise or with variable number of arguments.",
      "parentUuid": "bb054a5d_f823773d",
      "range": {
        "startLine": 186,
        "startChar": 24,
        "endLine": 186,
        "endChar": 25
      },
      "revId": "71be76c5d3fc1153f276bea185c8bf0d177c921a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e4346c6_89c33c22",
        "filename": "resources/libraries/python/InterfaceUtil.py",
        "patchSetId": 10
      },
      "lineNbr": 186,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-08-16T18:13:59Z",
      "side": 1,
      "message": "Yes I noticed that in GBP, but unfortunately from Jakub I know that the rule of thumb does not work in VPP. Currently you have either value of enum 0,1,2,3,4... like ordered list or you have bitfield. From name it is not clear usually you noticed it as bitfield is hex 0x. It is hard for CSIT to guess but:\n1) If this is bitfield there is not \"512 possibilities\" only width of var (C style) so e.g. u8 is max 8 values\n2) If this is enum and here comes the problem!! it can be indexed from 0 or 1 (no rules in VPP today). I noticed that sometimes it is 0 as default and sometimes as \"no value\". (compiler usually does from 0).\n\nBecause of 2) i am worried that simply 0 is forgotten here and should be added as option as you cannot have nothing state. Interface must be in either of state. it cannot be in no-state.\n\nI think this is for Ole to fix and make clear. -1 as init value also does not make sense in C (it is max value in fact). So i know it is hard but some rules must be set here.\n\nEvery C coder knows that C is lower level lang. You cannot have non initialized anything :)\n\n\nSorry for long post but state is:\nADMIN_DOWN LINK_DOWN\nADMIN_DOWN LINK_UP\nADMIN_UP LINK_DOWN -\u003e this is valid state\nADMIN_UP LINK_UP -\u003e this is victory\n...having Enum with 2 state is weird ;)",
      "parentUuid": "c76a556c_5b8332f7",
      "range": {
        "startLine": 186,
        "startChar": 24,
        "endLine": 186,
        "endChar": 25
      },
      "revId": "71be76c5d3fc1153f276bea185c8bf0d177c921a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7459e378_e9c6e38e",
        "filename": "resources/libraries/python/InterfaceUtil.py",
        "patchSetId": 10
      },
      "lineNbr": 186,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-08-19T11:06:04Z",
      "side": 1,
      "message": "\u003e From name it is not clear usually you noticed it\n\nPerhaps it depends on whether the code is new, or old. When speaking about 18361, I have a feeling an enum is bitfield if and only if its name ends with \"flags\". So if_status_flags (CSIT analogue at line 33) and sub_if_flags (line 55) are bitfields, other enums are not.\n\n\u003e If this is bitfield there is not \"512 possibilities\"\n\nI believe C will pick smallest (unsigned) int type to fit all explicit values, so u8 for if_status_flags and u16 for sub_if_flags.\n\n\u003e e.g. u8 is max 8 values\n\nThe u8 type fits 8 independent flags, 256 flag combinations.\nBut if only 2 flags are defined, only 4 combinations are relevant for VPP.\n\nADMIN_DOWN LINK_DOWN \u003c\u003d\u003e 0x00 \u003d\u003d 0\nADMIN_DOWN LINK_UP \u003c\u003d\u003e 0x02 \u003d\u003d IF_STATUS_API_FLAG_LINK_UP\nADMIN_UP LINK_DOWN \u003c\u003d\u003e 0x01 \u003d\u003d IF_STATUS_API_FLAG_ADMIN_UP (used in line 317)\nADMIN_UP LINK_UP \u003c\u003d\u003e 0x03 \u003d\u003d IF_STATUS_API_FLAG_LINK_UP | IF_STATUS_API_FLAG_ADMIN_UP",
      "parentUuid": "7e4346c6_89c33c22",
      "range": {
        "startLine": 186,
        "startChar": 24,
        "endLine": 186,
        "endChar": 25
      },
      "revId": "71be76c5d3fc1153f276bea185c8bf0d177c921a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00bab1f9_ec6064ff",
        "filename": "resources/libraries/python/InterfaceUtil.py",
        "patchSetId": 10
      },
      "lineNbr": 186,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-08-19T11:48:33Z",
      "side": 1,
      "message": "Flag !\u003d flag combination\nIf you want to express only one option out of 8 you can use u8 and depends on code but there is just bitmask to detect which 1 is applied. (standard in registry programming). IoW look at VPP flags there is always power of 2.\n\nHere using u8 (or nibble) is weird as it can be better modeled by 2 variables of bool. But again look at VPP API bitfields are enum with shifted 1s, not combination of all bits.\n\n\u003e I believe C will pick smallest (unsigned) int type to fit all explicit values, so u8 for if_status_flags and u16 for sub_if_flags.\n\nC will pick what ever you will ask it for u8 u16 u32 or Long , double, floats. In VPP code you do see explicit types.",
      "parentUuid": "7459e378_e9c6e38e",
      "range": {
        "startLine": 186,
        "startChar": 24,
        "endLine": 186,
        "endChar": 25
      },
      "revId": "71be76c5d3fc1153f276bea185c8bf0d177c921a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4734142_ce4d1eec",
        "filename": "resources/libraries/python/InterfaceUtil.py",
        "patchSetId": 10
      },
      "lineNbr": 186,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-08-19T12:56:54Z",
      "side": 1,
      "message": "\u003e Flag !\u003d flag combination\n\nAh, right. A single bit \"field\" (as a position in bit array) stands for a single flag. A combination of flags would be called bit array. While we use IntEnum to name some bit array states (those with just one bitfield nonzero), any bit array state is a valid value for VPP API, because in C each enumeration is compatible with some int type.\n\nI have not figured out a way to persuade vppapigen to cough up the actual generated .api.h file, but I believe that enums defined in .api files have somewhat configurable [2] type, with u32 [3] being the default.\n\n[2] https://github.com/FDio/vpp/blob/master/src/tools/vppapigen/vppapigen.py#L425-L440\n[3] https://github.com/FDio/vpp/blob/master/src/tools/vppapigen/vppapigen.py#L220",
      "parentUuid": "00bab1f9_ec6064ff",
      "range": {
        "startLine": 186,
        "startChar": 24,
        "endLine": 186,
        "endChar": 25
      },
      "revId": "71be76c5d3fc1153f276bea185c8bf0d177c921a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "274ae4eb_53609bde",
        "filename": "resources/libraries/python/InterfaceUtil.py",
        "patchSetId": 10
      },
      "lineNbr": 317,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-08-16T15:26:29Z",
      "side": 1,
      "message": "Would be more readable with the enum name, but would also be too long.",
      "range": {
        "startLine": 317,
        "startChar": 45,
        "endLine": 317,
        "endChar": 46
      },
      "revId": "71be76c5d3fc1153f276bea185c8bf0d177c921a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c78d5fe1_8c656d74",
        "filename": "tests/vpp/perf/ip4/10ge2p1x710-ethip4udp-ip4base-iacl10sf-100flows-ndrpdr.robot",
        "patchSetId": 10
      },
      "lineNbr": 16,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-08-16T07:29:10Z",
      "side": 1,
      "message": "Put into the default.robot",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 16,
        "endChar": 1
      },
      "revId": "71be76c5d3fc1153f276bea185c8bf0d177c921a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "662ad33d_9cab018a",
        "filename": "tests/vpp/perf/ip4/10ge2p1x710-ethip4udp-ip4base-iacl10sf-100flows-ndrpdr.robot",
        "patchSetId": 10
      },
      "lineNbr": 16,
      "author": {
        "id": 207
      },
      "writtenOn": "2019-08-16T07:35:51Z",
      "side": 1,
      "message": "Well, that\u0027s not good approach to import all side resource files via default resource file to all test suites... default.robot should contain only staff needed in every (or at least in most of) csit test suites. Why should we import acl related resources to e.g. base ip4 test?\nRF is scalable so let\u0027s use it.",
      "parentUuid": "c78d5fe1_8c656d74",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 16,
        "endChar": 1
      },
      "revId": "71be76c5d3fc1153f276bea185c8bf0d177c921a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36382a0a_722662ee",
        "filename": "tests/vpp/perf/ip4/10ge2p1x710-ethip4udp-ip4base-iacl10sf-100flows-ndrpdr.robot",
        "patchSetId": 10
      },
      "lineNbr": 16,
      "author": {
        "id": 76
      },
      "writtenOn": "2019-08-16T08:01:26Z",
      "side": 1,
      "message": "I was trying to build some map of dependencies and currently it is very bad. Libraries of python/robot are huge (see previously what was in performance_setup.robot) and mixed. So for example acl.robot is depending on interfaces.robot and ipv4.robot.\nThis results into state when is hard to move KW as the dependency chain is cyclic. Not sure without proper refactor how to approach. We should first do more strict KWs and from acl.robot run only acl L1 KW. Then it might work. Cause ACL i found in other non-ACL libraries. It is mess :)\n\nMaybe my intuition is wrong but having only default.robot in tests will help us in refactor of L2 KWs??",
      "parentUuid": "662ad33d_9cab018a",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 16,
        "endChar": 1
      },
      "revId": "71be76c5d3fc1153f276bea185c8bf0d177c921a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6b09740_5f07e063",
        "filename": "tests/vpp/perf/ip4/10ge2p1x710-ethip4udp-ip4base-iacl10sf-100flows-ndrpdr.robot",
        "patchSetId": 10
      },
      "lineNbr": 16,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-08-16T15:26:29Z",
      "side": 1,
      "message": "\u003e having only default.robot\n\nHaving only one import in suites definitely simplifies their maintenance, assuming Robot is still fast and not memory constrained.\nBut at that point, perhaps resources/libraries/robot/shared/default.robot is not the best name. What about resources/libraries/robot/all.robot?",
      "parentUuid": "36382a0a_722662ee",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 16,
        "endChar": 1
      },
      "revId": "71be76c5d3fc1153f276bea185c8bf0d177c921a",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    }
  ]
}