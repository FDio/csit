diff --git a/src/vpp-api/python/vpp_papi/vpp_papi.py b/src/vpp-api/python/vpp_papi/vpp_papi.py
index 78809653d..c6f312903 100644
--- a/src/vpp-api/python/vpp_papi/vpp_papi.py
+++ b/src/vpp-api/python/vpp_papi/vpp_papi.py
@@ -653,8 +653,10 @@ class VPPApiClient(object):
 
             if not multipart:
                 rl = r
+                logger.debug("Adding part {r!r}".format(r=r))
                 break
             if msgname == 'control_ping_reply':
+                logger.debug("Got ping reply {r!r}".fomrat(r=r))
                 break
 
             rl.append(r)
@@ -685,6 +687,7 @@ class VPPApiClient(object):
             kwargs['client_index'] = 0
         kwargs['_vl_msg_id'] = i
         b = msg.pack(kwargs)
+        logger.debug("Sending async {b!r}".format(b=b))
 
         self.transport.write(b)
 
diff --git a/src/vpp-api/python/vpp_papi/vpp_transport_socket.py b/src/vpp-api/python/vpp_papi/vpp_transport_socket.py
index d26a3d47b..dcff9d79a 100644
--- a/src/vpp-api/python/vpp_papi/vpp_transport_socket.py
+++ b/src/vpp-api/python/vpp_papi/vpp_transport_socket.py
@@ -123,6 +123,7 @@ class VppTransport(object):
             raise VppTransportSocketIOError('Invalid reply message')
 
         r, length = sockclnt_create_reply.unpack(msg)
+        logging.info("Got sockclnt_create_reply.")
         self.socket_index = r.index
         for m in r.message_table:
             n = m.name.rstrip(b'\x00\x13')
@@ -152,6 +153,8 @@ class VppTransport(object):
         if self.message_thread is not None and self.message_thread.is_alive():
             # Allow additional connect() calls.
             self.message_thread.join()
+        # Wipe message table, VPP can be restarted with different plugins.
+        self.message_table = {}
         # Collect garbage.
         self.message_thread = None
         self.socket = None
@@ -217,6 +220,7 @@ class VppTransport(object):
         if not self.connected:
             raise VppTransportSocketIOError(1, 'Not connected')
         try:
-            return self.q.get(True, self.read_timeout)
+            msg = self.q.get(True, self.read_timeout)
+            return msg
         except queue.Empty:
             return None
