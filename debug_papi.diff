diff --git a/src/vpp-api/python/vpp_papi/vpp_papi.py b/src/vpp-api/python/vpp_papi/vpp_papi.py
index 78809653d..174f4cfb9 100644
--- a/src/vpp-api/python/vpp_papi/vpp_papi.py
+++ b/src/vpp-api/python/vpp_papi/vpp_papi.py
@@ -555,6 +555,8 @@ class VPPApiClient(object):
             return
 
         (i, ci), size = self.header.unpack(msg, 0)
+        self.logger.debug("i {i!r} ci {ci!r} size {size!r}".format(
+            i=i, ci=ci, size=size))
         if self.id_names[i] == 'rx_thread_exit':
             return
 
@@ -562,10 +564,12 @@ class VPPApiClient(object):
         # Decode message and returns a tuple.
         #
         msgobj = self.id_msgdef[i]
+        self.logger.debug("msgobj {obj!r}".format(obj=msgobj))
         if not msgobj:
             raise VPPIOError(2, 'Reply message undefined')
 
         r, size = msgobj.unpack(msg, ntc=no_type_conversion)
+        self.logger.debug("r {r!r} size {size!r}".format(r=r, size=size))
         return r
 
     def msg_handler_async(self, msg):
diff --git a/src/vpp-api/python/vpp_papi/vpp_transport_socket.py b/src/vpp-api/python/vpp_papi/vpp_transport_socket.py
index d26a3d47b..d65338010 100644
--- a/src/vpp-api/python/vpp_papi/vpp_transport_socket.py
+++ b/src/vpp-api/python/vpp_papi/vpp_transport_socket.py
@@ -123,10 +123,12 @@ class VppTransport(object):
             raise VppTransportSocketIOError('Invalid reply message')
 
         r, length = sockclnt_create_reply.unpack(msg)
+        logging.info("sockclnt_create_reply: {r!r}".format(r=r))
         self.socket_index = r.index
         for m in r.message_table:
             n = m.name.rstrip(b'\x00\x13')
             self.message_table[n] = m.index
+        logging.info("self.message_table: {mt!r}".format(mt=self.message_table))
 
         self.message_thread.daemon = True
         self.message_thread.start()
@@ -152,6 +154,8 @@ class VppTransport(object):
         if self.message_thread is not None and self.message_thread.is_alive():
             # Allow additional connect() calls.
             self.message_thread.join()
+        # Wipe message table, VPP can be restarted with different plugins.
+        self.message_table = {}
         # Collect garbage.
         self.message_thread = None
         self.socket = None
@@ -217,6 +221,8 @@ class VppTransport(object):
         if not self.connected:
             raise VppTransportSocketIOError(1, 'Not connected')
         try:
-            return self.q.get(True, self.read_timeout)
+            msg = self.q.get(True, self.read_timeout)
+            logging.debug("Read msg {msg!r}".format(msg=msg))
+            return msg
         except queue.Empty:
             return None
