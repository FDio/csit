{
  "comments": [
    {
      "key": {
        "uuid": "2fbb461f_a309856e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-24T14:01:54Z",
      "side": 1,
      "message": "Why do you think threading will prevent hangs?",
      "range": {
        "startLine": 9,
        "startChar": 6,
        "endLine": 9,
        "endChar": 21
      },
      "revId": "db2e63521bc432fa8bc15e4cbc983d8e2099d372",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09f8041f_660b690e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 576
      },
      "writtenOn": "2019-05-27T07:30:38Z",
      "side": 1,
      "message": "From what I\u0027ve googled there\u0027s some interaction between scp and multiprocessing that causes the hanging, so I wanted to try threading and see what happens.\n\nI don\u0027t actually know the low level details, but threading seems to have solved the hanging issue.",
      "parentUuid": "2fbb461f_a309856e",
      "range": {
        "startLine": 9,
        "startChar": 6,
        "endLine": 9,
        "endChar": 21
      },
      "revId": "db2e63521bc432fa8bc15e4cbc983d8e2099d372",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d869574_ad590ece",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-28T10:55:44Z",
      "side": 1,
      "message": "\u003e threading seems to have solved the hanging issue.\n\nAlright.",
      "parentUuid": "09f8041f_660b690e",
      "range": {
        "startLine": 9,
        "startChar": 6,
        "endLine": 9,
        "endChar": 21
      },
      "revId": "db2e63521bc432fa8bc15e4cbc983d8e2099d372",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ef4bbb0_ca2e2666",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-24T14:01:54Z",
      "side": 1,
      "message": "It also honors Global Interpreter Lock, so I am not sure two ssh-like commands would actually run in parallel.\nHave you compared the times before and after this patch?",
      "range": {
        "startLine": 10,
        "startChar": 23,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "db2e63521bc432fa8bc15e4cbc983d8e2099d372",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad3d78ff_9cc7a462",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-24T14:09:31Z",
      "side": 1,
      "message": "\u003e Have you compared the times\n\nFrom what I see, framework setup takes almost the same time, but framework teardown is much faster with multithreading.\nSo the idea is good.",
      "parentUuid": "1ef4bbb0_ca2e2666",
      "range": {
        "startLine": 10,
        "startChar": 23,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "db2e63521bc432fa8bc15e4cbc983d8e2099d372",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf1d2e0b_8c353101",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 576
      },
      "writtenOn": "2019-05-27T07:30:38Z",
      "side": 1,
      "message": "Good to hear that GIL is not a problem.",
      "parentUuid": "ad3d78ff_9cc7a462",
      "range": {
        "startLine": 10,
        "startChar": 23,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "db2e63521bc432fa8bc15e4cbc983d8e2099d372",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de3282d4_791bd070",
        "filename": "resources/libraries/python/SetupFramework.py",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-24T14:01:54Z",
      "side": 1,
      "message": "Is this needed?\nWhat if early thread finishes sooner than later thread starts?",
      "range": {
        "startLine": 261,
        "startChar": 24,
        "endLine": 261,
        "endChar": 36
      },
      "revId": "db2e63521bc432fa8bc15e4cbc983d8e2099d372",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "278e898c_3e5b3f7c",
        "filename": "resources/libraries/python/SetupFramework.py",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 576
      },
      "writtenOn": "2019-05-27T08:00:43Z",
      "side": 1,
      "message": "There needs to be some delay before joining the threads to actually let them start (I was getting errors saying the thread hasn\u0027t started yet and join() couldn\u0027t be called).\n\nThis is what I came up with. I didn\u0027t want to use just time.sleep(1), but we could combine these - wait for active_count, stop waiting if active_count - 1 (I forgot about the main thread) is less than thread_count after a second.",
      "parentUuid": "de3282d4_791bd070",
      "range": {
        "startLine": 261,
        "startChar": 24,
        "endLine": 261,
        "endChar": 36
      },
      "revId": "db2e63521bc432fa8bc15e4cbc983d8e2099d372",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cfc5f3e0_fe8fc749",
        "filename": "resources/libraries/python/SetupFramework.py",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1263
      },
      "writtenOn": "2019-05-28T10:55:44Z",
      "side": 1,
      "message": "\u003e the thread hasn\u0027t started yet and join() couldn\u0027t be called\n\nI have not seen that one before, I am not even able to google for it.\nLooking at the actual implementation, it seems your error is thrown here [0], but the event should be set [1] already when start() returns.\n\nOn the other hand, I still fear the deadlock if a thread (miraculously) manages to finish before main thread progresses to line 263.\n(And neither do I like the busy-wait for one second in patch set 3.)\n\n[0] https://github.com/python/cpython/blob/2.7/Lib/threading.py#L928-L929\n[1] https://github.com/python/cpython/blob/2.7/Lib/threading.py#L741",
      "parentUuid": "278e898c_3e5b3f7c",
      "range": {
        "startLine": 261,
        "startChar": 24,
        "endLine": 261,
        "endChar": 36
      },
      "revId": "db2e63521bc432fa8bc15e4cbc983d8e2099d372",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06da597a_9b6f42f0",
        "filename": "resources/libraries/python/SetupFramework.py",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 576
      },
      "writtenOn": "2019-05-28T12:08:09Z",
      "side": 1,
      "message": "I also don\u0027t like the busy-wait.\n\nLooking at the code, it didn\u0027t make sense that the Exception is raised, so I tried it without the loop and it works without it (i.e. just calling start() and then join()). I must\u0027ve forgotten to call start() in some version of my code (or something similar).\n\nWill submit a new PS shortly.",
      "parentUuid": "cfc5f3e0_fe8fc749",
      "range": {
        "startLine": 261,
        "startChar": 24,
        "endLine": 261,
        "endChar": 36
      },
      "revId": "db2e63521bc432fa8bc15e4cbc983d8e2099d372",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": false
    }
  ]
}